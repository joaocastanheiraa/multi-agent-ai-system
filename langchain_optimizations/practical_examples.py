#!/usr/bin/env python3
"""
üéØ EXEMPLOS PR√ÅTICOS DE OTIMIZA√á√ïES LANGCHAIN
============================================

Demonstra√ß√µes pr√°ticas de como usar as otimiza√ß√µes descobertas
para melhorar significativamente a performance e funcionalidade
dos agentes LangChain.
"""

import asyncio
import json
from pathlib import Path
from typing import List, Dict, Any

# Imports das otimiza√ß√µes
from optimized_agent_base import (
    OptimizedAgentBase, 
    AgentConfig, 
    OptimizedAgentFactory,
    ExampleOptimizedAgent
)

# Imports MCP para ferramentas avan√ßadas
from langchain_mcp_tools import convert_mcp_to_langchain_tools

class AdvancedCopywriterAgent(OptimizedAgentBase):
    """
    Agente copywriter otimizado com funcionalidades avan√ßadas
    """
    
    def __init__(self, config: AgentConfig, tools: List = None):
        super().__init__(config, tools)
        
        # Configurar contexto espec√≠fico para copywriting
        if self.memory:
            self.memory.set_context("expertise", "copywriting")
            self.memory.set_context("style_guide", {
                "tone": "persuasivo",
                "target_audience": "empreendedores",
                "call_to_action": "sempre incluir"
            })
    
    async def _process_core_logic(self, input_text: str, context: Dict) -> str:
        """L√≥gica otimizada para copywriting"""
        
        # Enriquecer prompt com contexto de copywriting
        enhanced_prompt = f"""
        Como especialista em copywriting persuasivo, analise e responda:
        
        Contexto: {context.get('chat_history', 'Primeira intera√ß√£o')}
        Solicita√ß√£o: {input_text}
        
        Diretrizes:
        - Use t√©cnicas de neuroci√™ncia da persuas√£o
        - Inclua gatilhos emocionais apropriados
        - Estruture com headlines impactantes
        - Termine sempre com call-to-action claro
        
        Resposta otimizada:
        """
        
        if self.agent:
            response = await self.agent.ainvoke({"messages": [("user", enhanced_prompt)]})
            return response['messages'][-1].content
        else:
            from langchain.schema import HumanMessage
            messages = [HumanMessage(content=enhanced_prompt)]
            response = await self.llm.ainvoke(messages)
            return response.content

class AnalyticsAgent(OptimizedAgentBase):
    """
    Agente de analytics otimizado com ferramentas MCP
    """
    
    async def _process_core_logic(self, input_text: str, context: Dict) -> str:
        """L√≥gica otimizada para an√°lise de dados"""
        
        # Usar ferramentas MCP para an√°lise de arquivos
        if self.agent and self.tools:
            enhanced_prompt = f"""
            Como especialista em analytics, analise a solicita√ß√£o e use as ferramentas dispon√≠veis:
            
            Solicita√ß√£o: {input_text}
            
            Ferramentas dispon√≠veis: {[tool.name for tool in self.tools]}
            
            Passos:
            1. Identifique se precisa acessar arquivos ou dados
            2. Use as ferramentas apropriadas para coleta
            3. Analise os dados coletados
            4. Forne√ßa insights acion√°veis
            5. Inclua visualiza√ß√µes ou m√©tricas quando relevante
            """
            
            response = await self.agent.ainvoke({"messages": [("user", enhanced_prompt)]})
            return response['messages'][-1].content
        else:
            return await super()._process_core_logic(input_text, context)

class MultiAgentOrchestrator:
    """
    Orquestrador para m√∫ltiplos agentes otimizados
    """
    
    def __init__(self):
        self.agents = {}
        self.routing_rules = {}
    
    def add_agent(self, name: str, agent: OptimizedAgentBase, keywords: List[str] = None):
        """Adicionar agente ao orquestrador"""
        self.agents[name] = agent
        if keywords:
            for keyword in keywords:
                self.routing_rules[keyword.lower()] = name
    
    def _route_request(self, input_text: str) -> str:
        """Rotear solicita√ß√£o para o agente apropriado"""
        input_lower = input_text.lower()
        
        for keyword, agent_name in self.routing_rules.items():
            if keyword in input_lower:
                return agent_name
        
        # Agente padr√£o
        return list(self.agents.keys())[0] if self.agents else None
    
    async def process_request(self, input_text: str, agent_name: str = None) -> Dict[str, Any]:
        """Processar solicita√ß√£o com roteamento inteligente"""
        
        # Determinar agente
        if not agent_name:
            agent_name = self._route_request(input_text)
        
        if agent_name not in self.agents:
            return {
                "error": f"Agente '{agent_name}' n√£o encontrado",
                "available_agents": list(self.agents.keys())
            }
        
        agent = self.agents[agent_name]
        
        # Processar com m√©tricas
        start_time = asyncio.get_event_loop().time()
        result = await agent.process_input(input_text)
        end_time = asyncio.get_event_loop().time()
        
        return {
            "agent_used": agent_name,
            "result": result,
            "processing_time": end_time - start_time,
            "metrics": agent.get_metrics()
        }

async def demonstrate_optimizations():
    """Demonstrar as otimiza√ß√µes implementadas"""
    print("üöÄ DEMONSTRA√á√ÉO DE OTIMIZA√á√ïES LANGCHAIN")
    print("=" * 60)
    
    # 1. Criar agentes otimizados com diferentes configura√ß√µes
    print("\n1Ô∏è‚É£ CRIANDO AGENTES OTIMIZADOS")
    print("-" * 40)
    
    # Agente de alta performance
    hp_config = AgentConfig(
        name="high_performance",
        temperature=0.3,
        max_tokens=1500,
        enable_cache=True,
        cache_ttl=7200,
        memory_type="summary"
    )
    
    # Agente criativo
    creative_config = AgentConfig(
        name="creative",
        temperature=0.9,
        max_tokens=3000,
        enable_cache=False,
        memory_type="buffer"
    )
    
    # Criar agentes
    hp_agent = ExampleOptimizedAgent(hp_config)
    creative_agent = ExampleOptimizedAgent(creative_config)
    
    print(f"‚úÖ Agente de alta performance criado: {hp_agent.config.name}")
    print(f"‚úÖ Agente criativo criado: {creative_agent.config.name}")
    
    # 2. Demonstrar cache inteligente
    print("\n2Ô∏è‚É£ DEMONSTRANDO CACHE INTELIGENTE")
    print("-" * 40)
    
    test_query = "Explique o conceito de intelig√™ncia artificial"
    
    # Primeira chamada (sem cache)
    print("Primeira chamada (sem cache)...")
    result1 = await hp_agent.process_input(test_query)
    print(f"Resultado: {result1[:100]}...")
    
    # Segunda chamada (com cache)
    print("Segunda chamada (com cache)...")
    result2 = await hp_agent.process_input(test_query)
    print(f"Resultado: {result2[:100]}...")
    print(f"Cache hit: {result1 == result2}")
    
    # 3. Demonstrar mem√≥ria avan√ßada
    print("\n3Ô∏è‚É£ DEMONSTRANDO MEM√ìRIA AVAN√áADA")
    print("-" * 40)
    
    # Conversa√ß√£o com mem√≥ria
    await creative_agent.process_input("Meu nome √© Jo√£o e gosto de tecnologia")
    response = await creative_agent.process_input("Qual √© o meu nome e o que eu gosto?")
    print(f"Resposta com mem√≥ria: {response}")
    
    # 4. Demonstrar agente especializado
    print("\n4Ô∏è‚É£ DEMONSTRANDO AGENTE COPYWRITER ESPECIALIZADO")
    print("-" * 50)
    
    copywriter_config = AgentConfig(
        name="copywriter_pro",
        temperature=0.7,
        max_tokens=2000,
        enable_memory=True,
        memory_type="buffer"
    )
    
    copywriter = AdvancedCopywriterAgent(copywriter_config)
    copy_result = await copywriter.process_input(
        "Crie um headline para um curso de marketing digital"
    )
    print(f"Copy gerada: {copy_result}")
    
    # 5. Demonstrar orquestrador multi-agente
    print("\n5Ô∏è‚É£ DEMONSTRANDO ORQUESTRADOR MULTI-AGENTE")
    print("-" * 50)
    
    orchestrator = MultiAgentOrchestrator()
    orchestrator.add_agent("copywriter", copywriter, ["copy", "headline", "texto"])
    orchestrator.add_agent("analytics", hp_agent, ["dados", "an√°lise", "m√©tricas"])
    
    # Teste de roteamento
    copy_request = await orchestrator.process_request(
        "Preciso de um copy para minha landing page"
    )
    print(f"Agente usado: {copy_request['agent_used']}")
    print(f"Resultado: {copy_request['result'][:100]}...")
    
    # 6. Demonstrar m√©tricas e observabilidade
    print("\n6Ô∏è‚É£ DEMONSTRANDO M√âTRICAS E OBSERVABILIDADE")
    print("-" * 50)
    
    metrics = hp_agent.get_metrics()
    print("M√©tricas do agente de alta performance:")
    print(json.dumps(metrics, indent=2, default=str))
    
    print("\n‚úÖ DEMONSTRA√á√ÉO CONCLU√çDA!")
    print("=" * 60)
    
    # Cleanup
    hp_agent.cleanup()
    creative_agent.cleanup()
    copywriter.cleanup()

async def create_optimized_agent_from_existing():
    """
    Exemplo de como migrar um agente existente para a vers√£o otimizada
    """
    print("\nüîÑ MIGRANDO AGENTE EXISTENTE PARA VERS√ÉO OTIMIZADA")
    print("=" * 60)
    
    # Configura√ß√£o baseada em um agente existente do projeto
    existing_agent_config = AgentConfig(
        name="neurohook_ultra_optimized",
        model="gpt-4o-mini",
        temperature=0.8,  # Criatividade para hooks
        max_tokens=2500,
        enable_memory=True,
        memory_type="buffer",
        enable_cache=True,
        cache_ttl=3600,
        log_level="INFO",
        max_retries=3
    )
    
    class NeurohookUltraOptimized(OptimizedAgentBase):
        """Vers√£o otimizada do Neurohook Ultra"""
        
        def __init__(self, config: AgentConfig, tools: List = None):
            super().__init__(config, tools)
            
            # Configurar contexto espec√≠fico
            if self.memory:
                self.memory.set_context("expertise", "neurohooks")
                self.memory.set_context("techniques", [
                    "curiosity_gap",
                    "social_proof",
                    "scarcity",
                    "authority",
                    "reciprocity"
                ])
        
        async def _process_core_logic(self, input_text: str, context: Dict) -> str:
            """L√≥gica otimizada para cria√ß√£o de neurohooks"""
            
            enhanced_prompt = f"""
            Como especialista em neurohooks e psicologia da aten√ß√£o, crie hooks magn√©ticos:
            
            Contexto da conversa: {context.get('chat_history', 'Nova sess√£o')}
            Solicita√ß√£o: {input_text}
            
            T√©cnicas dispon√≠veis: {self.memory.get_context('techniques') if self.memory else 'Todas'}
            
            Diretrizes:
            1. Use gatilhos neurol√≥gicos comprovados
            2. Crie curiosity gaps irresist√≠veis
            3. Aplique princ√≠pios de neuroci√™ncia da aten√ß√£o
            4. Teste m√∫ltiplas varia√ß√µes
            5. Otimize para diferentes plataformas
            
            Resposta com neurohooks otimizados:
            """
            
            if self.agent:
                response = await self.agent.ainvoke({"messages": [("user", enhanced_prompt)]})
                return response['messages'][-1].content
            else:
                from langchain.schema import HumanMessage
                messages = [HumanMessage(content=enhanced_prompt)]
                response = await self.llm.ainvoke(messages)
                return response.content
    
    # Criar agente otimizado
    neurohook_agent = NeurohookUltraOptimized(existing_agent_config)
    
    # Testar
    result = await neurohook_agent.process_input(
        "Crie 5 hooks para um post sobre produtividade no LinkedIn"
    )
    
    print("üéØ Neurohooks gerados:")
    print(result)
    
    # Mostrar m√©tricas
    print("\nüìä M√©tricas do agente:")
    metrics = neurohook_agent.get_metrics()
    print(json.dumps(metrics, indent=2, default=str))
    
    # Salvar configura√ß√£o para reutiliza√ß√£o
    neurohook_agent.save_config("config_examples/neurohook_optimized.json")
    print("\nüíæ Configura√ß√£o salva para reutiliza√ß√£o")
    
    neurohook_agent.cleanup()

async def demonstrate_mcp_integration():
    """Demonstrar integra√ß√£o com ferramentas MCP"""
    print("\nüîß DEMONSTRANDO INTEGRA√á√ÉO MCP AVAN√áADA")
    print("=" * 50)
    
    try:
        # Configurar servidores MCP
        mcp_servers = {
            "filesystem": {
                "command": "npx",
                "args": ["-y", "@modelcontextprotocol/server-filesystem", str(Path.cwd())]
            }
        }
        
        # Converter para ferramentas LangChain
        tools, cleanup = await convert_mcp_to_langchain_tools(mcp_servers)
        
        print(f"‚úÖ {len(tools)} ferramentas MCP carregadas")
        
        # Criar agente analytics com ferramentas MCP
        analytics_config = AgentConfig(
            name="analytics_mcp",
            temperature=0.2,
            max_tokens=2000,
            enable_memory=True,
            memory_type="summary"
        )
        
        analytics_agent = AnalyticsAgent(analytics_config, tools)
        
        # Testar an√°lise de arquivos
        result = await analytics_agent.process_input(
            "Analise a estrutura do projeto e identifique os principais arquivos Python"
        )
        
        print("üìä An√°lise com ferramentas MCP:")
        print(result)
        
        # Cleanup
        analytics_agent.cleanup()
        await cleanup()
        
    except Exception as e:
        print(f"‚ö†Ô∏è Erro na integra√ß√£o MCP: {e}")

async def main():
    """Fun√ß√£o principal com todas as demonstra√ß√µes"""
    try:
        await demonstrate_optimizations()
        await create_optimized_agent_from_existing()
        await demonstrate_mcp_integration()
        
    except Exception as e:
        print(f"‚ùå Erro na demonstra√ß√£o: {e}")
        import traceback
        traceback.print_exc()

if __name__ == "__main__":
    asyncio.run(main()) 