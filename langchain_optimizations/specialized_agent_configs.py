#!/usr/bin/env python3
"""
üéØ CONFIGURA√á√ïES ESPECIALIZADAS DE AGENTES LANGCHAIN
====================================================

Configura√ß√µes pr√©-definidas para diferentes tipos de agentes especializados,
utilizando todos os recursos avan√ßados descobertos via an√°lise MCP-LangChain.

Tipos de agentes especializados:
- Enterprise RAG Agent
- Research Analysis Agent  
- Creative Writing Agent
- Technical Documentation Agent
- Code Analysis Agent
- Multi-Modal Agent
- Streaming Analytics Agent
"""

import json
from typing import Dict, Any, List, Optional
from dataclasses import dataclass, asdict
from pathlib import Path

from optimized_agent_base import AgentConfig
from advanced_langchain_features import AdvancedFeatureConfig, AdvancedLangChainAgent

@dataclass
class SpecializedAgentTemplate:
    """Template para agente especializado"""
    name: str
    description: str
    use_cases: List[str]
    agent_config: AgentConfig
    advanced_config: AdvancedFeatureConfig
    custom_prompts: Dict[str, str]
    recommended_tools: List[str]
    performance_profile: Dict[str, Any]

class SpecializedAgentConfigs:
    """Configura√ß√µes para agentes especializados"""
    
    @staticmethod
    def get_enterprise_rag_config() -> SpecializedAgentTemplate:
        """Configura√ß√£o para Enterprise RAG Agent"""
        return SpecializedAgentTemplate(
            name="enterprise_rag_agent",
            description="Agente especializado em RAG empresarial com alta precis√£o e seguran√ßa",
            use_cases=[
                "Consulta a bases de conhecimento corporativas",
                "An√°lise de documentos internos",
                "Suporte a decis√µes baseadas em dados",
                "Compliance e auditoria de informa√ß√µes"
            ],
            agent_config=AgentConfig(
                name="enterprise_rag",
                model="gpt-4o",  # Modelo mais robusto para empresa
                temperature=0.1,  # Baixa criatividade, alta precis√£o
                max_tokens=4000,
                timeout=120,  # Timeout maior para consultas complexas
                enable_memory=True,
                memory_type="summary",
                enable_cache=True,
                cache_ttl=7200,  # Cache de 2 horas
                log_level="INFO",
                enable_streaming=False,  # Desabilitado para maior controle
                max_retries=5,
                retry_delay=2.0
            ),
            advanced_config=AdvancedFeatureConfig(
                enable_lcel_chains=True,
                enable_vector_store=True,
                enable_streaming=False,
                enable_advanced_prompts=True,
                enable_rag=True,
                enable_custom_tools=True,
                vector_store_type="in_memory",  # Pode ser alterado para FAISS/Chroma
                embedding_model="text-embedding-3-large",  # Embeddings de alta qualidade
                chunk_size=800,  # Chunks menores para maior precis√£o
                chunk_overlap=100,
                retriever_k=10  # Mais documentos para an√°lise
            ),
            custom_prompts={
                "system": """Voc√™ √© um assistente corporativo especializado em an√°lise de documentos empresariais. 
                Suas respostas devem ser:
                - Precisas e baseadas em evid√™ncias
                - Profissionais e objetivas
                - Incluir refer√™ncias √†s fontes
                - Considerar aspectos de compliance e seguran√ßa
                - Estruturadas e bem organizadas""",
                
                "rag": """Com base nos documentos fornecidos, analise cuidadosamente a quest√£o e forne√ßa uma resposta abrangente.
                
                DOCUMENTOS DE REFER√äNCIA:
                {context}
                
                QUEST√ÉO: {question}
                
                INSTRU√á√ïES:
                1. Cite especificamente os documentos utilizados
                2. Indique o n√≠vel de confian√ßa na resposta
                3. Destaque qualquer informa√ß√£o conflitante
                4. Sugira pr√≥ximos passos se aplic√°vel
                
                RESPOSTA:""",
                
                "analysis": """Realize uma an√°lise detalhada considerando:
                - Aspectos t√©cnicos e operacionais
                - Implica√ß√µes estrat√©gicas
                - Riscos e oportunidades
                - Recomenda√ß√µes pr√°ticas
                
                Quest√£o: {input}
                An√°lise:"""
            },
            recommended_tools=[
                "document_analyzer",
                "compliance_checker", 
                "risk_assessor",
                "citation_generator"
            ],
            performance_profile={
                "accuracy_priority": "high",
                "speed_priority": "medium", 
                "cost_efficiency": "medium",
                "security_level": "high",
                "scalability": "high"
            }
        )
    
    @staticmethod
    def get_research_analysis_config() -> SpecializedAgentTemplate:
        """Configura√ß√£o para Research Analysis Agent"""
        return SpecializedAgentTemplate(
            name="research_analysis_agent",
            description="Agente especializado em pesquisa acad√™mica e an√°lise cient√≠fica",
            use_cases=[
                "An√°lise de papers acad√™micos",
                "S√≠ntese de literatura cient√≠fica",
                "Identifica√ß√£o de tend√™ncias de pesquisa",
                "Suporte √† escrita acad√™mica"
            ],
            agent_config=AgentConfig(
                name="research_analysis",
                model="gpt-4o",
                temperature=0.3,  # Equilibrio entre precis√£o e criatividade
                max_tokens=6000,  # Respostas mais longas para an√°lises
                enable_memory=True,
                memory_type="summary",
                enable_cache=True,
                cache_ttl=14400,  # Cache de 4 horas para pesquisas
                enable_streaming=True,
                max_retries=3
            ),
            advanced_config=AdvancedFeatureConfig(
                enable_lcel_chains=True,
                enable_vector_store=True,
                enable_streaming=True,
                enable_advanced_prompts=True,
                enable_rag=True,
                enable_custom_tools=True,
                embedding_model="text-embedding-3-large",
                chunk_size=1200,  # Chunks maiores para contexto acad√™mico
                chunk_overlap=200,
                retriever_k=15  # Muitos documentos para an√°lise abrangente
            ),
            custom_prompts={
                "system": """Voc√™ √© um assistente de pesquisa acad√™mica especializado em an√°lise cient√≠fica.
                Suas an√°lises devem ser:
                - Metodologicamente rigorosas
                - Baseadas em evid√™ncias cient√≠ficas
                - Cr√≠ticas e imparciais
                - Bem estruturadas com argumenta√ß√£o l√≥gica
                - Incluir limita√ß√µes e incertezas""",
                
                "literature_review": """Realize uma revis√£o sistem√°tica da literatura sobre: {topic}
                
                DOCUMENTOS ANALISADOS:
                {context}
                
                ESTRUTURA DA AN√ÅLISE:
                1. Contexto e relev√¢ncia do tema
                2. Principais achados e tend√™ncias
                3. Metodologias utilizadas
                4. Gaps de conhecimento identificados
                5. Dire√ß√µes futuras de pesquisa
                
                REVIS√ÉO:""",
                
                "methodology_analysis": """Analise criticamente a metodologia apresentada:
                
                {input}
                
                Considere:
                - Validade interna e externa
                - Limita√ß√µes metodol√≥gicas
                - Adequa√ß√£o dos m√©todos aos objetivos
                - Poss√≠veis vieses
                - Sugest√µes de melhoria
                
                AN√ÅLISE METODOL√ìGICA:"""
            },
            recommended_tools=[
                "citation_analyzer",
                "methodology_checker",
                "statistical_analyzer", 
                "literature_mapper"
            ],
            performance_profile={
                "accuracy_priority": "very_high",
                "depth_analysis": "very_high",
                "speed_priority": "medium",
                "cost_efficiency": "low",
                "academic_rigor": "very_high"
            }
        )
    
    @staticmethod
    def get_creative_writing_config() -> SpecializedAgentTemplate:
        """Configura√ß√£o para Creative Writing Agent"""
        return SpecializedAgentTemplate(
            name="creative_writing_agent",
            description="Agente especializado em escrita criativa e conte√∫do narrativo",
            use_cases=[
                "Cria√ß√£o de conte√∫do narrativo",
                "Desenvolvimento de personagens",
                "Escrita de roteiros e hist√≥rias",
                "Copywriting criativo"
            ],
            agent_config=AgentConfig(
                name="creative_writing",
                model="gpt-4o",
                temperature=0.8,  # Alta criatividade
                max_tokens=8000,  # Textos longos e criativos
                enable_memory=True,
                memory_type="buffer",  # Mem√≥ria detalhada para continuidade narrativa
                enable_cache=False,  # Evitar repeti√ß√£o criativa
                enable_streaming=True,
                max_retries=2
            ),
            advanced_config=AdvancedFeatureConfig(
                enable_lcel_chains=True,
                enable_vector_store=True,
                enable_streaming=True,
                enable_advanced_prompts=True,
                enable_rag=False,  # Foco na criatividade original
                enable_custom_tools=True,
                embedding_model="text-embedding-3-small",
                chunk_size=1500,
                chunk_overlap=300,
                retriever_k=5
            ),
            custom_prompts={
                "system": """Voc√™ √© um escritor criativo especializado em narrativas envolventes.
                Sua escrita deve ser:
                - Imaginativa e original
                - Emocionalmente envolvente
                - Bem estruturada narrativamente
                - Rica em detalhes sensoriais
                - Adequada ao p√∫blico-alvo""",
                
                "story_development": """Desenvolva uma hist√≥ria baseada em: {prompt}
                
                ELEMENTOS A INCLUIR:
                - Personagens bem desenvolvidos
                - Conflito central interessante
                - Ambienta√ß√£o rica
                - Di√°logos naturais
                - Arco narrativo satisfat√≥rio
                
                ESTILO: {style}
                P√öBLICO: {audience}
                
                HIST√ìRIA:""",
                
                "character_development": """Crie um personagem detalhado baseado em: {description}
                
                DESENVOLVA:
                - Apar√™ncia f√≠sica
                - Personalidade e motiva√ß√µes
                - Hist√≥ria pessoal
                - Conflitos internos
                - Relacionamentos
                - Arco de desenvolvimento
                
                PERSONAGEM:"""
            },
            recommended_tools=[
                "story_structure_analyzer",
                "character_consistency_checker",
                "style_advisor",
                "plot_generator"
            ],
            performance_profile={
                "creativity_priority": "very_high",
                "originality": "very_high",
                "emotional_impact": "high",
                "accuracy_priority": "medium",
                "speed_priority": "medium"
            }
        )
    
    @staticmethod
    def get_technical_documentation_config() -> SpecializedAgentTemplate:
        """Configura√ß√£o para Technical Documentation Agent"""
        return SpecializedAgentTemplate(
            name="technical_documentation_agent",
            description="Agente especializado em documenta√ß√£o t√©cnica e manuais",
            use_cases=[
                "Cria√ß√£o de documenta√ß√£o de APIs",
                "Manuais de usu√°rio t√©cnicos",
                "Guias de instala√ß√£o e configura√ß√£o",
                "Documenta√ß√£o de c√≥digo"
            ],
            agent_config=AgentConfig(
                name="technical_docs",
                model="gpt-4o",
                temperature=0.2,  # Baixa criatividade, alta precis√£o t√©cnica
                max_tokens=5000,
                enable_memory=True,
                memory_type="summary",
                enable_cache=True,
                cache_ttl=10800,  # Cache de 3 horas
                enable_streaming=True,
                max_retries=3
            ),
            advanced_config=AdvancedFeatureConfig(
                enable_lcel_chains=True,
                enable_vector_store=True,
                enable_streaming=True,
                enable_advanced_prompts=True,
                enable_rag=True,
                enable_custom_tools=True,
                embedding_model="text-embedding-3-large",
                chunk_size=1000,
                chunk_overlap=150,
                retriever_k=8
            ),
            custom_prompts={
                "system": """Voc√™ √© um especialista em documenta√ß√£o t√©cnica.
                Sua documenta√ß√£o deve ser:
                - Clara e concisa
                - Estruturada logicamente
                - Incluir exemplos pr√°ticos
                - Considerar diferentes n√≠veis de expertise
                - Seguir padr√µes de documenta√ß√£o""",
                
                "api_documentation": """Documente a seguinte API: {api_spec}
                
                ESTRUTURA:
                1. Vis√£o geral e prop√≥sito
                2. Autentica√ß√£o e autoriza√ß√£o
                3. Endpoints dispon√≠veis
                4. Par√¢metros e formato de dados
                5. Exemplos de requisi√ß√µes/respostas
                6. C√≥digos de erro
                7. Limita√ß√µes e considera√ß√µes
                
                DOCUMENTA√á√ÉO:""",
                
                "user_manual": """Crie um manual de usu√°rio para: {product}
                
                P√öBLICO-ALVO: {audience_level}
                
                INCLUIR:
                - Pr√©-requisitos e instala√ß√£o
                - Primeiros passos
                - Funcionalidades principais
                - Solu√ß√£o de problemas comuns
                - Refer√™ncia r√°pida
                
                MANUAL:"""
            },
            recommended_tools=[
                "code_analyzer",
                "documentation_formatter",
                "example_generator",
                "accessibility_checker"
            ],
            performance_profile={
                "clarity_priority": "very_high",
                "accuracy_priority": "very_high",
                "completeness": "high",
                "usability": "very_high",
                "maintainability": "high"
            }
        )
    
    @staticmethod
    def get_code_analysis_config() -> SpecializedAgentTemplate:
        """Configura√ß√£o para Code Analysis Agent"""
        return SpecializedAgentTemplate(
            name="code_analysis_agent",
            description="Agente especializado em an√°lise e revis√£o de c√≥digo",
            use_cases=[
                "Code review automatizado",
                "Detec√ß√£o de bugs e vulnerabilidades",
                "Sugest√µes de otimiza√ß√£o",
                "An√°lise de arquitetura de software"
            ],
            agent_config=AgentConfig(
                name="code_analysis",
                model="gpt-4o",
                temperature=0.1,  # Muito baixa para an√°lise t√©cnica precisa
                max_tokens=4000,
                enable_memory=True,
                memory_type="summary",
                enable_cache=True,
                cache_ttl=3600,
                enable_streaming=False,  # An√°lise completa antes de resposta
                max_retries=3
            ),
            advanced_config=AdvancedFeatureConfig(
                enable_lcel_chains=True,
                enable_vector_store=True,
                enable_streaming=False,
                enable_advanced_prompts=True,
                enable_rag=True,
                enable_custom_tools=True,
                embedding_model="text-embedding-3-large",
                chunk_size=800,  # Chunks menores para an√°lise precisa
                chunk_overlap=100,
                retriever_k=12
            ),
            custom_prompts={
                "system": """Voc√™ √© um especialista em an√°lise de c√≥digo e arquitetura de software.
                Suas an√°lises devem ser:
                - Tecnicamente precisas
                - Focadas em boas pr√°ticas
                - Incluir sugest√µes de melhoria
                - Considerar performance e seguran√ßa
                - Seguir padr√µes da ind√∫stria""",
                
                "code_review": """Realize uma revis√£o completa do c√≥digo: {code}
                
                LINGUAGEM: {language}
                CONTEXTO: {context}
                
                ANALISE:
                1. Qualidade do c√≥digo
                2. Poss√≠veis bugs ou vulnerabilidades
                3. Performance e otimiza√ß√µes
                4. Ader√™ncia a padr√µes
                5. Manutenibilidade
                6. Testes necess√°rios
                
                REVIS√ÉO:""",
                
                "architecture_analysis": """Analise a arquitetura do sistema: {architecture}
                
                CONSIDERE:
                - Padr√µes arquiteturais utilizados
                - Acoplamento e coes√£o
                - Escalabilidade
                - Pontos de falha
                - Sugest√µes de melhoria
                
                AN√ÅLISE ARQUITETURAL:"""
            },
            recommended_tools=[
                "static_code_analyzer",
                "vulnerability_scanner",
                "performance_profiler",
                "pattern_detector"
            ],
            performance_profile={
                "technical_accuracy": "very_high",
                "security_focus": "very_high", 
                "performance_analysis": "high",
                "best_practices": "very_high",
                "speed_priority": "medium"
            }
        )
    
    @staticmethod
    def get_all_specialized_configs() -> Dict[str, SpecializedAgentTemplate]:
        """Obter todas as configura√ß√µes especializadas"""
        return {
            "enterprise_rag": SpecializedAgentConfigs.get_enterprise_rag_config(),
            "research_analysis": SpecializedAgentConfigs.get_research_analysis_config(),
            "creative_writing": SpecializedAgentConfigs.get_creative_writing_config(),
            "technical_docs": SpecializedAgentConfigs.get_technical_documentation_config(),
            "code_analysis": SpecializedAgentConfigs.get_code_analysis_config()
        }
    
    @staticmethod
    def save_configs_to_file(filepath: str = "specialized_agent_configs.json"):
        """Salvar configura√ß√µes em arquivo JSON"""
        configs = SpecializedAgentConfigs.get_all_specialized_configs()
        
        # Converter para formato serializ√°vel
        serializable_configs = {}
        for name, template in configs.items():
            serializable_configs[name] = {
                "name": template.name,
                "description": template.description,
                "use_cases": template.use_cases,
                "agent_config": asdict(template.agent_config),
                "advanced_config": asdict(template.advanced_config),
                "custom_prompts": template.custom_prompts,
                "recommended_tools": template.recommended_tools,
                "performance_profile": template.performance_profile
            }
        
        with open(filepath, 'w', encoding='utf-8') as f:
            json.dump(serializable_configs, f, indent=2, ensure_ascii=False)
        
        print(f"‚úÖ Configura√ß√µes salvas em {filepath}")
    
    @staticmethod
    def load_config_from_file(config_name: str, filepath: str = "specialized_agent_configs.json") -> Optional[SpecializedAgentTemplate]:
        """Carregar configura√ß√£o espec√≠fica do arquivo"""
        try:
            with open(filepath, 'r', encoding='utf-8') as f:
                configs = json.load(f)
            
            if config_name not in configs:
                return None
            
            config_data = configs[config_name]
            
            return SpecializedAgentTemplate(
                name=config_data["name"],
                description=config_data["description"],
                use_cases=config_data["use_cases"],
                agent_config=AgentConfig(**config_data["agent_config"]),
                advanced_config=AdvancedFeatureConfig(**config_data["advanced_config"]),
                custom_prompts=config_data["custom_prompts"],
                recommended_tools=config_data["recommended_tools"],
                performance_profile=config_data["performance_profile"]
            )
            
        except FileNotFoundError:
            print(f"‚ùå Arquivo {filepath} n√£o encontrado")
            return None
        except Exception as e:
            print(f"‚ùå Erro ao carregar configura√ß√£o: {e}")
            return None

class SpecializedAgentFactory:
    """Factory para criar agentes especializados"""
    
    @staticmethod
    def create_specialized_agent(config_name: str) -> Optional[AdvancedLangChainAgent]:
        """Criar agente especializado por nome"""
        configs = SpecializedAgentConfigs.get_all_specialized_configs()
        
        if config_name not in configs:
            print(f"‚ùå Configura√ß√£o '{config_name}' n√£o encontrada")
            print(f"Configura√ß√µes dispon√≠veis: {list(configs.keys())}")
            return None
        
        template = configs[config_name]
        
        # Criar agente com configura√ß√µes especializadas
        agent = AdvancedLangChainAgent(
            config=template.agent_config,
            advanced_config=template.advanced_config
        )
        
        # Adicionar prompts customizados (implementa√ß√£o futura)
        agent.custom_prompts = template.custom_prompts
        
        print(f"‚úÖ Agente especializado '{config_name}' criado com sucesso")
        print(f"üìù Descri√ß√£o: {template.description}")
        print(f"üéØ Casos de uso: {', '.join(template.use_cases[:2])}...")
        
        return agent
    
    @staticmethod
    def list_available_configs():
        """Listar configura√ß√µes dispon√≠veis"""
        configs = SpecializedAgentConfigs.get_all_specialized_configs()
        
        print("ü§ñ AGENTES ESPECIALIZADOS DISPON√çVEIS")
        print("=" * 50)
        
        for name, template in configs.items():
            print(f"\nüîπ {name.upper()}")
            print(f"   üìù {template.description}")
            print(f"   üéØ Casos de uso:")
            for use_case in template.use_cases[:3]:
                print(f"      ‚Ä¢ {use_case}")
            if len(template.use_cases) > 3:
                print(f"      ‚Ä¢ ... e mais {len(template.use_cases) - 3}")
            print(f"   ‚ö° Performance: {template.performance_profile}")
    
    @staticmethod
    def compare_agents(agent_names: List[str]):
        """Comparar diferentes agentes especializados"""
        configs = SpecializedAgentConfigs.get_all_specialized_configs()
        
        print("üìä COMPARA√á√ÉO DE AGENTES ESPECIALIZADOS")
        print("=" * 60)
        
        comparison_data = []
        for name in agent_names:
            if name in configs:
                template = configs[name]
                comparison_data.append({
                    "name": name,
                    "model": template.agent_config.model,
                    "temperature": template.agent_config.temperature,
                    "max_tokens": template.agent_config.max_tokens,
                    "cache_enabled": template.agent_config.enable_cache,
                    "streaming": template.advanced_config.enable_streaming,
                    "rag_enabled": template.advanced_config.enable_rag,
                    "embedding_model": template.advanced_config.embedding_model
                })
        
        # Exibir compara√ß√£o em formato tabular
        if comparison_data:
            print(f"{'Agent':<20} {'Model':<12} {'Temp':<6} {'Tokens':<8} {'Cache':<7} {'Stream':<8} {'RAG':<5} {'Embedding'}")
            print("-" * 90)
            for data in comparison_data:
                print(f"{data['name']:<20} {data['model']:<12} {data['temperature']:<6.1f} {data['max_tokens']:<8} "
                      f"{'‚úì' if data['cache_enabled'] else '‚úó':<7} {'‚úì' if data['streaming'] else '‚úó':<8} "
                      f"{'‚úì' if data['rag_enabled'] else '‚úó':<5} {data['embedding_model']}")

# Exemplo de uso
if __name__ == "__main__":
    # Salvar todas as configura√ß√µes
    SpecializedAgentConfigs.save_configs_to_file()
    
    # Listar agentes dispon√≠veis
    SpecializedAgentFactory.list_available_configs()
    
    # Comparar alguns agentes
    print("\n")
    SpecializedAgentFactory.compare_agents([
        "enterprise_rag", 
        "research_analysis", 
        "creative_writing"
    ])
    
    # Criar um agente especializado
    print("\n")
    rag_agent = SpecializedAgentFactory.create_specialized_agent("enterprise_rag") 