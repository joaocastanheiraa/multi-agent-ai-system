#!/bin/bash

# üõí MCP MARKETPLACE - Script de Lan√ßamento
# Configura automaticamente e inicia o marketplace de ferramentas MCP

echo "üõí MCP MARKETPLACE - Sistema Inteligente de Ferramentas"
echo "=================================================="
echo ""

# Verificar se estamos no diret√≥rio correto
if [ ! -d "domains" ]; then
    echo "‚ùå Execute este script da raiz do projeto multi-agent-ai-system"
    exit 1
fi

# Fun√ß√£o para verificar depend√™ncias
check_dependencies() {
    echo "üîç Verificando depend√™ncias..."
    
    # Python
    if ! command -v python3 &> /dev/null; then
        echo "‚ùå Python3 n√£o encontrado"
        exit 1
    fi
    
    # Streamlit
    if ! python3 -c "import streamlit" 2>/dev/null; then
        echo "üì¶ Instalando streamlit..."
        pip install streamlit
    fi
    
    # Pandas
    if ! python3 -c "import pandas" 2>/dev/null; then
        echo "üì¶ Instalando pandas..."
        pip install pandas
    fi
    
    echo "‚úÖ Depend√™ncias verificadas"
}

# Fun√ß√£o para executar setup inicial
run_initial_setup() {
    echo ""
    echo "üöÄ Executando setup inicial do MCP Marketplace..."
    
    # Criar diret√≥rios necess√°rios
    mkdir -p config examples/mcp_integration docs scripts
    
    # Executar setup autom√°tico
    if [ -f "scripts/setup_mcp_marketplace.py" ]; then
        echo "‚ö° Configurando agentes automaticamente..."
        python3 scripts/setup_mcp_marketplace.py
    else
        echo "‚ö†Ô∏è  Script de setup n√£o encontrado, continuando..."
    fi
}

# Fun√ß√£o para mostrar status
show_status() {
    echo ""
    echo "üìä STATUS DO SISTEMA:"
    echo "===================="
    
    # Contar agentes descobertos
    if [ -d "domains" ]; then
        agent_count=$(find domains -name "agent_manifest.json" | wc -l)
        echo "ü§ñ Agentes descobertos: $agent_count"
    fi
    
    # Verificar se marketplace foi configurado
    if [ -f "config/mcp_marketplace_config.json" ]; then
        echo "‚úÖ Marketplace configurado"
    else
        echo "‚ö†Ô∏è  Marketplace n√£o configurado ainda"
    fi
    
    # Verificar exemplos
    if [ -d "examples/mcp_integration" ]; then
        example_count=$(ls examples/mcp_integration/*.py 2>/dev/null | wc -l)
        echo "üìã Exemplos criados: $example_count"
    fi
}

# Fun√ß√£o para mostrar menu principal
show_menu() {
    echo ""
    echo "üéØ OP√á√ïES DISPON√çVEIS:"
    echo "====================="
    echo "1. üåê Abrir Interface Visual (Streamlit)"
    echo "2. üîß Executar Setup Autom√°tico"
    echo "3. üß† Testar NeuroHook Ultra com MCP"
    echo "4. üìã Ver Exemplos de Integra√ß√£o"
    echo "5. üìä Mostrar Status do Sistema"
    echo "6. üõ†Ô∏è Instalar Servidores MCP"
    echo "7. üìñ Ver Documenta√ß√£o"
    echo "8. üß™ Testar Imports e Depend√™ncias"
    echo "9. ‚ùå Sair"
    echo ""
}

# Fun√ß√£o para abrir interface Streamlit
launch_streamlit_ui() {
    echo "üåê Abrindo interface visual do MCP Marketplace..."
    echo "üì± Acesse: http://localhost:8501"
    echo ""
    echo "üí° Para parar, pressione Ctrl+C"
    echo ""
    
    # Verificar se arquivo existe
    if [ -f "run_mcp_ui.py" ]; then
        python3 run_mcp_ui.py
    elif [ -f "config/mcp_marketplace_ui.py" ]; then
        # Fallback para streamlit direto
        streamlit run config/mcp_marketplace_ui.py
    else
        echo "‚ùå Interface UI n√£o encontrada"
        echo "üí° Execute a op√ß√£o 2 primeiro para criar os arquivos"
    fi
}

# Fun√ß√£o para testar NeuroHook
test_neurohook() {
    echo "üß† Testando NeuroHook Ultra com MCP..."
    
    if [ -f "examples/mcp_integration/neurohook_ultra_mcp_controller.py" ]; then
        python3 examples/mcp_integration/neurohook_ultra_mcp_controller.py
    else
        echo "‚ùå Exemplo do NeuroHook n√£o encontrado"
        echo "üí° Execute a op√ß√£o 2 primeiro"
    fi
}

# Fun√ß√£o para mostrar exemplos
show_examples() {
    echo "üìã EXEMPLOS DE INTEGRA√á√ÉO MCP:"
    echo "=============================="
    
    if [ -d "examples/mcp_integration" ]; then
        echo "üìÇ Localiza√ß√£o: examples/mcp_integration/"
        echo ""
        echo "üìÑ Arquivos dispon√≠veis:"
        ls -la examples/mcp_integration/*.py 2>/dev/null | while read line; do
            filename=$(echo $line | awk '{print $NF}')
            echo "  üìÑ $filename"
        done
        
        echo ""
        echo "üöÄ Para executar um exemplo:"
        echo "cd examples/mcp_integration"
        echo "python3 <nome_do_arquivo.py>"
    else
        echo "‚ùå Nenhum exemplo encontrado"
        echo "üí° Execute a op√ß√£o 2 primeiro"
    fi
}

# Fun√ß√£o para instalar servidores MCP
install_mcp_servers() {
    echo "üõ†Ô∏è INSTALA√á√ÉO DE SERVIDORES MCP:"
    echo "==============================="
    
    if [ -f "scripts/install_mcp_servers.sh" ]; then
        echo "üì¶ Executando script de instala√ß√£o..."
        chmod +x scripts/install_mcp_servers.sh
        ./scripts/install_mcp_servers.sh
    else
        echo "‚ùå Script de instala√ß√£o n√£o encontrado"
        echo "üí° Execute a op√ß√£o 2 primeiro para gerar o script"
    fi
}

# Fun√ß√£o para testar imports
test_imports() {
    echo "üß™ TESTANDO IMPORTS E DEPEND√äNCIAS:"
    echo "=================================="
    
    if [ -f "test_mcp_imports.py" ]; then
        python3 test_mcp_imports.py
        
        echo ""
        echo "üí° DICAS PARA RESOLVER PROBLEMAS:"
        echo "  ‚Ä¢ AutoGen MCP: pip install -U 'autogen-ext[mcp]'"
        echo "  ‚Ä¢ AutoGen Core: pip install -U 'autogen-agentchat'"
        echo "  ‚Ä¢ Streamlit: pip install streamlit"
        echo "  ‚Ä¢ Pandas: pip install pandas"
    else
        echo "‚ùå Arquivo de teste n√£o encontrado"
        echo "üí° Execute a op√ß√£o 2 primeiro"
    fi
}

# Fun√ß√£o para mostrar documenta√ß√£o
show_documentation() {
    echo "üìñ DOCUMENTA√á√ÉO MCP MARKETPLACE:"
    echo "================================"
    
    echo "üìö Documentos dispon√≠veis:"
    
    if [ -f "docs/MCP_MARKETPLACE_SETUP_REPORT.md" ]; then
        echo "  üìÑ docs/MCP_MARKETPLACE_SETUP_REPORT.md - Relat√≥rio de setup"
    fi
    
    echo ""
    echo "üåê Links √∫teis:"
    echo "  ‚Ä¢ Documenta√ß√£o AutoGen MCP: https://microsoft.github.io/autogen/stable/reference/python/autogen_ext.tools.mcp.html"
    echo "  ‚Ä¢ Artigo Victor Dibia: https://newsletter.victordibia.com/p/how-to-use-mcp-anthropic-mcp-tools"
    echo "  ‚Ä¢ Reposit√≥rio MCP: https://github.com/modelcontextprotocol"
    echo ""
    
    if [ -f "docs/MCP_MARKETPLACE_SETUP_REPORT.md" ]; then
        echo "üìñ Quer ver o relat√≥rio de setup? (s/n)"
        read -r response
        if [[ "$response" =~ ^[Ss] ]]; then
            cat docs/MCP_MARKETPLACE_SETUP_REPORT.md
        fi
    fi
}

# Fun√ß√£o principal
main() {
    # Verificar depend√™ncias
    check_dependencies
    
    # Mostrar status inicial
    show_status
    
    # Loop principal
    while true; do
        show_menu
        echo -n "üî¢ Escolha uma op√ß√£o (1-9): "
        read -r choice
        
        case $choice in
            1)
                launch_streamlit_ui
                ;;
            2)
                run_initial_setup
                ;;
            3)
                test_neurohook
                ;;
            4)
                show_examples
                ;;
            5)
                show_status
                ;;
            6)
                install_mcp_servers
                ;;
            7)
                show_documentation
                ;;
            8)
                test_imports
                ;;
            9)
                echo "üëã At√© logo!"
                exit 0
                ;;
            *)
                echo "‚ùå Op√ß√£o inv√°lida. Tente novamente."
                ;;
        esac
        
        echo ""
        echo "‚è∏Ô∏è  Pressione Enter para continuar..."
        read -r
    done
}

# Verificar se script est√° sendo executado diretamente
if [[ "${BASH_SOURCE[0]}" == "${0}" ]]; then
    main "$@"
fi 