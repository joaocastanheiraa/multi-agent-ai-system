# `Platform_Integration_Strategy.md`




```markdown
---
title: "Estratégia de Integração Multiplataforma"
id: "platform_integration_strategy_001"
doc_type: "technical_strategy"
doc_version: "1.2"
date_created: "2025-04-23"
date_updated: "2025-04-23"
author: "João Castanheira"
db_name: "joaocastanheira_bancodedados"
db_version: "1.0"
doc_status: "Aprovado"
environment: "Produção"
related_docs: [
  "core_db_arch_001", 
  "core_db_design_001", 
  "process_flow_purchase_lifecycle_001",
  "process_flow_subscription_lifecycle_001",
  "domain_platform_integration_details_001",
  "domain_transactions_lifecycle_001",
  "ref_db_schema_details_001",
  "ref_api_mapping_guide_001"
]
tables_in_focus: [
  "transaction_statuses",
  "products",
  "plans",
  "transactions",
  "subscriptions",
  "commission_participants",
  "platform_transaction_payment_history"
]
embedding_guide_concepts: [
  "integração de plataformas",
  "normalização de dados",
  "mapeamento de APIs",
  "extração de dados",
  "transformação de dados",
  "carregamento de dados",
  "ETL",
  "adaptadores de plataforma",
  "unificação de vocabulário",
  "identificação cross-plataforma",
  "pipeline de dados",
  "webhooks",
  "reconciliação de dados",
  "enriquecimento de dados",
  "independência de plataforma",
  "arquitetura de integração",
  "mapeamento de status",
  "mapeamento de entidades",
  "estratégia de migração"
]
---


# Estratégia de Integração Multiplataforma


## Visão Geral


Este documento detalha a estratégia de integração que permite ao banco de dados `joaocastanheira_bancodedados` unificar dados de múltiplas plataformas de venda (como Hotmart, Kiwify e futuras integrações) em um modelo de dados comum e consistente. Esta abordagem é fundamental para o funcionamento da arquitetura agnóstica de plataforma descrita em **[Arquitetura do Banco de Dados Unificado](core_db_arch_001.md)**.


A estratégia aborda os desafios críticos de integração:
- **Disparidade Terminológica**: Diferentes nomenclaturas para os mesmos conceitos
- **Estruturas de Dados Distintas**: Modelos de dados incompatíveis entre plataformas
- **Funcionalidades Variadas**: Diferentes capacidades e limitações de cada plataforma
- **Granularidade de Informações**: Níveis variados de detalhe fornecidos pelas APIs


O resultado é um sistema que permite análises e operações consistentes independentemente da plataforma de origem dos dados, enquanto preserva detalhes específicos quando necessário.


(Ref: Integração Multiplataforma, ID platform_integration_strategy_001)


## Arquitetura da Integração


### Visão Arquitetural


A solução de integração emprega uma arquitetura em camadas que separa claramente as responsabilidades:


```mermaid
graph TD
    A[APIs das Plataformas] -->|Dados Brutos| B[Camada de Extração]
    B -->|Dados Extraídos| C[Camada de Transformação]
    C -->|Dados Normalizados| D[Camada de Carregamento]
    D -->|Inserção/Atualização| E[(Banco de Dados<br>joaocastanheira_bancodedados)]
    
    subgraph "Adaptadores Específicos por Plataforma"
        B1[Adaptador Hotmart]
        B2[Adaptador Kiwify]
        B3[Adaptador Futuro]
    end
    
    A -->|Hotmart API| B1
    A -->|Kiwify API| B2
    A -->|Futura API| B3
    
    B1 --> C
    B2 --> C
    B3 --> C
    
    F[Interface Comum<br>de Mapeamento] --> B1
    F --> B2
    F --> B3
```


Este design destaca o papel central dos adaptadores específicos para cada plataforma, todos implementando uma interface comum de mapeamento, o que garante consistência na transformação dos dados.


### Componentes Principais


#### 1. Camada de Extração


- **Webhooks Receptores**: Endpoints que recebem notificações automáticas das plataformas
- **Polling Programado**: Para dados que não disparam webhooks ou para reconciliação
- **Conectores de API**: Componentes específicos para autenticação e comunicação com cada API


#### 2. Adaptadores Específicos por Plataforma


- **Adaptador Hotmart**: Converte estrutura e terminologia da Hotmart para o modelo unificado
- **Adaptador Kiwify**: Converte estrutura e terminologia da Kiwify para o modelo unificado
- **Adaptadores Futuros**: Seguem o mesmo padrão para novas plataformas


#### 3. Camada de Transformação


- **Mapeamento de Entidades**: Identifica correspondências entre entidades externas e internas
- **Normalização de Vocabulário**: Converte terminologias específicas para o padrão unificado
- **Enriquecimento de Dados**: Adiciona informações derivadas ou contextuais quando necessário


#### 4. Camada de Carregamento


- **Validação de Dados**: Garante que os dados normalizados atendem às regras de negócio
- **Controle de Transações**: Assegura operações atômicas para manter integridade
- **Gestão de Concorrência**: Lida com atualizações simultâneas ou fora de ordem


Esta arquitetura em camadas proporciona:
- **Extensibilidade**: Novos adaptadores podem ser adicionados sem alterar o núcleo do sistema
- **Manutenção Simplificada**: Mudanças em uma API afetam apenas seu adaptador correspondente
- **Testabilidade**: Cada componente pode ser testado isoladamente


Para uma visão detalhada da estrutura do banco de dados que recebe estes dados normalizados, consulte **[Arquitetura do Banco de Dados Unificado](core_db_arch_001.md#diagrama-er-de-alto-nível)**.


(Ref: Integração Multiplataforma, ID platform_integration_strategy_001)


## Processo de Normalização


### Etapas do Processo


O processo de normalização converte dados heterogêneos das APIs em um formato unificado através de etapas bem definidas:


1. **Identificação de Evento**
   - Determinar o tipo de evento (venda, reembolso, assinatura, etc.)
   - Classificar em categoria padrão (independente da nomenclatura original)


2. **Extração de Dados Relevantes**
   - Selecionar campos necessários da payload da API
   - Determinar campos obrigatórios vs. opcionais para o tipo de evento


3. **Mapeamento de Entidades**
   - Mapear entidades da plataforma para entidades do modelo unificado
   - Preservar identificadores originais junto com IDs internos


4. **Normalização de Valores**
   - Converter status, métodos de pagamento e outros valores enumerados
   - Padronizar formatos de data, valores monetários e outros tipos de dados


5. **Validação e Enriquecimento**
   - Validar dados convertidos contra regras de negócio
   - Adicionar dados derivados ou calculados quando necessário


### Exemplo de Fluxo: Processamento de Nova Venda


```mermaid
sequenceDiagram
    participant P as Plataforma (Hotmart/Kiwify)
    participant W as Webhook Receptor
    participant A as Adaptador da Plataforma
    participant N as Normalizador
    participant DB as Banco de Dados
    
    P->>W: Envia notificação de venda
    W->>A: Repassa para adaptador apropriado
    A->>A: Extrai campos relevantes
    A->>N: Envia dados extraídos
    N->>N: Mapeia entidades (cliente, produto, etc.)
    N->>N: Normaliza valores (status, método pgto)
    N->>N: Valida dados convertidos
    N->>DB: Insere cliente (se novo)
    N->>DB: Insere/atualiza produto (se necessário)
    N->>DB: Cria transação
    N->>DB: Registra itens da transação
    N->>DB: Registra comissões (se houver)
    N->>DB: Armazena detalhes específicos da plataforma
```


Este diagrama ilustra como o processamento de uma nova venda percorre todas as etapas, desde a recepção via webhook até a inserção dos dados normalizados no banco de dados.


(Ref: Integração Multiplataforma, ID platform_integration_strategy_001)


## Mapeamento de Vocabulário


### Mapeamento de Status de Transação


Um dos elementos-chave da normalização é o mapeamento de vocabulário, especialmente para status de transações e assinaturas. A tabela abaixo demonstra como diferentes terminologias são convertidas para um conjunto padronizado:


| Status Normalizado | Hotmart             | Kiwify             | Outras Plataformas  |
|--------------------|---------------------|--------------------|--------------------|
| Aprovada           | "APPROVED"          | "paid"             | Mapeado conforme necessário |
| Recusada           | "DECLINED"          | "declined"         | ... |
| Reembolsada        | "REFUNDED"          | "refunded"         | ... |
| Cancelada          | "CANCELED"          | "canceled"         | ... |
| Aguardando         | "PENDING"           | "pending"          | ... |
| Expirada           | "EXPIRED"           | "expired"          | ... |
| Disputa            | "CHARGEBACK"        | "dispute"          | ... |
| Abandonada         | "ABANDONED"         | "abandoned"        | ... |


Este mapeamento é implementado no banco de dados usando a tabela `transaction_statuses`:


```sql
-- Exemplos de dados na tabela transaction_statuses
INSERT INTO transaction_statuses (status) VALUES 
('Aprovada'), ('Recusada'), ('Reembolsada'), ('Cancelada'),
('Aguardando'), ('Expirada'), ('Disputa'), ('Abandonada');


-- Função que obtém o ID do status normalizado
CREATE OR REPLACE FUNCTION get_normalized_status_id(
    platform_name VARCHAR,
    original_status VARCHAR
) RETURNS INTEGER AS $$
DECLARE
    normalized_status VARCHAR;
    status_id INTEGER;
BEGIN
    -- Mapeamento de status por plataforma
    IF platform_name = 'Hotmart' THEN
        CASE original_status
            WHEN 'APPROVED' THEN normalized_status := 'Aprovada'
            WHEN 'DECLINED' THEN normalized_status := 'Recusada'
            WHEN 'REFUNDED' THEN normalized_status := 'Reembolsada'
            -- outros mapeamentos
        END;
    ELSIF platform_name = 'Kiwify' THEN
        CASE original_status
            WHEN 'paid' THEN normalized_status := 'Aprovada'
            WHEN 'declined' THEN normalized_status := 'Recusada'
            WHEN 'refunded' THEN normalized_status := 'Reembolsada'
            -- outros mapeamentos
        END;
    ELSE
        -- Mapeamento para outras plataformas
    END IF;
    
    -- Obtém o ID do status normalizado
    SELECT id INTO status_id FROM transaction_statuses 
    WHERE status = normalized_status;
    
    RETURN status_id;
END;
$$ LANGUAGE plpgsql;
```


### Mapeamento de Métodos de Pagamento


Similar ao mapeamento de status, os métodos de pagamento também são normalizados:


| Método Normalizado  | Hotmart                | Kiwify               | Outras Plataformas |
|---------------------|------------------------|----------------------|--------------------|
| credit_card         | "CREDIT_CARD"          | "credit_card"        | ... |
| boleto              | "BANK_SLIP"            | "boleto"             | ... |
| pix                 | "PIX"                  | "pix"                | ... |
| paypal              | "PAYPAL"               | "paypal"             | ... |
| bank_transfer       | "BANK_TRANSFER"        | "bank_transfer"      | ... |
| digital_wallet      | "DIGITAL_WALLET"       | "digital_wallet"     | ... |


Para implementar este mapeamento, utilizamos o tipo ENUM `payment_method_enum` definido no banco de dados:


```sql
-- Função que converte método de pagamento original para o ENUM padronizado
CREATE OR REPLACE FUNCTION normalize_payment_method(
    platform_name VARCHAR,
    original_method VARCHAR
) RETURNS payment_method_enum AS $$
DECLARE
    normalized_method payment_method_enum;
BEGIN
    -- Mapeamento por plataforma
    IF platform_name = 'Hotmart' THEN
        CASE original_method
            WHEN 'CREDIT_CARD' THEN normalized_method := 'credit_card'::payment_method_enum
            WHEN 'BANK_SLIP' THEN normalized_method := 'boleto'::payment_method_enum
            WHEN 'PIX' THEN normalized_method := 'pix'::payment_method_enum
            -- outros mapeamentos
        END;
    ELSIF platform_name = 'Kiwify' THEN
        CASE original_method
            WHEN 'credit_card' THEN normalized_method := 'credit_card'::payment_method_enum
            WHEN 'boleto' THEN normalized_method := 'boleto'::payment_method_enum
            WHEN 'pix' THEN normalized_method := 'pix'::payment_method_enum
            -- outros mapeamentos
        END;
    ELSE
        -- Mapeamento para outras plataformas
    END IF;
    
    RETURN normalized_method;
END;
$$ LANGUAGE plpgsql;
```


Estes mapeamentos garantem que, independentemente da plataforma de origem, as consultas e análises possam ser realizadas de forma unificada usando terminologia consistente.


Para uma referência completa de todos os mapeamentos entre plataformas, consulte o documento **[Guia de Mapeamento de APIs](ref_api_mapping_guide_001.md)**.


(Ref: Integração Multiplataforma, ID platform_integration_strategy_001)


## Identificação e Reconciliação de Entidades


### Estratégia de Identificação


Para unificar dados de diferentes plataformas, precisamos de uma estratégia eficaz para identificar e reconciliar as mesmas entidades entre sistemas:


#### 1. Clientes


**Identificador primário**: Endereço de email (normalizado para lowercase)


**Implementação**:
```sql
-- Exemplo de reconciliação de cliente por email
INSERT INTO customers (email, name, customer_id, document_type)
VALUES (LOWER('cliente@exemplo.com'), 'Nome do Cliente', '12345', 'CPF')
ON CONFLICT (email) 
DO UPDATE SET 
    name = COALESCE(EXCLUDED.name, customers.name),
    customer_id = COALESCE(EXCLUDED.customer_id, customers.customer_id),
    document_type = COALESCE(EXCLUDED.document_type, customers.document_type),
    updated_at = CURRENT_TIMESTAMP;
```


#### 2. Produtos e Planos


**Identificador composto**: `product_id` + `platform_origin` / `plan_id` + `platform_origin`


**Implementação**:
```sql
-- Exemplo de reconciliação de produto
INSERT INTO products (product_id, platform_origin, name, description)
VALUES ('PROD123', 'Hotmart', 'Curso de Marketing', 'Descrição do curso')
ON CONFLICT (product_id, platform_origin) 
DO UPDATE SET 
    name = COALESCE(EXCLUDED.name, products.name),
    description = COALESCE(EXCLUDED.description, products.description),
    updated_at = CURRENT_TIMESTAMP;
```


#### 3. Transações


**Identificador composto**: `transaction_id` + `payment_gateway`


**Implementação**:
```sql
-- Exemplo de reconciliação de transação
INSERT INTO transactions (transaction_id, payment_gateway, /* outros campos */)
VALUES ('TRX789', 'Hotmart', /* outros valores */)
ON CONFLICT (transaction_id, payment_gateway) 
DO UPDATE SET 
    status_id = EXCLUDED.status_id,
    customer_paid_amount = EXCLUDED.customer_paid_amount,
    -- Outros campos que podem ser atualizados
    updated_at = CURRENT_TIMESTAMP;
```


### Resolução de Conflitos


Quando informações conflitantes são recebidas, aplicamos as seguintes regras:


1. **Dados de Identificação**: Prevalece a informação mais completa ou recente
2. **Status**: Sempre atualizado para refletir o estado mais recente
3. **Valores Monetários**: Atualizados apenas em caso de correção ou ajuste oficial
4. **Dados Históricos**: Nunca substituídos, apenas complementados


Para mudanças significativas, registramos o histórico de alterações nas tabelas dedicadas, como `transaction_status_history` e `customer_logs`.


(Ref: Integração Multiplataforma, ID platform_integration_strategy_001)


## Implementação por Plataforma


### Hotmart


#### Fontes de Dados
- Webhooks (`purchases`, `subscriptions`, `commissions`)
- API REST para reconciliação e enriquecimento de dados


#### Desafios Específicos
- Estrutura de resposta complexa com muitos níveis aninhados
- Diferentes formatos para assinaturas e compras únicas
- Dados de comissão separados da transação principal


#### Exemplo de Transformação


**Dados de entrada (fragmento simplificado)**:
```json
{
  "data": {
    "purchase": {
      "approved_date": "2023-01-15T10:30:45Z",
      "status": "APPROVED",
      "transaction": "HOT12345",
      "price": {
        "value": 297.00
      },
      "payment": {
        "method": "CREDIT_CARD",
        "installments_number": 3
      },
      "commissions": [
        {
          "value": 148.50,
          "user": {
            "ucode": "PR12345",
            "name": "Produtor Exemplo"
          }
        }
      ]
    },
    "buyer": {
      "email": "comprador@exemplo.com",
      "name": "Nome do Comprador"
    },
    "product": {
      "id": "123456",
      "name": "Curso Exemplo"
    }
  }
}
```


**Processo de transformação**:
1. Extrair dados do cliente de `data.buyer`
2. Extrair dados do produto de `data.product`
3. Extrair dados da transação de `data.purchase`
4. Normalizar status "APPROVED" para "Aprovada"
5. Normalizar método de pagamento "CREDIT_CARD" para "credit_card"
6. Processar comissões de `data.purchase.commissions`


**Exemplo de código do adaptador**:
```python
def transform_hotmart_purchase(webhook_data):
    data = webhook_data.get('data', {})
    purchase = data.get('purchase', {})
    buyer = data.get('buyer', {})
    product_data = data.get('product', {})
    
    # Normalizar cliente
    customer = {
        'email': buyer.get('email', '').lower(),
        'name': buyer.get('name'),
        'customer_id': buyer.get('code'),
        'platform_origin': 'Hotmart'
    }
    
    # Normalizar produto
    product = {
        'product_id': product_data.get('id'),
        'name': product_data.get('name'),
        'platform_origin': 'Hotmart'
    }
    
    # Normalizar transação
    transaction = {
        'transaction_id': purchase.get('transaction'),
        'payment_gateway': 'Hotmart',
        'order_date': purchase.get('approved_date'),
        'status': normalize_status('Hotmart', purchase.get('status')),
        'payment_method': normalize_payment_method('Hotmart', 
                           purchase.get('payment', {}).get('method')),
        'installments_number': purchase.get('payment', {}).get('installments_number', 1),
        'offer_price': purchase.get('price', {}).get('value', 0),
        # Outros campos normalizados
    }
    
    # Normalizar comissões
    commissions = []
    for comm in purchase.get('commissions', []):
        commission = {
            'participant_id': comm.get('user', {}).get('ucode'),
            'amount': comm.get('value'),
            'currency_code': 'BRL',  # Normalizado para a moeda padrão
            'source': 'PRODUCER' if comm.get('user', {}).get('producer', False) else 'AFFILIATE'
        }
        commissions.append(commission)
    
    return {
        'customer': customer,
        'product': product,
        'transaction': transaction,
        'commissions': commissions
    }
```


### Kiwify


#### Fontes de Dados
- Webhooks (`checkouts`, `subscriptions`, `charges`)
- API GraphQL para consultas complementares


#### Desafios Específicos
- Estrutura mais plana, mas com menos detalhes em alguns aspectos
- Tratamento diferente para assinaturas e suas cobranças recorrentes
- Necessidade de consultas adicionais para certos detalhes


#### Exemplo de Transformação


**Dados de entrada (fragmento simplificado)**:
```json
{
  "id": "chk_1234567890",
  "status": "paid",
  "amount": 29700,
  "payment": {
    "method": "credit_card",
    "installments": 3
  },
  "customer": {
    "email": "comprador@exemplo.com",
    "name": "Nome do Comprador"
  },
  "product": {
    "id": "prod_abcdef",
    "name": "Curso Exemplo"
  },
  "affiliate": {
    "id": "aff_123456",
    "name": "Afiliado Exemplo",
    "commission": 14850
  }
}
```


**Processo de transformação**:
1. Extrair dados do cliente de `customer`
2. Extrair dados do produto de `product`
3. Extrair dados da transação da raiz do objeto
4. Normalizar status "paid" para "Aprovada"
5. Normalizar método de pagamento "credit_card" (já normalizado)
6. Processar comissão de afiliado de `affiliate`


**Exemplo de código do adaptador**:
```python
def transform_kiwify_checkout(webhook_data):
    # Normalizar cliente
    customer = {
        'email': webhook_data.get('customer', {}).get('email', '').lower(),
        'name': webhook_data.get('customer', {}).get('name'),
        'customer_id': webhook_data.get('customer', {}).get('id'),
        'platform_origin': 'Kiwify'
    }
    
    # Normalizar produto
    product = {
        'product_id': webhook_data.get('product', {}).get('id'),
        'name': webhook_data.get('product', {}).get('name'),
        'platform_origin': 'Kiwify'
    }
    
    # Normalizar transação
    transaction = {
        'transaction_id': webhook_data.get('id'),
        'payment_gateway': 'Kiwify',
        'order_date': webhook_data.get('created_at'),
        'status': normalize_status('Kiwify', webhook_data.get('status')),
        'payment_method': normalize_payment_method('Kiwify', 
                           webhook_data.get('payment', {}).get('method')),
        'installments_number': webhook_data.get('payment', {}).get('installments', 1),
        'offer_price': webhook_data.get('amount') / 100,  # Convertendo de centavos
        # Outros campos normalizados
    }
    
    # Normalizar comissões
    commissions = []
    if webhook_data.get('affiliate'):
        commission = {
            'participant_id': webhook_data.get('affiliate', {}).get('id'),
            'amount': webhook_data.get('affiliate', {}).get('commission') / 100,  # Convertendo de centavos
            'currency_code': 'BRL',  # Normalizado para a moeda padrão
            'source': 'AFFILIATE'
        }
        commissions.append(commission)
    
    return {
        'customer': customer,
        'product': product,
        'transaction': transaction,
        'commissions': commissions
    }
```


### Extensão para Novas Plataformas


Para adicionar uma nova plataforma ao sistema, seguimos este processo:


1. **Análise da API**: Documentar endpoints, formatos de dados e webhooks disponíveis
2. **Definição de Mapeamento**: Criar mapeamento entre terminologia da plataforma e modelo unificado
3. **Implementação de Adaptador**: Desenvolver adaptador específico seguindo o padrão estabelecido
4. **Testes de Integração**: Validar transformação e carregamento com dados reais
5. **Documentação**: Atualizar guias de mapeamento e referências


Os adaptadores para novas plataformas implementam a mesma interface que os existentes, garantindo consistência no processamento.


(Ref: Integração Multiplataforma, ID platform_integration_strategy_001)


## Garantia de Qualidade e Validação


### Validações Implementadas


Para garantir a integridade dos dados durante o processo de integração, implementamos múltiplas camadas de validação:


#### 1. Validações de Entrada


- **Formato**: Verificação da estrutura e tipos de dados recebidos
- **Completude**: Confirmação da presença de todos os campos obrigatórios
- **Consistência**: Verificação de relações lógicas entre valores (ex: datas de início/fim)


#### 2. Validações de Transformação


- **Mapeamento Completo**: Garantia que todos os valores enumerados têm mapeamento
- **Preservação de Dados**: Confirmação que nenhuma informação essencial é perdida
- **Consistência Numérica**: Validação de valores monetários e cálculos derivados


#### 3. Validações de Carregamento


- **Integridade Referencial**: Verificação da existência de registros relacionados
- **Unicidade**: Prevenção de duplicação de entidades
- **Conformidade com Regras**: Validação de regras de negócio específicas


### Métricas de Qualidade


Monitoramos continuamente estas métricas chave:


| Métrica | Alvo | Monitoramento |
|---------|------|---------------|
| Taxa de Sucesso de Integração | >99.5% | Webhooks processados com sucesso vs. falhas |
| Tempo de Processamento | <2 segundos | Duração média da integração end-to-end |
| Precisão do Mapeamento | 100% | Verificações amostrais de valores mapeados |
| Completude de Dados | >99% | Campos não-nulos vs. total de campos esperados |


### Tratamento de Exceções


Para garantir resiliência, implementamos estas estratégias de tratamento de exceções:


1. **Fila de Reprocessamento**: Webhooks com falha são enviados para uma fila de reprocessamento
2. **Tentativas Graduais**: Implementação de backoff exponencial para novas tentativas
3. **Alertas Operacionais**: Notificação da equipe para erros recorrentes ou críticos
4. **Logs Detalhados**: Registro completo de dados e erros para depuração


Para situações onde a reconciliação automática é impossível, criamos ferramentas administrativas que permitem intervenção manual controlada.


(Ref: Integração Multiplataforma, ID platform_integration_strategy_001)


## Desafios e Soluções


### Principais Desafios


| Desafio | Solução Implementada |
|---------|---------------------|
| **Vocabulários Divergentes** | Tabelas de mapeamento centralizado e funções de normalização |
| **Estruturas de Dados Diferentes** | Adaptadores específicos por plataforma com saída padronizada |
| **Diferenças na Granularidade** | Modelo flexível que suporta vários níveis de detalhe |
| **Mudanças em APIs** | Versionamento de adaptadores e testes automáticos |
| **Eventos Fora de Ordem** | Lógica de resolução baseada em carimbos de data/hora |
| **Volume de Dados Variável** | Sistema escalável com processamento assíncrono |
| **Reconciliação entre Sistemas** | Processos periódicos de validação cruzada |


### Casos Especiais


#### Diferenças no Modelo de Assinatura


**Desafio**: Hotmart e Kiwify têm modelos diferentes para gerenciar assinaturas recorrentes.


**Solução**: Criamos um modelo abstrato que captura os aspectos essenciais de ambos:
- Status unificado da assinatura
- Mapeamento de ciclos de cobrança para um formato comum
- Histórico de status independente da plataforma


Exemplo:
```sql
-- Inserção normalizada de uma assinatura
INSERT INTO subscriptions (
    subscription_id, payment_gateway, customer_id, plan_id,
    billing_cycle, start_date, next_billing_date, status_id
)
VALUES (
    'SUB12345', 'Hotmart', 
    (SELECT id FROM customers WHERE email = 'cliente@exemplo.com'),
    (SELECT id FROM plans WHERE plan_id = 'PLAN123' AND platform_origin = 'Hotmart'),
    'MONTHLY', '2023-01-15', '2023-02-15',
    (SELECT id FROM transaction_statuses WHERE status = 'Ativa')
);
```


#### Mapeamento de Comissões


**Desafio**: Diferentes estruturas e momentos de registro de comissões entre plataformas.


**Solução**: 
- Modelo unificado na tabela `platform_commission`
- Campo `source` para distinguir tipos de participantes
- Processamento assíncrono quando necessário


Exemplo:
```sql
-- Inserção normalizada de comissão
INSERT INTO platform_commission (
    transaction_id, participant_id, amount, currency_code, source
)
VALUES (
    (SELECT id FROM transactions WHERE transaction_id = 'TRX123' AND payment_gateway = 'Kiwify'),
    (SELECT id FROM commission_participants WHERE platform_id = 'AFF456' AND platform_origin = 'Kiwify'),
    148.50, 'BRL', 'AFFILIATE'
);
```


(Ref: Integração Multiplataforma, ID platform_integration_strategy_001)


## Pipeline de Processamento End-to-End


Para ilustrar como todo o sistema funciona em conjunto, aqui está o fluxo completo de processamento para uma nova transação:


```mermaid
graph TD
    A[Evento na Plataforma<br>ex: Nova Venda] -->|Webhook| B[Receptor de Webhook]
    B --> C{Identifica<br>Plataforma}
    C -->|Hotmart| D1[Adaptador Hotmart]
    C -->|Kiwify| D2[Adaptador Kiwify]
    C -->|Outra| D3[Adaptador Futuro]
    
    D1 --> E[Pipeline de Normalização]
    D2 --> E
    D3 --> E
    
    E -->|Etapa 1| F[Extração de<br>Dados Relevantes]
    F -->|Etapa 2| G[Mapeamento<br>de Entidades]
    G -->|Etapa 3| H[Normalização<br>de Valores]
    H -->|Etapa 4| I[Validação<br>e Enriquecimento]
    
    I --> J[Pipeline de Persistência]
    
    J -->|Passo 1| K[Persiste/Atualiza<br>Cliente]
    K -->|Passo 2| L[Persiste/Atualiza<br>Produto/Plano]
    L -->|Passo 3| M[Cria/Atualiza<br>Transação Principal]
    M -->|Passo 4| N[Registra Status<br>da Transação]
    N -->|Passo 5| O[Processa Itens<br>da Transação]
    O -->|Passo 6| P[Registra Taxas<br>e Comissões]
    P -->|Passo 7| Q[Armazena Detalhes<br>Específicos da Plataforma]
    
    Q --> R[Confirmação e<br>Notificações]
    R --> S[Eventos<br>Downstream]
```


Este pipeline representa a jornada completa dos dados, desde o evento original na plataforma externa até seu armazenamento no banco de dados unificado, seguindo os princípios de normalização e mapeamento discutidos neste documento.


Cada etapa deste pipeline é projetada para ser resiliente, com tratamento de erros e capacidade de reprocessamento quando necessário. O sistema também mantém logs detalhados em cada estágio para facilitar o diagnóstico de problemas.


A abordagem modular permite que novos adaptadores de plataforma sejam facilmente integrados ao pipeline existente, mantendo o processo central de normalização e persistência intacto.


O resultado é um sistema que pode processar eventos de múltiplas plataformas e apresentá-los de forma unificada no banco de dados, permitindo análises e operações consistentes independentemente da origem dos dados.


(Ref: Integração Multiplataforma, ID platform_integration_strategy_001)


## Conclusão


A Estratégia de Integração Multiplataforma descrita neste documento é o componente fundamental que permite ao banco de dados `joaocastanheira_bancodedados` funcionar como uma solução verdadeiramente unificada para gerenciamento de transações, assinaturas e comissões provenientes de diferentes plataformas.


### Benefícios Principais


1. **Visão Unificada do Cliente**: Consolidação de todas as transações de um cliente, independentemente da plataforma onde ocorreram.
2. **Análises Cross-Platform**: Capacidade de realizar análises que cruzam dados de diferentes plataformas de forma consistente.
3. **Independência de Plataforma**: Design que permite adicionar ou substituir plataformas com impacto mínimo no sistema central.
4. **Consistência Terminológica**: Vocabulário padronizado que simplifica consultas e análises.
5. **Auditoria Completa**: Rastreabilidade bidirecional que mantém vínculos com os sistemas de origem.


### Aplicação Prática


Esta estratégia de integração torna possível:


- **Consultas Unificadas**: Relatórios e análises que agregam dados de todas as plataformas
- **Reconciliação Simplificada**: Verificação da consistência entre sistemas internos e externos
- **Evolução Independente**: Capacidade de adaptar-se a mudanças nas APIs externas com impacto mínimo
- **Suporte Escalável**: Adição de novas plataformas seguindo o mesmo padrão arquitetural


Para uma implementação técnica detalhada dos processos de negócio que utilizam estes dados normalizados, consulte os documentos:
- **[Ciclo de Vida de Compra](process_flow_purchase_lifecycle_001.md)**
- **[Ciclo de Vida de Assinatura](process_flow_subscription_lifecycle_001.md)**
- **[Detalhes de Integração com Plataformas](domain_platform_integration_details_001.md)**


Esta arquitetura de integração, combinada com o design robusto do banco de dados, fornece a fundação para um sistema verdadeiramente unificado que pode evoluir e adaptar-se às necessidades do negócio e mudanças nas plataformas externas ao longo do tempo.


(Ref: Integração Multiplataforma, ID platform_integration_strategy_001)
```