#!/bin/bash

echo "üîç VALIDA√á√ÉO DO SISTEMA MULTI-AGENT AI"
echo "======================================"
echo ""

VALIDATION_PASSED=true

# Fun√ß√£o para marcar falha
mark_failure() {
    VALIDATION_PASSED=false
    echo "‚ùå $1"
}

# Fun√ß√£o para marcar sucesso
mark_success() {
    echo "‚úÖ $1"
}

echo "üìÇ Verificando estrutura de diret√≥rios..."
echo "========================================="

# Verificar diret√≥rios essenciais
if [ -d "mcp_integration" ]; then
    mark_success "Diret√≥rio mcp_integration existe"
else
    mark_failure "Diret√≥rio mcp_integration n√£o encontrado"
fi

if [ -d "langgraph_controllers" ]; then
    mark_success "Diret√≥rio langgraph_controllers existe"
else
    mark_failure "Diret√≥rio langgraph_controllers n√£o encontrado"
fi

if [ -d "logs" ]; then
    mark_success "Diret√≥rio logs existe"
else
    echo "üìù Criando diret√≥rio logs..."
    mkdir -p logs
    mark_success "Diret√≥rio logs criado"
fi

if [ -d "venv" ]; then
    mark_success "Ambiente virtual existe"
else
    mark_failure "Ambiente virtual n√£o encontrado - execute: python -m venv venv"
fi

echo ""
echo "üìÑ Verificando arquivos de configura√ß√£o..."
echo "=========================================="

# Verificar arquivo langgraph.json
if [ -f "langgraph.json" ]; then
    # Contar n√∫mero de grafos no arquivo
    graph_count=$(grep -c '".*":.*"./langgraph_controllers/' langgraph.json)
    if [ $graph_count -gt 0 ]; then
        mark_success "langgraph.json configurado com $graph_count grafos"
    else
        mark_failure "langgraph.json existe mas n√£o tem grafos configurados"
    fi
else
    mark_failure "Arquivo langgraph.json n√£o encontrado"
fi

# Verificar mcp_server.py
if [ -f "mcp_integration/mcp_server.py" ]; then
    mark_success "mcp_server.py encontrado"
else
    mark_failure "mcp_server.py n√£o encontrado em mcp_integration/"
fi

# Verificar mcp_config.json
if [ -f "mcp_integration/mcp_config.json" ]; then
    mark_success "mcp_config.json encontrado"
else
    mark_failure "mcp_config.json n√£o encontrado em mcp_integration/"
fi

echo ""
echo "üêç Verificando depend√™ncias Python..."
echo "====================================="

if [ -d "venv" ]; then
    source venv/bin/activate
    
    # Verificar depend√™ncias essenciais
    if python -c "import fastapi" 2>/dev/null; then
        mark_success "FastAPI instalado"
    else
        mark_failure "FastAPI n√£o instalado - execute: pip install fastapi"
    fi
    
    if python -c "import uvicorn" 2>/dev/null; then
        mark_success "Uvicorn instalado"
    else
        mark_failure "Uvicorn n√£o instalado - execute: pip install uvicorn"
    fi
    
    if command -v langgraph >/dev/null 2>&1; then
        mark_success "LangGraph CLI instalado"
    else
        mark_failure "LangGraph CLI n√£o instalado - execute: pip install langgraph-cli"
    fi
    
    if command -v autogenstudio >/dev/null 2>&1; then
        mark_success "AutoGen Studio instalado"
    else
        mark_failure "AutoGen Studio n√£o instalado - execute: pip install autogenstudio"
    fi
else
    mark_failure "Ambiente virtual n√£o encontrado - n√£o √© poss√≠vel verificar depend√™ncias"
fi

echo ""
echo "üîß Verificando controladores LangGraph..."
echo "========================================"

controller_count=0
if [ -d "langgraph_controllers" ]; then
    for controller in langgraph_controllers/*_controller.py; do
        if [ -f "$controller" ]; then
            controller_count=$((controller_count + 1))
        fi
    done
    
    if [ $controller_count -gt 0 ]; then
        mark_success "$controller_count controladores LangGraph encontrados"
    else
        mark_failure "Nenhum controlador LangGraph encontrado"
    fi
else
    mark_failure "Diret√≥rio langgraph_controllers n√£o existe"
fi

echo ""
echo "üåê Verificando portas dispon√≠veis..."
echo "===================================="

# Verificar se as portas est√£o livres
check_port() {
    if lsof -i :$1 > /dev/null 2>&1; then
        echo "‚ö†Ô∏è  Porta $1 est√° em uso (ser√° necess√°rio parar o processo)"
        return 1
    else
        mark_success "Porta $1 est√° dispon√≠vel"
        return 0
    fi
}

check_port 8000  # MCP Server
check_port 8081  # AutoGen Studio  
check_port 8082  # LangGraph Studio

echo ""
echo "üìã RESULTADO DA VALIDA√á√ÉO"
echo "========================"

if [ "$VALIDATION_PASSED" = true ]; then
    echo "üéâ VALIDA√á√ÉO PASSOU! Sistema est√° pronto para uso."
    echo ""
    echo "üöÄ Para iniciar o sistema, execute:"
    echo "   ./start_all_interfaces.sh"
    echo ""
    echo "üåê URLs que estar√£o dispon√≠veis:"
    echo "   AutoGen Studio:    http://localhost:8081"
    echo "   LangGraph Studio:  https://smith.langchain.com/studio/?baseUrl=http://127.0.0.1:8082"
    echo "   MCP Server API:    http://localhost:8000"
    exit 0
else
    echo "‚ùå VALIDA√á√ÉO FALHOU! Corrija os problemas acima antes de continuar."
    echo ""
    echo "üîß Comandos de corre√ß√£o comuns:"
    echo "   Criar ambiente virtual:     python -m venv venv"
    echo "   Ativar ambiente virtual:    source venv/bin/activate"
    echo "   Instalar depend√™ncias:      pip install -r requirements.txt"
    echo "   Instalar LangGraph CLI:     pip install langgraph-cli"
    echo "   Instalar AutoGen Studio:    pip install autogenstudio"
    exit 1
fi 