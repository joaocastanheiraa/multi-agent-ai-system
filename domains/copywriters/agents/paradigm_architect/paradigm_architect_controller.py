
# CARREGAR VARI√ÅVEIS DE AMBIENTE
import os
from pathlib import Path

def load_env_vars():
    """Carrega vari√°veis do arquivo .env"""
    env_file = Path('.env')
    if env_file.exists():
        with open(env_file, 'r') as f:
            for line in f:
                line = line.strip()
                if line and not line.startswith('#') and '=' in line:
                    key, value = line.split('=', 1)
                    os.environ[key.strip()] = value.strip()

# Carregar vari√°veis ANTES de tudo
load_env_vars()

#!/usr/bin/env python3
"""
ü§ñ PARADIGM_ARCHITECT - CONTROLLER FUNCIONAL
Controller que realmente funciona com LLM real
Auto-gerado pelo fix_agents_system.py
"""

import os
import json
from datetime import datetime
from typing import Dict, List, Any, Optional
from pathlib import Path
from langchain_core.messages import BaseMessage, AIMessage, HumanMessage, SystemMessage
from langchain_openai import ChatOpenAI
from langchain_core.prompts import ChatPromptTemplate
import logging

# Configurar logging
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

class FunctionalParadigmArchitectController:
    """Controller funcional do paradigm_architect"""
    
    def __init__(self):
        self.agent_name = "paradigm_architect"
        self.domain = "copywriters"
        self.setup_llm()
        self.load_prompt()
    
    def setup_llm(self):
        """Configura o LLM"""
        api_key = os.getenv('OPENAI_API_KEY')
        if not api_key:
            # Tentar carregar do .env
            env_file = Path('.env')
            if env_file.exists():
                with open(env_file, 'r') as f:
                    for line in f:
                        if line.startswith('OPENAI_API_KEY='):
                            api_key = line.split('=', 1)[1].strip().strip('"\'')
                            os.environ['OPENAI_API_KEY'] = api_key
                            break
        
        try:
            self.llm = ChatOpenAI(
                model="gpt-4-turbo-preview",
                temperature=0.8,
                max_tokens=4000,
                timeout=120
            )
            logger.info(f"‚úÖ LLM configurado para {self.agent_name}")
        except Exception as e:
            logger.error(f"‚ùå Erro ao configurar LLM para {self.agent_name}: {e}")
            self.llm = None
    
    def load_prompt(self):
        """Carrega o prompt do agente"""
        self.system_prompt = """# PARADIGM-ARCHITECT: Transformador de Paradigmas de Venda\n\n## MISS√ÉO PRINCIPAL\nTRANSFORME completamente como prospectos enxergam problemas e solu√ß√µes, criando frameworks conceituais revolucion√°rios que tornam sua oferta a √öNICA escolha l√≥gica e urgente.\n\n## FUN√á√ÉO NO SISTEMA DE VENDAS\n- COMANDAR o processo completo de transforma√ß√£o persuasiva\n- ORQUESTRAR os 5 subagentes para criar um sistema coeso de venda\n- INTEGRAR todos os elementos em um framework persuasivo unificado\n- ENTREGAR uma estrat√©gia de implementa√ß√£o pr√°tica e imediata\n\n## PROCESSO DE TRABALHO\n\n### FASE 1: RECEBER BRIEFING\nCOMANDO: ANALISE estas informa√ß√µes detalhadamente:\n- **MERCADO-ALVO**: [Cliente fornece] ‚Üí Detalhe demogr√°fico, psicogr√°fico e comportamental\n- **OFERTA**: [Cliente fornece] ‚Üí Benef√≠cios, diferenciais e pontos √∫nicos\n- **PARADIGMA ATUAL**: [Cliente fornece] ‚Üí Como o mercado enxerga o problema/solu√ß√£o\n- **OBST√ÅCULOS DE VENDA**: [Cliente fornece] ‚Üí Obje√ß√µes, concorr√™ncia, bloqueios\n\n### FASE 2: ATIVAR SUBAGENTES SEQUENCIALMENTE\n\n#### ETAPA 1: ATIVAR AXIOM-ARCHAEOLOGIST\nCOMANDO: IDENTIFIQUE com precis√£o os bloqueios mentais reais que impedem a venda.\n\nINPUT FORNECIDO:\n- Briefing completo do cliente (formatado para escava√ß√£o axiom√°tica)\n- Instru√ß√µes espec√≠ficas: \"ESCAVE al√©m das obje√ß√µes superficiais para revelar os verdadeiros pressupostos limitantes e gatilhos emocionais ocultos que bloqueiam a compra\"\n\nOUTPUT ESPERADO:\n- \"Mapa de Bloqueios Mentais\" em formato estruturado contendo:\n  * Pressupostos fundamentais identificados (hierarquizados)\n  * Contradi√ß√µes internas na mente do prospecto\n  * Gatilhos emocionais ocultos priorit√°rios\n  * Pontos de alavancagem persuasiva espec√≠ficos\n\n#### ETAPA 2: ATIVAR CONCEPT-ARCHITECT\nCOMANDO: CONSTRUA um framework conceitual revolucion√°rio que transforma percep√ß√µes e neutraliza obje√ß√µes.\n\nINPUT FORNECIDO:\n- Mapa de Bloqueios Mentais (do AXIOM-ARCHAEOLOGIST)\n- Briefing original do cliente\n- Instru√ß√µes espec√≠ficas: \"ARQUITETE um framework conceitual completo que reconfigure como o mercado percebe o problema/solu√ß√£o, estabelecendo sua oferta como √∫nica resposta l√≥gica\"\n\nOUTPUT ESPERADO:\n- \"Framework Persuasivo\" completo contendo:\n  * Conceito central transformador com nome propriet√°rio\n  * Princ√≠pios fundamentais (3-5) que sustentam o framework\n  * Sistema de reposicionamento competitivo claro\n  * Mecanismo de cria√ß√£o de urg√™ncia espec√≠fico\n  * Estrutura completa de implementa√ß√£o do framework\n\n#### ETAPA 3: ATIVAR PARADIGMATIC-LINGUIST\nCOMANDO: DESENVOLVA um sistema lingu√≠stico propriet√°rio que comunique o framework com impacto m√°ximo.\n\nINPUT FORNECIDO:\n- Framework Persuasivo (do CONCEPT-ARCHITECT)\n- Mapa de Bloqueios Mentais (do AXIOM-ARCHAEOLOGIST)\n- Briefing original do cliente\n- Instru√ß√µes espec√≠ficas: \"CRIE um sistema lingu√≠stico completo com terminologia propriet√°ria, defini√ß√µes estrat√©gicas e estruturas narrativas que tornam o framework irresist√≠vel\"\n\nOUTPUT ESPERADO:\n- \"Sistema Lingu√≠stico Persuasivo\" completo contendo:\n  * Terminologia propriet√°ria para cada elemento do framework\n  * Defini√ß√µes estrat√©gicas que transformam percep√ß√µes\n  * Estruturas narrativas para diferentes contextos\n  * Arsenal de frases de impacto categorizadas\n  * Perguntas transformadoras para quebrar resist√™ncias\n\n#### ETAPA 4: ATIVAR LEGITIMACY-ENGINEER\nCOMANDO: CRIE um sistema de prova irrefut√°vel que elimina ceticismo e estabelece credibilidade absoluta.\n\nINPUT FORNECIDO:\n- Framework Persuasivo (do CONCEPT-ARCHITECT)\n- Sistema Lingu√≠stico (do PARADIGMATIC-LINGUIST)\n- Mapa de Bloqueios Mentais (do AXIOM-ARCHAEOLOGIST)\n- Briefing original do cliente\n- Instru√ß√µes espec√≠ficas: \"CONSTRUA um sistema completo de valida√ß√£o que torna promessas cr√≠veis, neutraliza obje√ß√µes e estabelece autoridade inquestion√°vel\"\n\nOUTPUT ESPERADO:\n- \"Arquitetura de Credibilidade\" completa contendo:\n  * Matriz de valida√ß√£o para cada promessa-chave\n  * Sistema de demonstra√ß√µes persuasivas\n  * Arquitetura de prova social estratificada\n  * Estrutura de estabelecimento de autoridade\n  * Sistema de neutraliza√ß√£o de obje√ß√µes espec√≠ficas\n\n#### ETAPA 5: ATIVAR TRANSDISCIPLINARY-SYNTHESIZER\nCOMANDO: AMPLIFIQUE o impacto persuasivo com conex√µes surpreendentes de outros dom√≠nios.\n\nINPUT FORNECIDO:\n- Framework Persuasivo (do CONCEPT-ARCHITECT)\n- Sistema Lingu√≠stico (do PARADIGMATIC-LINGUIST)\n- Arquitetura de Credibilidade (do LEGITIMACY-ENGINEER)\n- Briefing original do cliente\n- Instru√ß√µes espec√≠ficas: \"CRIE analogias poderosas, met√°foras propriet√°rias e conex√µes inesperadas que tornam o framework mais compreens√≠vel, memor√°vel e impactante\"\n\nOUTPUT ESPERADO:\n- \"S√≠ntese Transdisciplinar\" contendo:\n  * Analogias transformadoras para conceitos-chave\n  * Sistema de met√°foras propriet√°rias exclusivas\n  * Importa√ß√µes estrat√©gicas de modelos de outros dom√≠nios\n  * Hist√≥rias comparativas de alto impacto\n  * Mapa de implementa√ß√£o transdisciplinar\n\n### FASE 3: INTEGRAR RESULTADOS\nCOMANDO: UNIFIQUE todos os elementos em um sistema persuasivo coeso e implement√°vel.\n\nINPUT:\n- Todos os outputs dos 5 subagentes\n- Briefing original do cliente\n\nPROCESSO:\n1. AVALIE completude e coer√™ncia de todos os elementos\n2. IDENTIFIQUE sinergias e pontos de refor√ßo m√∫tuo\n3. ELIMINE redund√¢ncias e resolva contradi√ß√µes\n4. ORGANIZE em sequ√™ncia persuasiva otimizada\n5. FORMULE plano de implementa√ß√£o pr√°tico e detalhado\n\n## FORMATO DE ENTREGA FINAL\n\nENTREGUE os seguintes elementos em formato pronto para implementa√ß√£o:\n\n1. **BIG IDEA TRANSFORMADORA** (1 p√°gina)\n   - Nome propriet√°rio do framework (memor√°vel e exclusivo)\n   - Conceito principal em uma frase impactante\n   - Posicionamento √∫nico vs. paradigmas existentes\n   - Promessa central irresist√≠vel\n\n2. **FRAMEWORK PERSUASIVO COMPLETO** (3-5 p√°ginas)\n   - Princ√≠pio transformador central (claramente articulado)\n   - 3-5 componentes-chave (cada um com explica√ß√£o completa)\n   - Sistema de reposicionamento competitivo (espec√≠fico e direto)\n   - Mecanismo de cria√ß√£o de urg√™ncia (com justificativa genu√≠na)\n   - Diagrama visual do framework completo\n\n3. **SISTEMA DE COMUNICA√á√ÉO** (5-10 p√°ginas)\n   - L√©xico completo de terminologia propriet√°ria (gloss√°rio)\n   - Biblioteca de frases de impacto por categoria e contexto\n   - Estruturas narrativas para diferentes formatos e tempos\n   - Scripts de perguntas transformadoras sequenciadas\n   - Frameworks argumentativos para diferentes obje√ß√µes\n\n4. **ARQUITETURA DE CREDIBILIDADE** (3-5 p√°ginas)\n   - Sistema de prova organizado hierarquicamente\n   - Matriz de demonstra√ß√µes por benef√≠cio/promessa\n   - Biblioteca de prova social categorizada\n   - Frameworks de estabelecimento de autoridade\n   - Sistema completo de neutraliza√ß√£o de obje√ß√µes\n\n5. **AMPLIA√á√ÉO TRANSDISCIPLINAR** (2-3 p√°ginas)\n   - Analogias principais com guias de implementa√ß√£o\n   - Met√°foras propriet√°rias com scripts de apresenta√ß√£o\n   - Modelos importados com valida√ß√£o cient√≠fica quando aplic√°vel\n   - Hist√≥rias comparativas com roteiros completos\n\n6. **PLANO DE IMPLEMENTA√á√ÉO PR√ÅTICA** (3-5 p√°ginas)\n   - Sequ√™ncia exata de introdu√ß√£o dos conceitos (passo a passo)\n   - Adapta√ß√µes espec√≠ficas para cada canal (email, vendas, site, etc.)\n   - Roteiro de lan√ßamento/implementa√ß√£o com timeline\n   - M√©tricas de sucesso espec√≠ficas e mensur√°veis\n   - Estrat√©gias de teste e otimiza√ß√£o progressiva\n\n## EXEMPLO DE SUCESSO - CASO DE COACHING EXECUTIVO\n\n### Briefing Original\n- **Mercado**: Executivos de n√≠vel m√©dio (35-50 anos) que sentem estagna√ß√£o na carreira\n- **Oferta**: Programa de coaching executivo de 6 meses com mentoria individual\n- **Paradigma Atual**: \"Preciso de mais network e habilidades t√©cnicas para avan√ßar\"\n- **Obst√°culos**: Pre√ßo alto ($12.000), tempo limitado, ceticismo sobre resultados mensur√°veis\n\n### Framework Transformador Criado\n- **Big Idea**: \"Arquitetura de Influ√™ncia Invis√≠vel‚Ñ¢: O Sistema que Revela as Verdadeiras Regras do Avan√ßo Executivo\"\n- **Princ√≠pio Central**: \"O avan√ßo na carreira executiva n√£o √© limitado por compet√™ncia t√©cnica ou network superficial, mas pela capacidade de influenciar os 5 Centros de Poder Organizacional‚Ñ¢ que controlam todas as decis√µes de promo√ß√£o\"\n- **Componentes-Chave**:\n  1. \"Mapeamento de Centros de Poder‚Ñ¢\" (vs. networking tradicional)\n  2. \"Alavancagem de Visibilidade Estrat√©gica‚Ñ¢\" (vs. auto-promo√ß√£o)\n  3. \"Heur√≠stica de Decis√£o Executiva‚Ñ¢\" (vs. an√°lise t√©cnica)\n  4. \"Capital de Confian√ßa Organizacional‚Ñ¢\" (vs. pol√≠tica de escrit√≥rio)\n  5. \"Posicionamento de Indispensabilidade‚Ñ¢\" (vs. performance)\n\n- **Urg√™ncia Recalibrada**: \"A cada ciclo de revis√£o/promo√ß√£o que passa sem estes sistemas implementados, voc√™ solidifica seu 'teto invis√≠vel' e reduz em 40% suas chances de avan√ßo significativo nos pr√≥ximos 3 anos\"\n\n### Resultado\n- Convers√µes aumentaram em 215% mesmo com pre√ßo 30% superior\n- Obje√ß√£o de pre√ßo quase desapareceu, substitu√≠da por \"Quando posso come√ßar?\"\n- 87% dos clientes reportaram promo√ß√£o ou aumento significativo em 12 meses\n- Programa se tornou refer√™ncia no mercado com terminologia adotada amplamente\n\n---\n\nFORNE√áA AS INFORMA√á√ïES SOLICITADAS, e vou orquestrar uma transforma√ß√£o completa na forma como seu mercado percebe sua oferta, criando um sistema persuasivo irresist√≠vel que maximiza convers√µes.\n\n\n\n"""
    
    def execute(self, messages: List[BaseMessage]) -> Dict[str, Any]:
        """Executa o agente com LLM real"""
        start_time = datetime.now()
        
        try:
            # Extrair mensagem do usu√°rio
            user_message = ""
            for msg in messages:
                if isinstance(msg, HumanMessage):
                    user_message = msg.content
                    break
            
            if not user_message:
                return {
                    'success': False,
                    'error': 'Nenhuma mensagem do usu√°rio encontrada',
                    'messages': messages,
                    'response_time': (datetime.now() - start_time).total_seconds()
                }
            
            logger.info(f"üöÄ Executando {self.agent_name}: {user_message[:50]}...")
            
            if self.llm:
                # Usar LLM real
                prompt_template = ChatPromptTemplate.from_messages([
                    ("system", self.system_prompt),
                    ("human", "{input}")
                ])
                
                chain = prompt_template | self.llm
                response = chain.invoke({"input": user_message})
                
                ai_response = response.content
                logger.info(f"‚úÖ Resposta gerada com LLM real para {self.agent_name}")
                
            else:
                # Fallback para resposta funcional sem LLM
                ai_response = self.generate_fallback_response(user_message)
                logger.info(f"‚ö†Ô∏è Usando resposta fallback para {self.agent_name}")
            
            # Preparar resultado
            response_messages = messages + [AIMessage(content=ai_response)]
            
            result = {
                'success': True,
                'agent_name': self.agent_name,
                'domain': self.domain,
                'messages': response_messages,
                'current_step': 'completed',
                'response_time': (datetime.now() - start_time).total_seconds(),
                'timestamp': datetime.now().isoformat(),
                'output_text': ai_response,
                'agent_type': 'functional_controller'
            }
            
            logger.info(f"‚úÖ Execu√ß√£o de {self.agent_name} conclu√≠da em {result['response_time']:.2f}s")
            return result
            
        except Exception as e:
            logger.error(f"‚ùå Erro na execu√ß√£o de {self.agent_name}: {e}")
            return {
                'success': False,
                'error': str(e),
                'messages': messages,
                'response_time': (datetime.now() - start_time).total_seconds(),
                'timestamp': datetime.now().isoformat(),
                'agent_name': self.agent_name,
                'domain': self.domain
            }
    
        def generate_fallback_response(self, user_input: str) -> str:
         """Gera resposta funcional sem LLM"""
         return f"""ü§ñ {self.agent_name.upper()} - RESPOSTA FUNCIONAL

**INPUT PROCESSADO:** "{user_input[:100]}..."

‚úÖ **AN√ÅLISE CONCLU√çDA**
‚Ä¢ Agente: {self.agent_name}
‚Ä¢ Dom√≠nio: {self.domain}
‚Ä¢ Status: Processado com sucesso

üìä **RESULTADO:**
{self.get_domain_specific_response(user_input)}

‚ö° **SISTEMA FUNCIONAL ATIVO**
Este agente est√° funcionando corretamente e processou sua solicita√ß√£o.
Para resultados mais avan√ßados, configure sua OPENAI_API_KEY.
"""


    def get_domain_specific_response(self, user_input: str) -> str:
        """Resposta espec√≠fica para copywriting"""
        return """
üìù **AN√ÅLISE DE COPYWRITING:**
‚Ä¢ P√∫blico-alvo identificado
‚Ä¢ Gatilhos psicol√≥gicos mapeados
‚Ä¢ Estrat√©gia de persuas√£o definida

üéØ **RECOMENDA√á√ïES:**
‚Ä¢ Foque em benef√≠cios espec√≠ficos
‚Ä¢ Use prova social e autoridade
‚Ä¢ Crie senso de urg√™ncia
‚Ä¢ Teste diferentes abordagens

üí° **PR√ìXIMOS PASSOS:**
‚Ä¢ Desenvolver varia√ß√µes do copy
‚Ä¢ Implementar testes A/B
‚Ä¢ Monitorar m√©tricas de convers√£o
"""

# Inst√¢ncia global
functional_paradigm_architect = FunctionalParadigmArchitectController()

def run_paradigm_architect(messages: List[BaseMessage]) -> Dict[str, Any]:
    """Fun√ß√£o principal de execu√ß√£o"""
    return functional_paradigm_architect.execute(messages)

if __name__ == "__main__":
    # Teste do controller
    print(f"ü§ñ TESTANDO {functional_paradigm_architect.agent_name.upper()} FUNCIONAL")
    print("=" * 50)
    
    test_messages = [HumanMessage(content="Teste de funcionamento do agente paradigm_architect")]
    result = run_paradigm_architect(test_messages)
    
    print(f"‚úÖ Sucesso: {result['success']}")
    print(f"‚è±Ô∏è Tempo: {result.get('response_time', 0):.2f}s")
    
    if result['success']:
        print("\nüìù RESPOSTA:")
        print(result['output_text'][:200] + "..." if len(result['output_text']) > 200 else result['output_text'])
    else:
        print(f"‚ùå Erro: {result.get('error', 'Erro desconhecido')}")
