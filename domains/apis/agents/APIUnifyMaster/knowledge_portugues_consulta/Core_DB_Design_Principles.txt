# `Core_DB_Design_Principles.md`




```markdown
---
title: "Princípios Fundamentais de Design do Banco de Dados Unificado"
id: "core_db_design_001"
doc_type: "design_principles"
doc_version: "1.2" # Atualizado para refletir a nova revisão
date_created: "2025-04-23"
date_updated: "2025-04-23" # Atualizado para refletir a nova revisão
author: "João Castanheira"
db_name: "joaocastanheira_bancodedados"
db_version: "1.0"
doc_status: "Aprovado"
environment: "Produção"
related_docs: ["core_db_arch_001", "platform_integration_strategy_001", "core_db_glossary_001", "ref_db_schema_001", "domain_customers_ecosystem_001", "domain_products_catalog_001", "domain_transactions_lifecycle_001", "domain_subscriptions_management_001", "domain_commission_system_001", "domain_platform_integration_details_001"]
embedding_guide_concepts: ["princípios de design de banco de dados", "normalização", "chaves primárias", "chaves estrangeiras", "tipos de dados", "nomenclatura de banco de dados", "integridade referencial", "tratamento de nulos", "indexação estratégica", "segurança de dados em banco", "evolução de schema", "performance de banco de dados", "escalabilidade de banco de dados", "governança de dados", "melhores práticas SQL", "auditoria de dados", "particionamento de tabela", "otimização de queries", "integração multiplataforma", "mapeamento de dados"]
---


# Princípios Fundamentais de Design do Banco de Dados Unificado


Este documento detalha os princípios e convenções que guiaram o design do banco de dados `joaocastanheira_bancodedados`. Aderir a estes princípios garante consistência, integridade, performance e manutenibilidade do esquema ao longo do tempo.


(Ref: DB Design Principles, ID core_db_design_001)


## Princípios de Design e Decisões Arquiteturais


O design do banco de dados foi guiado por vários princípios fundamentais que influenciaram as decisões arquiteturais, buscando equilibrar integridade, rastreabilidade, flexibilidade e performance.


### 1. Normalização Equilibrada


O schema foi normalizado até a Terceira Forma Normal (3NF) na maioria dos casos, com algumas exceções estratégicas:


-   **Normalização Rigorosa** foi aplicada em tabelas centrais como `customers`, `products`, `transactions` e `subscriptions` para minimizar redundância e manter consistência.
-   **Desnormalização Controlada** foi permitida em algumas áreas específicas para otimizar consultas frequentes ou preservar dados históricos, como em campos calculados diretamente na tabela `transactions` (`offer_price`, `platform_fee_amount`, etc.) ou nas tabelas `platform_*` que funcionam como snapshots históricos.
-   **Normalização de Dados de Plataforma** ocorre como parte do processo de integração, mapeando diferentes terminologias e estruturas de plataformas externas para nosso modelo interno unificado, conforme detalhado no documento **[Estratégia de Integração Multiplataforma](platform_integration_strategy_001.md)**.


### 2. Preservação Histórica e Auditoria


Um princípio central do design é a capacidade de rastrear mudanças importantes ao longo do tempo:


-   **Tabelas de Histórico** (`customer_logs`, `transaction_status_history`, `subscription_status_history`) registram todas as alterações em entidades-chave.
-   **Timestamping Universal** com campos `created_at` e `updated_at` em todas as tabelas, com atualização automática via triggers.
-   **Snapshots Imutáveis** em tabelas como `platform_sale_offer_history` para preservar o estado exato no momento da transação.


### 3. Identificadores Unificados com Preservação da Origem


Para permitir a unificação de dados de múltiplas plataformas:


-   **Sistema de ID Duplo** com:
    -   ID interno sequencial (ex: `id` como SERIAL PRIMARY KEY)
    -   ID original da plataforma (ex: `transaction_id` + `payment_gateway`)
-   **Constraints de Unicidade Compostas** para garantir que registros da mesma entidade em diferentes plataformas não sejam duplicados:
    ```sql
    CONSTRAINT uq_transaction_gateway UNIQUE (transaction_id, payment_gateway)
    ```


### 4. Tipos Enumerados Customizados


Para campos com valores predefinidos, foram criados tipos enumerados PostgreSQL:


```sql
CREATE TYPE payment_method_enum AS ENUM (
    'credit_card',
    'debit_card',
    'boleto',
    'pix',
    -- outros valores...
);
```


Vantagens desta abordagem:
-   Validação de valores no nível do banco de dados.
-   Melhor documentação semântica.
-   Evita necessidade de tabelas de lookup para listas simples.
-   Facilita verificação de tipo em consultas.


### 5. Função e Triggers para Consistência


O uso de triggers para manter a consistência de dados, especialmente para timestamping:


```sql
CREATE OR REPLACE FUNCTION update_updated_at_column() RETURNS TRIGGER
LANGUAGE plpgsql
AS $$
BEGIN
   NEW.updated_at = NOW();
   RETURN NEW;
END;
$$;


CREATE TRIGGER trigger_update_customers_updated_at
    BEFORE UPDATE ON customers
    FOR EACH ROW
    EXECUTE PROCEDURE update_updated_at_column();
```


### 6. Integridade Referencial e Regras ON DELETE


A integridade dos dados entre tabelas é mantida através de chaves estrangeiras (`FOREIGN KEY`) com regras `ON DELETE` apropriadas:


-   **ON DELETE CASCADE**: Para tabelas de histórico/detalhes que não devem existir sem o registro pai (ex: `transaction_items` referenciando `transactions`).
-   **ON DELETE RESTRICT** (comportamento padrão) ou **ON DELETE SET NULL**: Para relacionamentos onde o registro filho pode potencialmente existir sem o pai, ou onde a exclusão do pai deve ser impedida se houver filhos.


### 7. Flexibilidade para Metadados Específicos da Plataforma


Campo `metadata` (JSONB) em tabelas como `platform_transaction_payment_history` para armazenar dados específicos de cada plataforma sem necessidade de alterar o schema principal, permitindo extensibilidade e preservação de detalhes originais.


(Ref: DB Design Principles, ID core_db_design_001)


## Estratégia de Chave Primária e Identificador


A base de qualquer modelo relacional robusto é a gestão de identificadores. Adotamos uma estratégia híbrida para chaves primárias e identificadores externos.


### Chaves Primárias Internas (PKs)


**Princípio**: Utilizar chaves primárias sequenciais auto-incrementais (`SERIAL` no PostgreSQL) para identificadores internos de cada tabela.


**Justificativa**:
-   **Performance**: `SERIAL`s são ideais para chaves primárias e estrangeiras em termos de performance de indexação, armazenamento e velocidade de join, especialmente em cargas de trabalho transacionais e analíticas comuns.
-   **Simplicidade**: São fáceis de gerar e gerenciar pelo próprio banco de dados.
-   **Espaço**: Ocupam menos espaço em disco e na memória cache comparados a UUIDs.


**Implementação**:
```sql
CREATE TABLE exemplo (
    id SERIAL PRIMARY KEY, -- Chave primária interna
    -- outros campos
);
```


### Identificadores Externos


**Princípio**: Preservar identificadores originais de plataformas externas como colunas dedicadas, garantindo unicidade quando combinado com a origem da plataforma.


**Justificativa**:
-   **Rastreabilidade**: Permite mapear registros internos de volta aos sistemas de origem para depuração, reconciliação e auditoria.
-   **Unicidade Multiplataforma**: A combinação do ID externo com a plataforma de origem garante a identificação única da entidade *dentro* do nosso sistema.


**Implementação**:
```sql
CREATE TABLE products (
    id SERIAL PRIMARY KEY,
    product_id VARCHAR(100) NOT NULL, -- ID na plataforma de origem
    platform_origin VARCHAR(100) NOT NULL, -- Nome da plataforma
    -- outros campos
    CONSTRAINT uq_product_platform UNIQUE (product_id, platform_origin) -- Garante unicidade da combinação
);
```


(Ref: DB Design Principles, ID core_db_design_001)


## Estratégia de Normalização e Modelagem de Dados


Buscamos um equilíbrio entre integridade de dados e performance de consulta, com a 3FN como base e desnormalização estratégica justificada.


A normalização no contexto de integração multiplataforma vai além da simples organização tabular dos dados. Inclui o mapeamento e unificação de conceitos entre diferentes plataformas, como detalhado no documento **[Estratégia de Integração Multiplataforma](platform_integration_strategy_001.md)**. Por exemplo, a tabela `transaction_statuses` serve como um ponto central para normalizar os diferentes nomes de status que vêm das várias plataformas.


(Conteúdo detalhado sobre 3FN, Desnormalização Estratégica e Modelagem de Vocabulário (Lookup vs. ENUM) já coberto na seção "Princípios de Design e Decisões Arquiteturais" acima.)


## Convenções e Padrões de Nomenclatura


Uma nomenclatura consistente é vital para a legibilidade e manutenibilidade do esquema.


**Princípios**:
-   **Tabelas**: Nomes em inglês, snake_case, no plural (ex: `customers`, `transactions`).
-   **Colunas**: Nomes em inglês, snake_case, no singular (ex: `customer_id`, `order_date`).
-   **Chaves Primárias**: `id` (padrão SERIAL).
-   **Chaves Estrangeiras**: `[nome_tabela_referenciada]_id` (ex: `customer_id` referenciando `customers.id`).
-   **Índices**: `idx_[nome_tabela]_[colunas_indexadas]` (ex: `idx_transactions_customer_id`).
-   **Constraints Unique**: `uq_[nome_tabela]_[colunas]` (ex: `uq_product_platform`).
-   **Tipos ENUM**: `[nome_tipo]_enum` (ex: `payment_method_enum`).
-   **Funções**: `[ação]_[entidade]_column` ou `[ação]_[propósito]` (ex: `update_updated_at_column`).
-   **Triggers**: `trigger_[ação]_[nome_tabela]_[propósito]` (ex: `trigger_update_customers_updated_at`).


**Justificativa**:
-   **Consistência**: Facilita a leitura e escrita de queries por qualquer membro da equipe.
-   **Autodocumentação**: O nome da coluna ou tabela já sugere seu propósito e, no caso de FKs, a tabela referenciada.
-   **Compatibilidade**: snake_case é um padrão comum em bancos de dados e linguagens de programação.


### Convenções de Comentários


Documentação extensiva no nível do schema:


-   **Comentários de Tabela**: Descrição geral do propósito da tabela.
-   **Comentários de Coluna**: Definição clara de cada campo, incluindo unidades ou formatos quando aplicável.
-   **Comentários de Tipos**: Explicação dos valores enumerados e seu uso.


```sql
COMMENT ON TABLE customers IS 'Repositório central de informações dos clientes, unificando dados das diversas plataformas.';
COMMENT ON COLUMN customers.email IS 'E-mail principal do cliente, usado para login e comunicação. Deve ser único.';
```


(Ref: DB Design Principles, ID core_db_design_001)


## Tipos de Dados e Padrões de Precisão


A escolha correta dos tipos de dados é crucial para a integridade e eficiência.


**Princípios**:
-   **Valores Monetários**: Usar `NUMERIC(15, 4)` para todos os valores financeiros.
-   **Timestamps**: Usar `TIMESTAMP WITH TIME ZONE`.
-   **Strings**: Usar `VARCHAR` com comprimento apropriado ou `TEXT` para textos longos.
-   **Booleanos**: Usar `BOOLEAN`.
-   **Dados Semi-estruturados**: Usar `JSONB`.


**Justificativa**:
-   **NUMERIC**: Garante precisão exata para cálculos financeiros, evitando erros de ponto flutuante. (15 dígitos no total, 4 após o ponto decimal é suficiente para a maioria das moedas).
-   **TIMESTAMP WITH TIME ZONE**: Armazena o momento exato no tempo, independente do fuso horário do servidor ou cliente, evitando problemas com horários de verão e diferenças regionais.
-   **VARCHAR/TEXT**: `VARCHAR` com limite ajuda a impor restrições de tamanho quando aplicável; `TEXT` é flexível para descrições longas.
-   **BOOLEAN**: Tipo nativo eficiente para valores verdadeiro/falso.
-   **JSONB**: Armazenamento eficiente de dados JSON para metadados flexíveis, suportando indexação e consultas.


(Ref: DB Design Principles, ID core_db_design_001)


## Tratamento de Dados Nulos e Variações de API


Dados incompletos ou variáveis de APIs externas são um desafio comum.


**Princípio**: Utilizar `NULL` explicitamente para indicar a ausência de um valor conhecido ou aplicável. Evitar valores padrão "mágicos" (como strings vazias ou zeros) para representar ausência, a menos que o zero seja um valor válido e significativo.


**Justificativa**:
-   **Clareza Semântica**: `NULL` comunica inequivocamente que a informação está faltando ou não se aplica.
-   **Consultas Precisas**: Permite filtrar facilmente por dados presentes (`IS NOT NULL`) ou ausentes (`IS NULL`).


**Abordagem para Variações de Plataforma**:
-   **Campos Universais**: Colunas que existem para a maioria das plataformas são criadas diretamente na tabela principal e marcadas como `NOT NULL` se forem sempre esperadas, ou permitem `NULL` se forem opcionais ou específicas de algumas plataformas.
-   **Campos Específicos/Raros**: Dados que são muito específicos de uma plataforma ou raramente fornecidos podem ser armazenados em colunas `JSONB` na tabela principal ou em tabelas auxiliares dedicadas.


**Exemplo**: O campo `card_brand` na tabela `transactions` permite `NULL` porque nem todos os métodos de pagamento usam cartão.


Esta abordagem de tratamento de dados é aplicada no processo de normalização descrito em **[Estratégia de Integração Multiplataforma](platform_integration_strategy_001.md)**, onde dados de diferentes formatos e estruturas são mapeados para o modelo unificado.


(Ref: DB Design Principles, ID core_db_design_001)


## Estratégia de Indexação


Índices são cruciais para a performance de leitura.


**Princípio**: Criar índices baseados nos padrões de consulta esperados, focando em colunas usadas em cláusulas `WHERE`, `JOIN`, `ORDER BY` e `GROUP BY`.


**Justificativa**:
-   **Performance de Consulta**: Reduz drasticamente o tempo de execução para consultas que filtram ou ordenam grandes volumes de dados.


### Tipos de Índice Aplicados


-   **Índices de Coluna Única**: Para filtros comuns (ex: email, status).
-   **Índices Compostos**: Para filtros que combinam múltiplas colunas frequentemente (ex: `(product_id, platform_origin)`). A ordem das colunas no índice composto segue a seletividade ou o padrão de consulta mais comum.
-   **Índices de Expressão**: Para consultas que usam funções em colunas (ex: `lower(email)`).
-   **Índices Parciais**: Para otimizar consultas em subconjuntos de dados (ex: transações ativas ou recentes).


**Processo Contínuo**: A indexação não é uma tarefa única. Envolve monitoramento contínuo das métricas de performance, análise dos planos de execução de consultas lentas (`EXPLAIN ANALYZE`) e ajuste dos índices conforme os padrões de acesso aos dados evoluem.


(Ref: DB Design Principles, ID core_db_design_001)


## Considerações de Performance e Escalabilidade


Para garantir que o banco de dados mantenha boa performance mesmo com crescimento significativo, diversas estratégias foram implementadas:


### 1. Indexação Estratégica (Reforço)


Além dos índices básicos em chaves primárias e estrangeiras, o schema inclui:


-   **Índices Compostos** para padrões comuns de filtro (ex: `idx_subscriptions_next_billing_date` para facilitar a localização de assinaturas prestes a serem cobradas).
-   **Índices Parciais** para subconjuntos relevantes de dados.
-   **Índices em Campos de Busca** frequentemente utilizados em cláusulas WHERE (ex: `email`, `transaction_id`).


### 2. Particionamento


Para tabelas que tendem a crescer significativamente, considerar particionamento por:


-   **Tempo**: Particionamento por mês/ano para tabelas históricas como `transaction_status_history`.
-   **Plataforma**: Potencial particionamento por `payment_gateway` para distribuir carga.


### 3. Colunas Calculadas e Estatísticas


-   **Colunas Calculadas**: Armazenar valores calculados frequentemente utilizados para evitar recalculos constantes.
-   **Estatísticas Atualizadas**: Garantir que o PostgreSQL mantenha estatísticas atualizadas para que o otimizador de consultas escolha os melhores planos de execução (`ANALYZE`).


### 4. Estratégias de Limpeza e Arquivamento


-   **Políticas de Retenção**: Definir quanto tempo manter dados históricos detalhados.
-   **Arquivamento**: Mover dados antigos para tabelas de arquivo ou sistemas de armazenamento de longo prazo quando necessário.
-   **Agregação**: Considerar agregação de dados históricos para análises de longo prazo.


### 5. Tipos de Dados Otimizados (Reforço)


-   **Uso de VARCHAR com Limites**: Em vez de TEXT quando apropriado.
-   **ENUMs**: Uso de tipos enumerados que são mais eficientes que strings para valores predefinidos.
-   **Tipos Numéricos Apropriados**: NUMERIC(15,4) para valores monetários, mas tipos menores (INTEGER, SMALLINT) quando adequado.


(Ref: DB Design Principles, ID core_db_design_001)


## Diretrizes de Segurança e Governança de Dados


A segurança e governança de dados são aspectos críticos deste banco de dados, que lida com informações sensíveis de clientes e financeiras.


### 1. Controle de Acesso


-   **Princípio do Menor Privilégio**: Usuários e aplicações devem ter apenas os privilégios mínimos necessários.
-   **Usuários Separados por Função**: Criar papéis de banco de dados distintos (ex: leitura, leitura/escrita, administrador).
-   **Mascaramento de Dados Sensíveis**: Para ambientes de não-produção, utilizar views ou funções para mascarar dados pessoais.
    ```sql
    -- Exemplo de view com dados mascarados para desenvolvimento/testes
    CREATE VIEW masked_customers AS
    SELECT
        id,
        MD5(email) AS email,
        SUBSTRING(name, 1, 1)||REPEAT('*', LENGTH(name) - 1) AS name,
        '******' AS document
    FROM
        customers;
    ```


### 2. Auditoria e Monitoramento


-   **Logs de Alteração**: Já implementados através de tabelas de histórico (`customer_logs`, etc.).
-   **Logs de Consulta**: Configurar logging de consultas críticas ou extensas.
-   **Alertas de Anomalias**: Monitorar padrões suspeitos (acesso incomum, alterações em massa).


### 3. Proteção de Dados Pessoais (LGPD/GDPR)


-   **Classificação de Dados**: Identificar e documentar campos com dados pessoais.
-   **Processo de Anonimização**: Definir e implementar procedimentos para anonimizar dados quando solicitado.
    ```sql
    -- Exemplo de procedimento de anonimização
    UPDATE customers
    SET
        name = 'Cliente Anonimizado',
        email = CONCAT('anonymized_', id, '@anonymous.com'),
        phone_local_code = NULL,
        phone_number = NULL,
        document_type = NULL
    WHERE id = ?;
    ```
-   **Retenção Limitada**: Implementar políticas de retenção de dados pessoais.


### 4. Backup e Recuperação


-   **Backups Regulares**: Definir frequência (diário, incremental) e retenção.
-   **Testes de Recuperação**: Validar periodicamente a capacidade de restauração.
-   **RPO/RTO Definidos**: Estabelecer e buscar Objetivos de Ponto de Recuperação e Tempo de Recuperação.


(Ref: DB Design Principles, ID core_db_design_001)


## Evolução e Extensão do Schema


O esquema do banco de dados evoluirá com os requisitos de negócio e as integrações de plataforma.


**Princípio**: Gerenciar todas as alterações de esquema (adição de tabelas/colunas, modificação de tipos, etc.) usando um sistema de versionamento e migração de banco de dados.


**Justificativa**:
-   **Consistência**: Garante que o esquema em todos os ambientes seja consistente e rastreável.
-   **Automação**: Permite aplicar mudanças de forma confiável e repetível.
-   **Rastreabilidade**: Cria um histórico claro de todas as modificações no esquema.


### Diretrizes de Implementação


-   **Ferramenta de Migração**: Utilizar uma ferramenta como Flyway ou Liquibase.
-   **Scripts Idempotentes**: Escrever scripts de migração que possam ser executados múltiplas vezes sem efeitos colaterais indesejados.
-   **Compatibilidade Retroativa**: Priorizar alterações de esquema que sejam compatíveis com versões anteriores da aplicação.
-   **Processo de Revisão**: Todas as propostas de alteração de esquema devem passar por um processo de revisão por pares.


### Introdução de Novas Plataformas


Para adicionar suporte a uma nova plataforma de vendas:


1.  **Validação de Compatibilidade**: Verificar se os dados da nova plataforma se encaixam no modelo existente.
2.  **Mapeamento de Status**: Adicionar mapeamentos de status da nova plataforma para os status normalizados.
3.  **Extensão de Enums**: Se necessário, adicionar novos valores a tipos enumerados.
4.  **Scripts de Importação**: Desenvolver rotinas de ETL específicas para a nova plataforma.


O documento **[Estratégia de Integração Multiplataforma](platform_integration_strategy_001.md)** fornece diretrizes detalhadas sobre como integrar novas plataformas ao sistema existente.


### Novos Modelos de Negócio


O schema suporta extensão para novos modelos de negócio (ex: pricing baseado em uso, marketplace, produtos físicos) adicionando tabelas ou campos conforme necessário, mantendo a estrutura central.


(Ref: DB Design Principles, ID core_db_design_001)


## Estratégias para Consultas Comuns


O design do banco de dados suporta eficientemente diversas consultas analíticas e operacionais comuns. Abaixo estão exemplos de como os dados podem ser consultados para obter insights de negócio, demonstrando a aplicabilidade dos princípios de design.


### 1. Relatórios Financeiros Unificados


Exemplo: Receita total por mês, incluindo todas as plataformas:


```sql
SELECT
    DATE_TRUNC('month', t.order_date) AS month,
    t.payment_gateway,
    SUM(t.offer_price) AS gross_revenue,
    SUM(t.platform_fee_amount) AS platform_fees,
    SUM(t.partner_commission_amount) AS commission_fees,
    SUM(t.producer_net_amount) AS net_revenue,
    t.currency_code
FROM
    transactions t
JOIN
    transaction_statuses ts ON t.status_id = ts.id
WHERE
    ts.status = 'Aprovada'
    AND t.order_date BETWEEN '2023-01-01' AND '2023-12-31'
GROUP BY
    DATE_TRUNC('month', t.order_date), t.payment_gateway, t.currency_code
ORDER BY
    month, t.payment_gateway;
```
(Ref: DB Design Principles, ID core_db_design_001)


### 2. Análise de Assinaturas e Receita Recorrente


Exemplo: Cálculo de MRR (Monthly Recurring Revenue):


```sql
SELECT
    DATE_TRUNC('month', t.order_date) AS month,
    COUNT(DISTINCT s.id) AS active_subscriptions,
    SUM(
        CASE
            WHEN p.recurrence_period = 'MONTH' THEN t.offer_price
            WHEN p.recurrence_period = 'YEAR' THEN t.offer_price / 12
            WHEN p.recurrence_period = 'QUARTER' THEN t.offer_price / 3
            ELSE t.offer_price -- Considerar outros períodos ou lançamentos únicos em assinaturas
        END
    ) AS monthly_recurring_revenue
FROM
    subscriptions s
JOIN
    transactions t ON s.id = t.subscription_id -- Junta transações recorrentes à assinatura
JOIN
    transaction_statuses ts ON t.status_id = ts.id
JOIN
    plans p ON s.plan_id = p.id
JOIN
    transaction_statuses subts ON s.status_id = subts.id
WHERE
    ts.status = 'Aprovada' -- Considerar apenas transações aprovadas
    AND subts.status = 'Ativa' -- Considerar apenas assinaturas ativas no período
    AND t.is_subscription = true -- Apenas transações de recorrência
    AND t.order_date BETWEEN '2023-01-01' AND '2023-12-31' -- Filtro por período
GROUP BY
    DATE_TRUNC('month', t.order_date)
ORDER BY
    month;
```
(Ref: DB Design Principles, ID core_db_design_001)


### 3. Análise de Clientes Unificada


Exemplo: Valor por cliente (LTV) considerando múltiplas plataformas:


```sql
SELECT
    c.id,
    c.email,
    c.name,
    COUNT(DISTINCT t.id) AS transactions_count,
    SUM(t.offer_price) AS total_spend,
    MIN(t.order_date) AS first_purchase_date,
    MAX(t.order_date) AS last_purchase_date,
    COUNT(DISTINCT t.payment_gateway) AS platforms_used
FROM
    customers c
JOIN
    transactions t ON c.id = t.customer_id
JOIN
    transaction_statuses ts ON t.status_id = ts.id
WHERE
    ts.status = 'Aprovada'
GROUP BY
    c.id, c.email, c.name
ORDER BY
    total_spend DESC;
```
(Ref: DB Design Principles, ID core_db_design_001)


### 4. Performance de Marketing Unificada


Exemplo: Conversões e receita por campanha:


```sql
SELECT
    puh.utm_campaign,
    puh.utm_source,
    puh.utm_medium,
    COUNT(DISTINCT t.id) AS conversions,
    SUM(t.offer_price) AS revenue,
    SUM(t.offer_price) / COUNT(DISTINCT t.id) AS average_order_value
FROM
    platform_utm_history puh
JOIN
    transactions t ON puh.transaction_id = t.id
JOIN
    transaction_statuses ts ON t.status_id = ts.id
WHERE
    ts.status = 'Aprovada'
    AND t.order_date BETWEEN '2023-01-01' AND '2023-12-31'
GROUP BY
    puh.utm_campaign, puh.utm_source, puh.utm_medium
ORDER BY
    revenue DESC;
```
(Ref: DB Design Principles, ID core_db_design_001)


## Melhores Práticas de Uso e Manutenção


Para garantir a integridade e performance do banco de dados ao longo do tempo, recomenda-se seguir estas práticas:


### 1. Manutenção Regular


-   **VACUUM**: Programar VACUUM ANALYZE regularmente para recuperar espaço e atualizar estatísticas.
-   **Reconstrução de Índices**: Reconstruir índices fragmentados periodicamente (`REINDEX`).
-   **Monitoramento de Bloat**: Verificar e corrigir tabelas e índices inchados.


### 2. Consultas Eficientes


-   **Evitar SELECT ***: Sempre listar apenas as colunas necessárias.
-   **Limit em Consultas Grandes**: Usar LIMIT/OFFSET para paginar resultados grandes.
-   **Joins Eficientes**: Garantir que joins sejam feitos em colunas indexadas.
-   **Subqueries vs CTEs**: Preferir CTEs (WITH) para melhor legibilidade e, em muitos casos, performance.
-   **EXPLAIN ANALYZE**: Utilizar para entender e otimizar o plano de execução de consultas lentas.


### 3. Transações e Concorrência


-   **Transações Curtas**: Evitar transações longas que bloqueiam recursos.
-   **Isolamento Apropriado**: Escolher o nível de isolamento adequado para cada operação.
-   **Evitar Deadlocks**: Acessar tabelas sempre na mesma ordem em transações complexas.


### 4. Monitoramento Contínuo


-   **Queries Lentas**: Monitorar e otimizar consultas que levam mais tempo que o esperado (usando `pg_stat_statements`).
-   **Utilização de Recursos**: Acompanhar uso de CPU, memória, IO e espaço em disco.
-   **Locks e Waits**: Identificar e resolver contenções por bloqueios.
-   **Crescimento de Dados**: Planejar capacidade baseado em tendências de crescimento.


### 5. Documentação


-   **Manter Comentários Atualizados**: Garantir que novos campos e tabelas tenham comentários descritivos.
-   **Documentar Queries Complexas**: Adicionar comentários explicativos em queries críticas ou complexas.
-   **Catálogo de Relatórios**: Manter biblioteca de queries frequentemente utilizadas com documentação.


(Ref: DB Design Principles, ID core_db_design_001)


## Recursos e Referências


### Documentação Relacionada


-   **[Arquitetura do Banco de Dados Unificado](core_db_arch_001)**: Visão geral e organização em domínios.
-   **[Estratégia de Integração Multiplataforma](platform_integration_strategy_001)**: Detalhes sobre como dados de múltiplas plataformas são integrados e normalizados.
-   **[Glossário de Termos do Banco de Dados Unificado](core_db_glossary_001)**: Definições de termos técnicos e de negócio.
-   **[Referência Detalhada do Schema do Banco de Dados](ref_db_schema_001)**: Definições SQL completas de todos os objetos.
-   **[Domínio Ecossistema de Clientes](domain_customers_ecosystem_001)**: Detalhes sobre o domínio de clientes.
-   **[Domínio Catálogo de Produtos](domain_products_catalog_001)**: Detalhes sobre o domínio de produtos.
-   **[Domínio Ciclo de Vida de Transações](domain_transactions_lifecycle_001)**: Detalhes sobre o domínio de transações.
-   **[Domínio Gerenciamento de Assinaturas](domain_subscriptions_management_001)**: Detalhes sobre o domínio de assinaturas.
-   **[Domínio Sistema de Comissionamento](domain_commission_system_001)**: Detalhes sobre o domínio de comissões.
-   **[Domínio Detalhes de Integração com Plataformas](domain_platform_integration_details_001)**: Detalhes sobre o domínio de integração com plataformas.


### Recomendações de Ferramentas


-   **Monitoramento**: pgAdmin, pg_stat_statements, pgBadger, Datadog, New Relic.
-   **Manutenção**: pg_repack, pg_stat_monitor.
-   **Backup**: pg_dump, Barman, Cloud Provider Managed Backups.
-   **Migrations**: Flyway, Liquibase.


### Contatos e Suporte


Para questões relacionadas ao design e manutenção do banco de dados:


-   **Responsável Técnico**: [Nome do DBA ou Arquiteto de Dados]
-   **Email de Suporte**: [Email da Equipe de Dados]
-   **Documentação Interna**: [Link para Wiki ou Documentação Expandida]


(Ref: DB Design Principles, ID core_db_design_001)


## Conclusão


Os princípios de design delineados neste documento formam a espinha dorsal do banco de dados `joaocastanheira_bancodedados`. Ao seguir estas diretrizes para chaves, normalização, nomenclatura, tipos de dados, tratamento de nulos, integridade referencial, indexação, segurança e evolução, garantimos que o banco de dados permaneça uma base de dados confiável, eficiente e adaptável para suportar as necessidades de negócio atuais e futuras. As estratégias de performance, segurança e manutenção, juntamente com as melhores práticas de uso, são essenciais para a longevidade e sucesso deste sistema unificado.


Um princípio fundamental que perpassa todos os aspectos deste design é a capacidade de integração e normalização de dados de múltiplas plataformas, conforme detalhado no documento **[Estratégia de Integração Multiplataforma](platform_integration_strategy_001.md)**. Esta abordagem permite que o sistema evolua organicamente para incorporar novas fontes de dados sem comprometer sua estrutura central.


(Ref: DB Design Principles, ID core_db_design_001)
```