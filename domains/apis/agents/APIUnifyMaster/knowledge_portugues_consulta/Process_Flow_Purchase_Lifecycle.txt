# `Process_Flow_Purchase_Lifecycle.md`


Fluxo de Processo: Ciclo de Vida de Compras


```markdown
---
title: "Fluxo de Processo: Ciclo de Vida de Compras"
id: "process_flow_purchase_lifecycle_001"
doc_type: "process_flow"
doc_version: "1.2"
date_created: "2025-04-23"
date_updated: "2025-04-23"
author: "João Castanheira"
db_name: "joaocastanheira_bancodedados"
db_version: "1.0"
doc_status: "Aprovado"
environment: "Produção"
related_docs: [
  "core_db_arch_001", 
  "domain_transaction_management_001", 
  "platform_integration_strategy_001",
  "process_flow_subscription_lifecycle_001",
  "analytics_examples_001"
]
tables_in_focus: [
  "transactions",
  "transaction_items",
  "transaction_status_history",
  "transaction_fees",
  "platform_commission",
  "platform_transaction_payment_history",
  "platform_sale_offer_history",
  "platform_software_invoice_history"
]
embedding_guide_concepts: [
  "fluxo de compra", 
  "ciclo de vida de transação", 
  "processamento de pagamento", 
  "rastreamento de status", 
  "reembolso", 
  "comissões", 
  "taxas de plataforma", 
  "métodos de pagamento",
  "unificação de transações",
  "transações multiplataforma",
  "compras entre plataformas",
  "histórico de transações"
]
---


# Fluxo de Processo: Ciclo de Vida de Compras


## Visão Geral do Processo


Este documento descreve o ciclo de vida completo de uma transação de compra no sistema, desde seu registro inicial até seus possíveis estados finais. O fluxo abrange o processamento de pagamentos, distribuição de comissões, geração de documentos fiscais e possíveis eventos pós-venda como reembolsos.


O ciclo de vida de compras foi projetado para unificar transações provenientes de múltiplas plataformas em um fluxo padronizado, permitindo tratamento e análise consistentes independentemente da origem. Cada transação preserva sua identificação original da plataforma através da combinação de `transaction_id` e `payment_gateway`, enquanto recebe um ID sequencial interno para referência no sistema.


Este processo se integra com o **[Fluxo de Ciclo de Vida de Assinaturas](process_flow_subscription_lifecycle_001.md)** nos casos de produtos recorrentes, onde a compra inicial gera uma assinatura que terá suas próprias transações recorrentes.


(Ref: Ciclo de Vida de Compras, ID process_flow_purchase_lifecycle_001)


## Estágios do Ciclo de Vida


O ciclo de vida de uma compra passa pelos seguintes estágios principais, independentemente da plataforma de origem. A normalização entre os diferentes vocabulários e fluxos das plataformas é realizada conforme descrito na **[Estratégia de Integração Multiplataforma - Mapeamento de Status de Transação](platform_integration_strategy_001.md#mapeamento-de-status-de-transação)**.


### 1. Iniciação


**Descrição:** Uma nova transação é criada quando um cliente finaliza um processo de checkout em qualquer plataforma integrada.


**Eventos típicos:**
- Cliente seleciona produto ou plano
- Escolhe método de pagamento
- Fornece informações necessárias
- Confirma compra


**Estados iniciais possíveis:**
- `Pendente` - Aguardando confirmação de pagamento
- `Processando` - Pagamento em processamento
- `Aguardando Pagamento` - Boleto gerado ou PIX pendente


**Dados capturados neste estágio:**
- Informações do cliente
- Produto/plano/oferta selecionado
- Método de pagamento escolhido
- Valor total e condições (parcelamento, etc.)
- Dados de rastreamento (UTM, source, etc.)
- Snapshot da oferta no momento da compra


**Ações do sistema:**
1. Recebe webhook ou notificação da plataforma
2. Normaliza os dados conforme modelo unificado
3. Verifica se cliente já existe (por email) ou cria novo
4. Cria registro na tabela `transactions`
5. Cria registro(s) na tabela `transaction_items`
6. Registra estado inicial em `transaction_status_history`
7. Armazena snapshot da oferta em `platform_sale_offer_history`
8. Armazena dados de pagamento em `platform_transaction_payment_history`


### 2. Processamento de Pagamento


**Descrição:** O sistema de pagamento processa a transação e atualiza seu status.


**Eventos típicos:**
- Processadora de pagamento autoriza transação
- Confirmação de pagamento (PIX, boleto)
- Rejeição por insuficiência de fundos
- Rejeição por suspeita de fraude


**Estados possíveis após processamento:**
- `Aprovada` - Pagamento confirmado e aprovado
- `Recusada` - Pagamento recusado pelo sistema ou banco
- `Aguardando Análise` - Em análise de risco
- `Cancelada` - Cancelada antes da aprovação


**Dados atualizados neste estágio:**
- Status da transação
- Detalhes do processamento (código de autorização, etc.)
- Informações sobre rejeição (quando aplicável)


**Ações do sistema:**
1. Recebe notificação de atualização de status
2. Atualiza o status na tabela `transactions`
3. Registra novo status em `transaction_status_history`
4. Atualiza `platform_transaction_payment_history` com detalhes do processamento
5. Se recusada, pode iniciar fluxo de recuperação conforme configuração


### 3. Pós-Aprovação


**Descrição:** Após aprovação do pagamento, várias ações são executadas para completar o processo de venda.


**Eventos típicos:**
- Cálculo e registro de comissões
- Cálculo e registro de taxas da plataforma
- Liberação de acesso ao produto/serviço
- Início de assinatura (se aplicável)
- Emissão de nota fiscal (se configurado)


**Estados possíveis:**
- `Aprovada` - Continua com status de aprovada
- `Completa` - Todo o processamento pós-venda foi concluído


**Dados registrados neste estágio:**
- Comissões (valores, beneficiários)
- Taxas (valores, tipos)
- Detalhes de nota fiscal (quando aplicável)
- Vínculo com assinatura (quando aplicável)


**Ações do sistema:**
1. Calcula e registra comissões em `platform_commission`
2. Calcula e registra taxas em `transaction_fees`
3. Se for compra de assinatura, cria registro em `subscriptions`
4. Solicita emissão de nota fiscal (quando configurado)
5. Registra dados da nota fiscal em `platform_software_invoice_history`


### 4. Eventos Pós-Venda


**Descrição:** Após a conclusão da venda, eventos adicionais podem ocorrer durante o período de garantia.


**Eventos típicos:**
- Solicitação de reembolso
- Disputa no cartão de crédito (chargeback)
- Cancelamento dentro do período de garantia
- Recompra ou upgrade


**Estados possíveis:**
- `Em Disputa` - Chargeback ou contestação iniciada
- `Reembolsada` - Reembolso efetuado
- `Parcialmente Reembolsada` - Reembolso parcial
- `Cancelada` - Cancelada após aprovação


**Dados atualizados neste estágio:**
- Status da transação
- Motivo do reembolso/cancelamento
- Data e detalhes do reembolso
- Status das comissões (estornadas ou mantidas)


**Ações do sistema:**
1. Recebe notificação de evento pós-venda
2. Atualiza status da transação
3. Registra novo status e motivo em `transaction_status_history`
4. Atualiza status de comissões quando aplicável
5. Se for assinatura, pode atualizar status na tabela `subscriptions`


(Ref: Ciclo de Vida de Compras, ID process_flow_purchase_lifecycle_001)


## Fluxos de Processo Principais


### 1. Fluxo de Vendas (Transação Única)


Este fluxo representa a compra de um produto ou oferta que não é uma assinatura recorrente.
```
[customers] <-- (realiza) -- [transactions] -- (contém) --> [transaction_items] -- (refere-se a) --> [products/offers/plans]
                                   |
                                   |-- (registra status) --> [transaction_status_history]
                                   |
                                   |-- (cobra) --> [transaction_fees]
                                   |
                                   |-- (distribui comissão) --> [platform_commission] --> [commission_participants]
                                   |
                                   |-- (detalhes de pagamento) --> [platform_transaction_payment_history]
                                   |
                                   |-- (detalhes UTM) --> [platform_utm_history]
                                   |
                                   |-- (detalhes fiscais) --> [platform_software_invoice_history]
                                   |
                                   |-- (snapshot oferta) --> [platform_sale_offer_history]
```
**Descrição**: Um Cliente realiza uma Transação. Esta Transação contém Itens que referenciam Produtos, Ofertas ou Planos. A Transação gera registros de Histórico de Status, Taxas, Comissões (para Participantes), e vários detalhes específicos da plataforma (pagamento, UTM, nota fiscal, snapshot da oferta).


### 2. Fluxo de Assinatura e Recorrência


Este fluxo descreve a criação de uma assinatura e suas transações recorrentes associadas.
```
[customers] <-- (assina) -- [subscriptions] -- (define) --> [plans] -- (oferece) --> [products]
                                   |
                                   |-- (registra status) --> [subscription_status_history]
                                   |
                                   |-- (origina transações) --> [transactions] (recorrência)
```
**Descrição**: Um Cliente assina um Plano, criando uma Assinatura. A Assinatura registra seu Histórico de Status e origina Transações recorrentes em intervalos definidos. Cada transação recorrente segue o Fluxo de Vendas descrito acima, mas está explicitamente ligada à Assinatura pai.


### 3. Fluxo de Comissionamento


Este fluxo detalha como as comissões são atribuídas e registradas.
```
[transactions] -- (distribui comissão) --> [platform_commission] -- (recebe) --> [commission_participants]
                                                                                       |
                                                                                       |-- (tem) --> [participant_addresses]
```
**Descrição**: Uma Transação (seja única ou recorrente) pode distribuir Comissões para Participantes (produtores, afiliados, etc.), registrando o valor e a origem da comissão na tabela `platform_commission`. Os detalhes e endereços dos participantes são armazenados separadamente.


## Diagrama de Status


```mermaid
stateDiagram-v2
    [*] --> Pendente: Checkout iniciado
    Pendente --> Processando: Pagamento iniciado
    Pendente --> Aguardando_Pagamento: Boleto/PIX gerado
    Processando --> Aprovada: Pagamento confirmado
    Processando --> Recusada: Pagamento rejeitado
    Processando --> Aguardando_Análise: Em análise de risco
    Aguardando_Pagamento --> Aprovada: Pagamento confirmado
    Aguardando_Pagamento --> Expirada: Prazo vencido
    Aguardando_Análise --> Aprovada: Análise positiva
    Aguardando_Análise --> Recusada: Análise negativa
    Aprovada --> Completa: Processamento concluído
    Aprovada --> Em_Disputa: Chargeback iniciado
    Aprovada --> Reembolsada: Reembolso solicitado
    Em_Disputa --> Reembolsada: Disputa perdida
    Em_Disputa --> Aprovada: Disputa ganha
    Completa --> Reembolsada: Reembolso dentro da garantia
    Reembolsada --> [*]
    Recusada --> [*]
    Expirada --> [*]
    Completa --> [*]
```


Este diagrama apresenta a normalização dos diversos fluxos de status existentes nas diferentes plataformas para um modelo unificado. Para detalhes sobre como os status específicos de cada plataforma são mapeados para este modelo, consulte a **[Estratégia de Integração Multiplataforma - Mapeamento de Status de Transação](platform_integration_strategy_001.md#mapeamento-de-status-de-transação)**.


(Ref: Ciclo de Vida de Compras, ID process_flow_purchase_lifecycle_001)


## Processamento de Pagamentos


### Métodos de Pagamento Suportados


O sistema suporta diversos métodos de pagamento, todos normalizados através do tipo enumerado `payment_method_enum`:


- `credit_card` - Cartão de Crédito
- `debit_card` - Cartão de Débito
- `boleto` - Boleto Bancário à vista
- `boleto_installment` - Boleto Bancário parcelado
- `pix` - PIX
- `bank_transfer` - Transferência Bancária
- `paypal` - PayPal
- `digital_wallet` - Carteiras Digitais (Google Pay, Apple Pay)
- `cryptocurrency` - Criptomoedas


O processo de normalização dos métodos de pagamento das diferentes plataformas para estes valores padronizados é realizado conforme descrito na **[Estratégia de Integração Multiplataforma - Mapeamento de Métodos de Pagamento](platform_integration_strategy_001.md#mapeamento-de-métodos-de-pagamento)**.


### Tipos de Pagamento


Além do método, o sistema classifica os pagamentos em dois tipos principais através do tipo enumerado `payment_type_enum`:


- `SINGLE_PAYMENT` - Pagamento único (à vista)
- `INSTALLMENT_PAYMENT` - Pagamento parcelado


Para pagamentos parcelados, o campo `installments_number` na tabela `transactions` indica o número de parcelas.


### Processamento por Plataforma


Cada plataforma integrada possui seu próprio fluxo de processamento de pagamento e sistema de notificação. O sistema unifica estes diferentes fluxos através de adaptadores específicos que:


1. Recebem notificações (webhooks) da plataforma
2. Normalizam os dados conforme o modelo unificado
3. Atualizam o status da transação e o histórico de pagamentos
4. Rastreiam informações específicas da plataforma em campos apropriados


Os detalhes de implementação para cada plataforma estão documentados na **[Estratégia de Integração Multiplataforma - Processamento de Eventos de Pagamento](platform_integration_strategy_001.md#processamento-de-eventos-de-pagamento)**.


(Ref: Ciclo de Vida de Compras, ID process_flow_purchase_lifecycle_001)


## Comissões e Taxas


### Cálculo e Distribuição de Comissões


Após a aprovação de uma transação, o sistema calcula e registra as comissões para os diferentes participantes:


1. **Produtores**: Criadores do produto, recebem a maior parte da receita líquida
2. **Afiliados**: Promotores que geraram a venda, recebem comissão sobre o valor
3. **Coprodutores**: Parceiros que contribuíram para o produto, recebem percentual da receita


As comissões são calculadas de acordo com as regras configuradas em cada plataforma e registradas na tabela `platform_commission`.


```sql
-- Exemplo de registro de comissões
INSERT INTO platform_commission (
    transaction_id, participant_id, amount, currency_code, source
)
VALUES
    (123, 456, 150.00, 'BRL', 'PRODUCER'),     -- Valor para o produtor
    (123, 789, 50.00, 'BRL', 'AFFILIATE');     -- Valor para o afiliado
```


### Taxas de Plataforma


Cada transação está sujeita a taxas cobradas pela plataforma de origem, que são registradas na tabela `transaction_fees`:


```sql
-- Exemplo de registro de taxas
INSERT INTO transaction_fees (
    transaction_id, fee_type, total_amount, fee_currency_code, 
    base_amount, fixed_amount
)
VALUES
    (123, 'PLATFORM_FEE', 25.00, 'BRL', 20.00, 5.00);    -- Taxa da plataforma
```


### Valores Calculados na Transação


A tabela `transactions` armazena os valores agregados importantes para análise financeira:


- `base_price`: Preço base original do produto/plano
- `offer_price`: Preço efetivo da oferta aplicada na transação
- `customer_paid_amount`: Valor total pago pelo cliente (inclui juros de parcelamento)
- `platform_fee_amount`: Total de taxas cobradas pela plataforma
- `distributable_amount`: Valor após dedução das taxas (`offer_price - platform_fee_amount`)
- `partner_commission_amount`: Total de comissões pagas a parceiros (afiliados, coprodutores)
- `producer_net_amount`: Valor líquido final para o produtor (`distributable_amount - partner_commission_amount`)


Estes campos permitem análises financeiras detalhadas em todo o ciclo de vida da transação.


(Ref: Ciclo de Vida de Compras, ID process_flow_purchase_lifecycle_001)


## Tracking e Rastreabilidade


### Rastreamento de Origem


O sistema captura informações sobre a origem da transação:


- `tracking_source`: Identifica a fonte de tráfego (ex: "Facebook", "Email", "Instagram")
- `tracking_sck`: Código de rastreamento específico da campanha


Além disso, dados UTM completos são armazenados na tabela `platform_utm_history`:


```sql
-- Exemplo de registro de UTMs
INSERT INTO platform_utm_history (
    transaction_id, utm_source, utm_medium, utm_campaign, utm_term, utm_content
)
VALUES
    (123, 'facebook', 'cpc', 'black_friday_2023', 'curso online', 'banner_1');
```


### Histórico de Status


Cada mudança de status da transação é registrada na tabela `transaction_status_history`, criando um registro detalhado de todo o ciclo de vida:


```sql
-- Exemplo de histórico de status
INSERT INTO transaction_status_history (
    transaction_id, status_id, change_date, reason
)
VALUES
    (123, 1, '2023-11-20 10:00:00', 'Checkout iniciado'),
    (123, 2, '2023-11-20 10:05:00', 'Pagamento aprovado pelo gateway'),
    (123, 5, '2023-11-25 14:30:00', 'Reembolso solicitado pelo cliente - insatisfação com o produto');
```


Este histórico permite auditorias detalhadas e análises do funil de vendas.


### Rastreabilidade entre Plataformas


O sistema mantém a rastreabilidade completa até a plataforma de origem através dos campos:


- `transaction_id`: ID original da transação na plataforma
- `payment_gateway`: Nome da plataforma onde a transação foi processada
- `gateway_transaction_id`: ID específico no gateway de pagamento (quando disponível)


Esta abordagem permite consultas tanto pelo ID interno quanto pelos identificadores originais das plataformas.


(Ref: Ciclo de Vida de Compras, ID process_flow_purchase_lifecycle_001)


## Transações e Assinaturas


### Relação entre Transação Inicial e Assinatura


Quando uma compra resulta na criação de uma assinatura, estabelece-se uma relação importante:


1. A transação inicial é registrada normalmente com `is_subscription = true`
2. Uma assinatura é criada na tabela `subscriptions`
3. A transação inicial referencia a assinatura através do campo `subscription_id`
4. A assinatura referencia a transação inicial através do campo `initial_transaction_id`


```sql
-- Exemplo de transação que resulta em assinatura
INSERT INTO transactions (
    transaction_id, payment_gateway, /* outros campos */,
    is_subscription, subscription_id, platform_subscription_id
)
VALUES (
    'TRANS123', 'Plataforma', /* outros valores */,
    true, 456, 'SUB789'
);


INSERT INTO subscriptions (
    subscription_id, payment_gateway, initial_transaction_id, /* outros campos */
)
VALUES (
    'SUB789', 'Plataforma', 'TRANS123', /* outros valores */
);
```


### Transações Recorrentes


Cobranças recorrentes de assinaturas seguem um fluxo semelhante ao de transações iniciais, com algumas diferenças:


1. São criadas automaticamente pelo sistema da plataforma no ciclo de cobrança
2. Têm `is_subscription = true` e `subscription_id` preenchido
3. O campo `recurrence_number` indica qual recorrência está sendo cobrada (2ª, 3ª, etc.)
4. Seguem o mesmo ciclo de vida de status (pendente → aprovada → etc.)


Para mais detalhes sobre o ciclo de vida específico das assinaturas e suas recorrências, consulte o **[Fluxo de Ciclo de Vida de Assinaturas](process_flow_subscription_lifecycle_001.md)**.


(Ref: Ciclo de Vida de Compras, ID process_flow_purchase_lifecycle_001)


## Implementação por Plataforma


### Adaptação para Diferentes Plataformas


O sistema foi projetado para processar eventos de transação de múltiplas plataformas, usando adaptadores específicos para cada uma delas. Abaixo está uma descrição genérica do processo:


**Fonte de dados**: APIs das plataformas e webhooks


**Mapeamento de status**:
- Cada plataforma utiliza sua própria terminologia para status de transação
- O sistema mapeia esses status para o conjunto normalizado usando tabelas de referência
- Exemplos comuns incluem mapeamento de status como "aprovado", "pago", "recusado", "reembolsado", etc.


**Eventos capturados**:
- Eventos de criação de transação
- Eventos de atualização de status
- Eventos de pagamento
- Eventos de reembolso ou chargeback
- Eventos relacionados a assinaturas


**Particularidades**:
- Diferentes plataformas usam termos distintos para transações (ex: "compras", "checkouts")
- Os sistemas de comissionamento variam significativamente entre plataformas
- Algumas plataformas têm gestão própria de assinaturas, outras usam gateways terceirizados


Para detalhes completos sobre os adaptadores específicos para cada plataforma, incluindo transformação de dados, mapeamento de campos e tratamento de particularidades, consulte a **[Estratégia de Integração Multiplataforma - Implementação por Plataforma](platform_integration_strategy_001.md#implementação-por-plataforma)**.


(Ref: Ciclo de Vida de Compras, ID process_flow_purchase_lifecycle_001)


## Consultas e Análises Comuns


### Análise de Vendas por Status


```sql
-- Visão geral de transações por status no período
SELECT 
    ts.status AS status_name,
    COUNT(t.id) AS transaction_count,
    SUM(t.offer_price) AS total_value
FROM transactions t
JOIN transaction_statuses ts ON t.status_id = ts.id
WHERE t.order_date BETWEEN '2023-10-01' AND '2023-10-31'
GROUP BY ts.status
ORDER BY total_value DESC;
```


### Desempenho por Plataforma


```sql
-- Comparação de desempenho entre plataformas
SELECT 
    t.payment_gateway AS platform,
    COUNT(t.id) AS sales_count,
    SUM(t.offer_price) AS gross_revenue,
    SUM(t.producer_net_amount) AS net_revenue,
    AVG(t.offer_price) AS avg_ticket,
    SUM(t.platform_fee_amount) AS total_fees,
    SUM(t.platform_fee_amount) / SUM(t.offer_price) * 100 AS fee_percentage
FROM transactions t
WHERE t.status_id = (SELECT id FROM transaction_statuses WHERE status = 'Aprovada')
AND t.order_date BETWEEN '2023-01-01' AND '2023-12-31'
GROUP BY t.payment_gateway
ORDER BY gross_revenue DESC;
```


### Análise de Métodos de Pagamento


```sql
-- Distribuição de métodos de pagamento
SELECT 
    t.payment_method::text AS payment_method,
    COUNT(t.id) AS transaction_count,
    SUM(t.offer_price) AS total_value,
    ROUND((COUNT(t.id) * 100.0 / (SELECT COUNT(*) FROM transactions 
                                 WHERE status_id = (SELECT id FROM transaction_statuses WHERE status = 'Aprovada')
                                 AND order_date BETWEEN '2023-01-01' AND '2023-12-31')), 2) AS percentage
FROM transactions t
WHERE t.status_id = (SELECT id FROM transaction_statuses WHERE status = 'Aprovada')
AND t.order_date BETWEEN '2023-01-01' AND '2023-12-31'
GROUP BY t.payment_method
ORDER BY transaction_count DESC;
```


### Taxa de Reembolso por Produto


```sql
-- Taxa de reembolso por produto
SELECT 
    p.name AS product_name,
    p.platform_origin,
    COUNT(DISTINCT CASE WHEN ts.status = 'Aprovada' THEN t.id END) AS approved_count,
    COUNT(DISTINCT CASE WHEN ts.status = 'Reembolsada' THEN t.id END) AS refunded_count,
    ROUND((COUNT(DISTINCT CASE WHEN ts.status = 'Reembolsada' THEN t.id END) * 100.0 / 
          NULLIF(COUNT(DISTINCT CASE WHEN ts.status IN ('Aprovada', 'Reembolsada', 'Completa') THEN t.id END), 0)), 2) AS refund_rate
FROM transactions t
JOIN transaction_items ti ON t.id = ti.transaction_id
JOIN products p ON ti.product_id = p.id
JOIN transaction_statuses ts ON t.status_id = ts.id
WHERE t.order_date BETWEEN '2023-01-01' AND '2023-12-31'
GROUP BY p.id, p.name, p.platform_origin
HAVING COUNT(DISTINCT CASE WHEN ts.status IN ('Aprovada', 'Reembolsada', 'Completa') THEN t.id END) > 10
ORDER BY refund_rate DESC;
```


Para mais exemplos de análises avançadas que podem ser realizadas com estes dados, consulte o documento **[Exemplos de Análises e Relatórios](analytics_examples_001.md)**.


(Ref: Ciclo de Vida de Compras, ID process_flow_purchase_lifecycle_001)


## Gerenciamento de Reembolsos e Disputas


### Fluxo de Reembolso


O processo de reembolso segue estas etapas:


1. **Solicitação**: Cliente solicita reembolso (diretamente na plataforma ou via suporte)
2. **Avaliação**: Verificação se está dentro do período de garantia (`under_warranty = true`)
3. **Aprovação**: Autorização do reembolso na plataforma de origem
4. **Processamento**: Plataforma processa o reembolso e envia notificação
5. **Atualização**: Sistema atualiza o status da transação para `Reembolsada`
6. **Ajustes financeiros**: 
   - Estorno de comissões (quando aplicável)
   - Registro do motivo do reembolso
   - Atualização do status da assinatura (quando aplicável)


### Tratamento de Chargebacks (Disputas)


Os chargebacks (contestações no cartão de crédito) seguem um fluxo semelhante, mas com particularidades:


1. **Notificação**: Sistema recebe notificação de chargeback da plataforma
2. **Registro**: Status da transação é alterado para `Em Disputa`
3. **Contencioso**: Pode haver processo de contestação com envio de documentação
4. **Resolução**: Baseada no resultado da disputa:
   - Se ganha, retorna para status `Aprovada`
   - Se perdida, muda para `Reembolsada` (chargeback efetivado)


### Impacto nas Métricas


Reembolsos e chargebacks afetam diversas métricas financeiras:


- Redução da receita bruta e líquida
- Aumento da taxa de reembolso/chargeback
- Possível impacto em comissões pagas a afiliados
- Ajustes em relatórios financeiros e contábeis


O sistema mantém tanto os valores originais quanto os ajustados após reembolsos, permitindo análises precisas da saúde financeira do negócio.


(Ref: Ciclo de Vida de Compras, ID process_flow_purchase_lifecycle_001)


## Melhores Práticas e Considerações


### Gestão Eficiente do Ciclo de Vida


1. **Monitoramento de funil**:
   - Rastrear conversão em cada estágio do ciclo de vida
   - Identificar gargalos no processo de pagamento
   - Analisar taxas de abandono e rejeição


2. **Prevenção de fraudes**:
   - Monitorar padrões suspeitos de comportamento
   - Analisar taxas de chargeback por segmento
   - Implementar verificações adicionais para transações de alto risco


3. **Otimização de recuperação**:
   - Implementar fluxos de recuperação para pagamentos rejeitados
   - Configurar lembretes para boletos pendentes
   - Oferecer alternativas de pagamento em caso de falha


4. **Gestão de garantia**:
   - Monitorar reembolsos próximos ao fim do período de garantia
   - Analisar motivos de reembolso para melhoria de produtos
   - Implementar pesquisas pós-reembolso para feedback


### Consistência entre Plataformas


A unificação de transações de múltiplas plataformas requer atenção especial:


1. **Reconciliação financeira**:
   - Verificar regularmente se todos os valores estão consistentes entre as plataformas e o banco unificado
   - Implementar rotinas de validação para detectar discrepâncias


2. **Mapeamento de status**:
   - Manter atualizados os mapeamentos entre status específicos das plataformas e o modelo unificado
   - Documentar casos especiais ou exceções no tratamento de status


3. **Rastreamento de eventos**:
   - Garantir que eventos críticos das plataformas sejam capturados mesmo em caso de falhas temporárias
   - Implementar sistema de retry para notificações não processadas


(Ref: Ciclo de Vida de Compras, ID process_flow_purchase_lifecycle_001)


## Implementação Técnica Detalhada


### Fase 1: Recebimento e Normalização do Evento de Venda


O processo é iniciado quando o sistema recebe uma notificação de venda (geralmente via webhook) de uma plataforma externa.


1. **Recepção do Evento:** Um endpoint específico do sistema recebe o payload JSON da plataforma.
2. **Validação e Autenticação:** O payload é validado (ex: verificação de assinatura do webhook) e autenticado para garantir que é legítimo.
3. **Normalização de Dados:** O adaptador específico da plataforma transforma os dados brutos da plataforma para o modelo de dados padronizado do sistema. Isso inclui mapear status, métodos de pagamento, estruturas de preço, etc., utilizando, por exemplo, a tabela `platform_status_mapping` para normalizar os status.
4. **Registro Temporário/Fila:** O evento normalizado pode ser registrado temporariamente ou colocado em uma fila para processamento assíncrono, garantindo idempotência e resiliência.


### Fase 2: Identificação e Registro de Entidades Relacionadas


Antes de registrar a transação principal, o sistema garante que as entidades relacionadas (Cliente, Produto, Oferta, Plano) existam no banco de dados unificado ou sejam criadas.


1. **Identificar/Criar Cliente:**
    ```sql
    -- Exemplo simplificado: Obter ou criar cliente usando dados normalizados
    -- Assume que a normalização já extraiu email, nome, etc.
    INSERT INTO customers (email, name, customer_id, -- customer_id da plataforma original
                          phone_local_code, phone_number, document_type, 
                          created_at, updated_at)
    VALUES (
        'cliente@email.com', 
        'Nome do Cliente', 
        'ID_NA_PLATAFORMA', 
        '11', '999999999', 'CPF',
        NOW(), NOW()
    )
    ON CONFLICT (email) DO UPDATE SET
        name = EXCLUDED.name, 
        phone_local_code = EXCLUDED.phone_local_code, 
        phone_number = EXCLUDED.phone_number,
        document_type = EXCLUDED.document_type,
        updated_at = NOW();
    
    -- Recuperar o ID interno do cliente para usar na transação
    SELECT id FROM customers WHERE email = 'cliente@email.com';
    ```


2. **Identificar/Criar Produto, Oferta e Plano:**
    ```sql
    -- Exemplo simplificado: Obter ou criar produto usando dados normalizados
    INSERT INTO products (product_id, platform_origin, name, description, created_at, updated_at)
    VALUES (
        'PROD123', 
        'Plataforma', 
        'Nome do Produto',
        'Descrição do Produto',
        NOW(), NOW()
    )
    ON CONFLICT (product_id, platform_origin) DO UPDATE SET
        name = EXCLUDED.name,
        description = EXCLUDED.description,
        updated_at = NOW();
        
    -- Recuperar o ID interno do produto
    SELECT id FROM products WHERE product_id = 'PROD123' AND platform_origin = 'Plataforma';
    
    -- Similarmente para offers e plans
    ```


### Fase 3: Registro da Transação Principal


```sql
-- Exemplo simplificado: Inserir transação usando dados normalizados
INSERT INTO transactions (
    transaction_id, customer_id, payment_gateway, status_id, 
    payment_type, payment_method, installments_number, gateway_transaction_id,
    card_brand, card_last_digits, billet_url, billet_barcode,
    currency_code, base_price, offer_price, customer_paid_amount, 
    platform_fee_amount, distributable_amount, partner_commission_amount, 
    producer_net_amount, is_subscription, 
    tracking_source, tracking_sck, under_warranty, warranty_expire_date,
    order_date, created_at, updated_at
)
VALUES (
    'TXN_ABC', -- ID da transação na plataforma de origem
    123,       -- ID interno do cliente
    'Plataforma', 
    get_normalized_status_id('Plataforma', 'transaction', 'status_original_da_plataforma'), -- Mapeamento de status
    'SINGLE_PAYMENT'::payment_type_enum, 
    'credit_card'::payment_method_enum, 
    1,         -- Número de parcelas
    'GATEWAY_TRANS_ID', -- ID no gateway (pode ser diferente do transaction_id)
    'Visa', '1234', NULL, NULL, -- Detalhes de pagamento
    'BRL',     -- Moeda
    120.00,    -- Preço base (se disponível)
    100.00,    -- Preço da oferta
    100.00,    -- Valor pago pelo cliente (pode incluir juros)
    5.00,      -- Taxas da plataforma (inicial)
    95.00,     -- Valor distribuível (inicial)
    0.00,      -- Comissões de parceiros (inicial)
    95.00,     -- Valor líquido para o produtor (inicial)
    FALSE,     -- É assinatura?
    'facebook', 'sck123', TRUE, NOW() + INTERVAL '7 days', -- Rastreamento e garantia
    NOW(), NOW(), NOW() -- Datas
) RETURNING id; -- Retorna o ID interno da nova transação
```


### Fase 4: Registro de Detalhes da Transação


1. **Registrar Itens da Transação (`transaction_items`):**
    ```sql
    -- Exemplo: Inserir item da transação usando IDs internos
    INSERT INTO transaction_items (transaction_id, product_id, offer_id, plan_id, quantity, unit_price, created_at, updated_at)
    VALUES (
        456, -- ID interno da transação (obtido na Fase 3)
        789, -- ID interno do produto (obtido na Fase 2)
        101, -- ID interno da oferta (obtido na Fase 2)
        NULL, -- ID interno do plano (se aplicável, obtido na Fase 2)
        1, 
        100.00, -- Preço unitário no momento da compra
        NOW(), NOW()
    );
    ```


2. **Registrar Histórico de Status Inicial (`transaction_status_history`):**
    ```sql
    -- Exemplo: Registrar status inicial
    INSERT INTO transaction_status_history (transaction_id, status_id, change_date, reason, created_at, updated_at)
    VALUES (
        456, -- ID interno da transação
        get_normalized_status_id('Plataforma', 'transaction', 'status_original_da_plataforma'), -- Status normalizado
        NOW(), -- Data da mudança (idealmente, timestamp do evento da plataforma)
        'Status inicial recebido da plataforma', 
        NOW(), NOW()
    );
    ```


(Ref: Ciclo de Vida de Compras, ID process_flow_purchase_lifecycle_001)


## Conclusão


O ciclo de vida de compras representa um dos fluxos mais críticos do sistema, unificando transações de múltiplas plataformas em um modelo consistente que permite análises abrangentes e gestão centralizada. Os principais benefícios deste design incluem:


1. **Visão unificada**: Consolidação de transações de diversas plataformas com mapeamento consistente de status
2. **Rastreabilidade completa**: Histórico detalhado de cada etapa do ciclo de vida da transação
3. **Análises cross-platform**: Capacidade de comparar desempenho entre diferentes plataformas
4. **Gestão financeira precisa**: Registro detalhado de valores, taxas e comissões
5. **Adaptabilidade**: Estrutura flexível que pode incorporar novas plataformas através da **[Estratégia de Integração Multiplataforma](platform_integration_strategy_001.md)**


Este fluxo trabalha em conjunto com o **[Fluxo de Ciclo de Vida de Assinaturas](process_flow_subscription_lifecycle_001.md)** para fornecer uma visão completa do relacionamento comercial com os clientes, desde compras únicas até assinaturas recorrentes.


(Ref: Ciclo de Vida de Compras, ID process_flow_purchase_lifecycle_001)
```