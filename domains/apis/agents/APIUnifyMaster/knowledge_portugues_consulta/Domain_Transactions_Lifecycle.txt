# `Domain_Transactions_Lifecycle.md`, que detalha como as transações são gerenciadas, desde a criação até a conclusão ou cancelamento.


Domínio: Ciclo de Vida das Transações


```markdown
---
title: "Domínio: Ciclo de Vida das Transações"
id: "domain_transactions_lifecycle_001"
doc_type: "domain_functional"
doc_version: "1.1"
date_created: "2025-04-23"
date_updated: "2025-04-23"
author: "João Castanheira"
db_name: "joaocastanheira_bancodedados"
db_version: "1.0"
doc_status: "Aprovado"
environment: "Produção"
related_docs: [
  "core_db_architecture_001", 
  "platform_integration_strategy_001", 
  "domain_customers_ecosystem_001", 
  "domain_subscriptions_management_001", 
  "process_flow_purchase_lifecycle_001"
]
tables_in_domain: [
  "transactions", 
  "transaction_items", 
  "transaction_status_history", 
  "transaction_fees", 
  "transaction_statuses", 
  "platform_transaction_payment_history"
]
functional_domain: ["Financial", "Sales", "Payment Processing"]
embedding_guide_concepts: [
  "ciclo de vida transacional", 
  "fluxo de pagamento", 
  "status de transação", 
  "transação aprovada", 
  "transação recusada", 
  "histórico de status", 
  "reembolso", 
  "estorno", 
  "disputa", 
  "valor distribuível", 
  "valor líquido", 
  "itemização de transação", 
  "carrinho de compras", 
  "order bump", 
  "taxas de plataforma", 
  "normalização financeira", 
  "multi-plataforma"
]
---


# Domínio: Ciclo de Vida das Transações


## Visão Geral do Domínio


O domínio de Ciclo de Vida das Transações constitui o núcleo financeiro do sistema, responsável por registrar, processar e acompanhar cada evento de venda em todo seu trajeto - desde a iniciação do pagamento até sua conclusão final (aprovação, recusa, reembolso ou disputa). Este domínio unifica dados transacionais provenientes de múltiplas plataformas em um modelo padronizado, permitindo análises consistentes e rastreabilidade completa independentemente da origem dos dados.


Uma transação representa um evento de venda específico, que pode ser uma compra única ou uma cobrança recorrente de assinatura. Cada transação captura informações críticas:


- **Dados do comprador**: Quem realizou a compra
- **Itens adquiridos**: O que foi comprado (produtos, planos, ofertas)
- **Método de pagamento**: Como foi pago (cartão, boleto, PIX)
- **Valores financeiros**: Quanto foi pago, taxas, comissões e valores líquidos
- **Estado atual**: Situação da transação (aprovada, recusada, reembolsada)
- **Histórico de estados**: Todas as mudanças de status ao longo do tempo


O domínio implementa uma abordagem multi-tabela para gerenciar o ciclo de vida completo das transações, com suporte a cenários complexos como compras múltiplas (carrinho), order bumps, taxas diversas e histórico detalhado.


(Ref: Ciclo de Vida das Transações, ID domain_transactions_lifecycle_001)


## Estrutura do Modelo de Dados


### Diagrama de Relacionamento


```mermaid
erDiagram
    TRANSACTIONS ||--o{ TRANSACTION_ITEMS : "contém"
    TRANSACTIONS ||--o{ TRANSACTION_STATUS_HISTORY : "registra histórico"
    TRANSACTIONS ||--o{ TRANSACTION_FEES : "registra taxas"
    TRANSACTIONS ||--o{ PLATFORM_TRANSACTION_PAYMENT_HISTORY : "registra eventos de pagamento"
    TRANSACTIONS }o--|| TRANSACTION_STATUSES : "tem status atual"
    TRANSACTIONS }o--|| CUSTOMERS : "pertence a"
    TRANSACTIONS }o--o| SUBSCRIPTIONS : "pode estar associada a"
    TRANSACTION_STATUS_HISTORY }o--|| TRANSACTION_STATUSES : "referencia"
    TRANSACTION_ITEMS }o--|| PRODUCTS : "referencia"
    TRANSACTION_ITEMS }o--o| PLANS : "pode referenciar"
    TRANSACTION_ITEMS }o--o| OFFERS : "pode referenciar"
```


### Tabela Principal: `transactions`


```sql
CREATE TABLE IF NOT EXISTS transactions (
    id                        SERIAL PRIMARY KEY,
    transaction_id            VARCHAR(100) NOT NULL,               -- ID na plataforma
    customer_id               INTEGER REFERENCES customers,        -- Cliente associado
    payment_gateway           VARCHAR(100) NOT NULL,               -- Gateway de pagamento
    status_id                 INTEGER REFERENCES transaction_statuses, -- Status atual
    payment_type              payment_type_enum,                   -- Tipo de pagamento
    payment_method            payment_method_enum,                 -- Método de pagamento
    payment_engine            VARCHAR(100),                        -- Motor de pagamento
    installments_number       INTEGER,                             -- Número de parcelas
    gateway_transaction_id    VARCHAR(100),                        -- ID no gateway
    card_brand                VARCHAR(50),                         -- Bandeira do cartão
    card_last_digits          VARCHAR(4),                          -- Últimos dígitos
    billet_url                TEXT,                                -- URL do boleto
    billet_barcode            VARCHAR(100),                        -- Código de barras
    currency_code             VARCHAR(3) NOT NULL DEFAULT 'BRL',   -- Código da moeda
    base_price                NUMERIC(15, 4),                      -- Preço base original
    offer_price               NUMERIC(15, 4) NOT NULL,             -- Preço da oferta
    customer_paid_amount      NUMERIC(15, 4),                      -- Valor pago pelo cliente
    platform_fee_amount       NUMERIC(15, 4) DEFAULT 0,            -- Taxas da plataforma
    distributable_amount      NUMERIC(15, 4),                      -- Valor distribuível
    partner_commission_amount NUMERIC(15, 4) DEFAULT 0,            -- Comissões
    producer_net_amount       NUMERIC(15, 4),                      -- Valor líquido
    is_subscription           BOOLEAN DEFAULT false,               -- É assinatura?
    subscription_id           INTEGER REFERENCES subscriptions,    -- Assinatura associada
    platform_subscription_id  VARCHAR(100),                        -- ID da assinatura na plataforma
    recurrence_number         INTEGER,                             -- Número da recorrência
    tracking_source           VARCHAR(100),                        -- Fonte de tráfego
    tracking_sck              VARCHAR(100),                        -- SCK de rastreamento
    under_warranty            BOOLEAN DEFAULT false,               -- Em garantia?
    warranty_expire_date      TIMESTAMP WITH TIME ZONE,            -- Fim da garantia
    order_date                TIMESTAMP WITH TIME ZONE,            -- Data do pedido
    created_at                TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP,
    updated_at                TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP,
    CONSTRAINT uq_transaction_gateway UNIQUE (transaction_id, payment_gateway)
);
```


Esta tabela centraliza todas as informações críticas da transação, funcionando como ponto de entrada para o ciclo de vida completo de cada venda.


### Tabelas Complementares


#### Tabela: `transaction_items`


```sql
CREATE TABLE IF NOT EXISTS transaction_items (
    id             SERIAL PRIMARY KEY,
    transaction_id INTEGER NOT NULL REFERENCES transactions ON DELETE CASCADE,
    offer_id       INTEGER REFERENCES offers,              -- Oferta adquirida
    product_id     INTEGER NOT NULL REFERENCES products,   -- Produto adquirido
    plan_id        INTEGER REFERENCES plans,               -- Plano adquirido
    quantity       INTEGER DEFAULT 1,                      -- Quantidade
    unit_price     NUMERIC(15, 4),                         -- Preço unitário
    created_at     TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP,
    updated_at     TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP
);
```


Permite o registro detalhado de múltiplos itens em uma única transação, suportando carrinhos de compra e order bumps.


#### Tabela: `transaction_statuses`


```sql
CREATE TABLE IF NOT EXISTS transaction_statuses (
    id         SERIAL PRIMARY KEY,
    status     VARCHAR(50) NOT NULL UNIQUE,                -- Nome do status
    created_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP
);
```


Catálogo central que normaliza a terminologia de status de diferentes plataformas em um conjunto padronizado.


#### Tabela: `transaction_status_history`


```sql
CREATE TABLE IF NOT EXISTS transaction_status_history (
    id             SERIAL PRIMARY KEY,
    transaction_id INTEGER NOT NULL REFERENCES transactions ON DELETE CASCADE,
    status_id      INTEGER NOT NULL REFERENCES transaction_statuses,
    change_date    TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP,
    reason         TEXT,                                   -- Motivo da mudança
    created_at     TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP,
    updated_at     TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP
);
```


Registra cada mudança de status, criando uma trilha de auditoria completa da progressão da transação.


#### Tabela: `transaction_fees`


```sql
CREATE TABLE IF NOT EXISTS transaction_fees (
    id                SERIAL PRIMARY KEY,
    transaction_id    INTEGER NOT NULL REFERENCES transactions ON DELETE CASCADE,
    fee_type          VARCHAR(100) NOT NULL,               -- Tipo de taxa
    total_amount      NUMERIC(15, 4) NOT NULL,             -- Valor total
    fee_currency_code VARCHAR(3) NOT NULL,                 -- Código da moeda
    created_at        TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP,
    updated_at        TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP,
    base_amount       NUMERIC(15, 4),                      -- Valor base (%)
    fixed_amount      NUMERIC(15, 4)                       -- Valor fixo
);
```


Detalha cada taxa aplicada à transação, permitindo rastrear custos específicos.


#### Tabela: `platform_transaction_payment_history`


```sql
CREATE TABLE IF NOT EXISTS platform_transaction_payment_history (
    id                SERIAL PRIMARY KEY,
    transaction_id    INTEGER NOT NULL REFERENCES transactions ON DELETE CASCADE,
    payment_method    payment_method_enum,                 -- Método de pagamento
    payment_type      payment_type_enum,                   -- Tipo de pagamento
    installments      INTEGER,                             -- Número de parcelas
    value             NUMERIC(15, 4),                      -- Valor pago
    payment_date      TIMESTAMP WITH TIME ZONE,            -- Data do pagamento
    card_brand        VARCHAR(50),                         -- Bandeira do cartão
    card_last_digits  VARCHAR(4),                          -- Últimos dígitos
    bank_slip_barcode TEXT,                                -- Código do boleto
    pix_code          TEXT,                                -- Código PIX
    metadata          JSONB,                               -- Metadados adicionais
    created_at        TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP,
    updated_at        TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP
);
```


Registra eventos específicos de pagamento, incluindo tentativas, recusas e confirmações, com detalhes adicionais.


(Ref: Ciclo de Vida das Transações, ID domain_transactions_lifecycle_001)


## Fluxo Completo do Ciclo de Vida


O ciclo de vida de uma transação segue um fluxo bem definido, com potenciais ramificações baseadas no método de pagamento e nos resultados de processamento:


### 1. Fase de Iniciação


**Status: Pendente/Iniciada**


Quando um cliente inicia um checkout e seleciona os produtos/planos desejados:


```sql
-- Criação da transação inicial
INSERT INTO transactions (
    transaction_id, 
    customer_id, 
    payment_gateway, 
    status_id,
    offer_price
)
VALUES (
    'TRX-12345',  -- ID fornecido pela plataforma de origem
    (SELECT id FROM customers WHERE email = 'cliente@exemplo.com'),
    'platform_name',
    (SELECT id FROM transaction_statuses WHERE status = 'Pendente'),
    199.90         -- Preço da oferta
);


-- Registro de itemização
INSERT INTO transaction_items (...)
VALUES (...);  -- Detalhes dos itens selecionados


-- Primeiro registro no histórico
INSERT INTO transaction_status_history (...)
VALUES (...);  -- Status inicial "Pendente"
```


Nesta fase, a estrutura da transação é criada, mas o pagamento ainda não foi processado.


### 2. Fase de Processamento de Pagamento


**Status: Processando/Aguardando Pagamento**


O cliente fornece os detalhes de pagamento e o sistema os envia ao gateway:


```sql
-- Atualização para status "Processando"
UPDATE transactions
SET 
    status_id = (SELECT id FROM transaction_statuses WHERE status = 'Processando'),
    payment_method = 'credit_card',
    payment_type = 'INSTALLMENT_PAYMENT',
    installments_number = 3,
    card_brand = 'Visa',
    card_last_digits = '4242'
WHERE 
    id = [transaction_internal_id];


-- Registro do processamento no histórico
INSERT INTO transaction_status_history (...)
VALUES (...);  -- Status "Processando"


-- Detalhes da tentativa de pagamento
INSERT INTO platform_transaction_payment_history (...)
VALUES (...);  -- Detalhes da tentativa
```


Para boletos/PIX, o status seria "Aguardando Pagamento" com os respectivos detalhes.


### 3. Fase de Resultado do Pagamento


A transação segue um dos seguintes caminhos:


#### 3.1. Aprovação


**Status: Aprovada**


```sql
-- Atualização para "Aprovada"
UPDATE transactions
SET 
    status_id = (SELECT id FROM transaction_statuses WHERE status = 'Aprovada'),
    customer_paid_amount = 199.90,
    platform_fee_amount = 19.99,       -- 10% de taxa da plataforma
    distributable_amount = 179.91,     -- offer_price - platform_fee_amount
    partner_commission_amount = 39.98, -- 20% de comissão de afiliado
    producer_net_amount = 139.93       -- distributable_amount - partner_commission_amount
WHERE 
    id = [transaction_internal_id];


-- Registro das taxas aplicadas
INSERT INTO transaction_fees (...)
VALUES (...);  -- Detalhamento das taxas


-- Registro de aprovação no histórico
INSERT INTO transaction_status_history (...)
VALUES (...);  -- Status "Aprovada" com timestamp
```


#### 3.2. Recusa


**Status: Recusada**


```sql
-- Atualização para "Recusada"
UPDATE transactions
SET 
    status_id = (SELECT id FROM transaction_statuses WHERE status = 'Recusada')
WHERE 
    id = [transaction_internal_id];


-- Registro de recusa no histórico
INSERT INTO transaction_status_history (...)
VALUES (...);  -- Status "Recusada" com motivo detalhado


-- Detalhes da recusa
INSERT INTO platform_transaction_payment_history (...)
VALUES (...);  -- Inclui metadata com código de erro e motivo
```


### 4. Fase Pós-Processamento


Após a aprovação inicial, a transação pode ainda passar por:


#### 4.1. Reembolso/Estorno


**Status: Reembolsada/Estornada**


```sql
-- Atualização para "Reembolsada"
UPDATE transactions
SET 
    status_id = (SELECT id FROM transaction_statuses WHERE status = 'Reembolsada')
WHERE 
    id = [transaction_internal_id];


-- Registro de reembolso no histórico
INSERT INTO transaction_status_history (...)
VALUES (...);  -- Status "Reembolsada" com motivo


-- Registro do evento de reembolso
INSERT INTO platform_transaction_payment_history (
    transaction_id,
    payment_method,
    payment_type,
    value,
    payment_date,
    metadata
)
VALUES (
    [transaction_internal_id],
    'refund',
    'REFUND',
    -199.90,  -- Valor negativo indica reembolso
    CURRENT_TIMESTAMP,
    '{"reason":"customer_request", "refund_id":"REF-12345"}'
);
```


#### 4.2. Disputa (Chargeback)


**Status: Em Disputa**


```sql
-- Atualização para "Em Disputa"
UPDATE transactions
SET 
    status_id = (SELECT id FROM transaction_statuses WHERE status = 'Em Disputa')
WHERE 
    id = [transaction_internal_id];


-- Registro da disputa no histórico
INSERT INTO transaction_status_history (...)
VALUES (...);  -- Status "Em Disputa" com detalhes


-- Meta-informações sobre a disputa
INSERT INTO platform_transaction_payment_history (...)
VALUES (...);  -- Inclui metadata com detalhes da contestação
```


(Ref: Ciclo de Vida das Transações, ID domain_transactions_lifecycle_001)


## Fluxo Financeiro e Lógica de Cálculo


### Componentes Financeiros


A tabela `transactions` implementa um modelo hierárquico de valores financeiros, cada um derivado do anterior:


```
                      offer_price
                           |
                           v
                platform_fee_amount
                           |
                           v
                distributable_amount
                           |
                           v
             partner_commission_amount
                           |
                           v
                producer_net_amount
```


#### Hierarquia de Cálculo


1. **`offer_price`**: Valor base da transação
   - Representa o valor acordado para a compra
   - Inclui todos os itens na transação
   - É o ponto de partida para todos os cálculos subsequentes


2. **`platform_fee_amount`**: Taxas da plataforma e gateway
   - Deduzidas do `offer_price`
   - Representam o custo de utilização da plataforma/gateway
   - Podem ser compostas por diferentes tipos de taxas (detalhadas em `transaction_fees`)


3. **`distributable_amount`**: Valor disponível para distribuição
   - Calculado como: `offer_price - platform_fee_amount`
   - Representa o valor a ser dividido entre produtor e parceiros


4. **`partner_commission_amount`**: Comissões de parceiros
   - Valor destinado a afiliados, co-produtores e outros parceiros
   - Deduzido do `distributable_amount`
   - Detalhes específicos por parceiro armazenados em `platform_commission`


5. **`producer_net_amount`**: Receita líquida do produtor
   - Calculado como: `distributable_amount - partner_commission_amount`
   - Representa o lucro bruto da transação para o produtor principal


### Campo Adicional: `customer_paid_amount`


Este campo merece atenção especial:
- Representa o valor efetivamente pago pelo cliente
- Pode diferir do `offer_price` devido a:
  - Juros de parcelamento cobrados diretamente do cliente
  - Taxas adicionais específicas do método de pagamento
  - Variações cambiais em pagamentos internacionais


### Exemplo de Cálculos em uma Transação Típica


```
# Cenário: Produto vendido por R$100,00 com afiliado
offer_price = R$100,00
platform_fee_amount = R$10,00 (10% de taxa da plataforma)
distributable_amount = R$90,00 (offer_price - platform_fee_amount)
partner_commission_amount = R$45,00 (50% do distributable_amount para o afiliado)
producer_net_amount = R$45,00 (distributable_amount - partner_commission_amount)


# Caso parcelado em 3x com juros:
customer_paid_amount = R$110,00 (incluindo R$10,00 de juros de parcelamento)
```


(Ref: Ciclo de Vida das Transações, ID domain_transactions_lifecycle_001)


## Modelagem de Múltiplos Itens e Order Bumps


A tabela `transaction_items` permite que uma única transação contenha múltiplos produtos ou ofertas, suportando:


### 1. Carrinhos de Compra


Um cliente pode adquirir vários produtos independentes em uma única transação:


```sql
-- Transação principal (cabeçalho do carrinho)
INSERT INTO transactions (
    transaction_id, 
    customer_id, 
    payment_gateway, 
    status_id,
    offer_price
)
VALUES (
    'CART-54321',
    123,
    'platform_name',
    (SELECT id FROM transaction_statuses WHERE status = 'Pendente'),
    349.80  -- Soma de todos os itens (199.90 + 149.90)
);


-- Item 1 do carrinho
INSERT INTO transaction_items (
    transaction_id,
    product_id,
    offer_id,
    quantity,
    unit_price
)
VALUES (
    (SELECT id FROM transactions WHERE transaction_id = 'CART-54321'),
    101,  -- ID do Produto A
    201,  -- ID da Oferta para Produto A
    1,    -- Quantidade
    199.90 -- Preço unitário
);


-- Item 2 do carrinho
INSERT INTO transaction_items (
    transaction_id,
    product_id,
    offer_id,
    quantity,
    unit_price
)
VALUES (
    (SELECT id FROM transactions WHERE transaction_id = 'CART-54321'),
    102,  -- ID do Produto B
    202,  -- ID da Oferta para Produto B
    1,    -- Quantidade
    149.90 -- Preço unitário
);
```


### 2. Order Bumps


Produtos complementares oferecidos durante o checkout e adicionados à compra principal:


```sql
-- Transação principal (produto principal + order bump)
INSERT INTO transactions (
    transaction_id, 
    customer_id, 
    payment_gateway, 
    status_id,
    offer_price
)
VALUES (
    'ORDER-12345',
    123,
    'platform_name',
    (SELECT id FROM transaction_statuses WHERE status = 'Pendente'),
    219.90  -- Produto principal (199.90) + Order Bump (20.00)
);


-- Produto principal
INSERT INTO transaction_items (
    transaction_id,
    product_id,
    offer_id,
    quantity,
    unit_price
)
VALUES (
    (SELECT id FROM transactions WHERE transaction_id = 'ORDER-12345'),
    101,  -- ID do Produto Principal
    201,  -- ID da Oferta
    1,    -- Quantidade
    199.90 -- Preço unitário
);


-- Order Bump
INSERT INTO transaction_items (
    transaction_id,
    product_id,
    offer_id,
    quantity,
    unit_price
)
VALUES (
    (SELECT id FROM transactions WHERE transaction_id = 'ORDER-12345'),
    103,  -- ID do Produto Order Bump
    203,  -- ID da Oferta Order Bump
    1,    -- Quantidade
    20.00 -- Preço unitário (geralmente menor)
);
```


### 3. Produtos com Múltiplas Unidades


Compra de múltiplas unidades do mesmo produto:


```sql
INSERT INTO transaction_items (
    transaction_id,
    product_id,
    offer_id,
    quantity,
    unit_price
)
VALUES (
    (SELECT id FROM transactions WHERE transaction_id = 'MULT-67890'),
    104,  -- ID do Produto
    204,  -- ID da Oferta
    3,    -- Quantidade: 3 unidades
    49.90 -- Preço unitário (preço total seria 149.70)
);
```


Esta modelagem oferece flexibilidade para representar diversos cenários de venda, mantendo uma visão clara dos itens individuais que compõem cada transação.


(Ref: Ciclo de Vida das Transações, ID domain_transactions_lifecycle_001)


## Normalização e Mapeamento de Status


### Tabela Central: `transaction_statuses`


A tabela `transaction_statuses` atua como o repositório centralizado de status normalizados:


```sql
-- Exemplo de população da tabela de status normalizados
INSERT INTO transaction_statuses (status) VALUES
('Pendente'),
('Iniciada'),
('Processando'),
('Aguardando Pagamento'),
('Aprovada'),
('Recusada'),
('Cancelada'),
('Reembolsada'),
('Em Disputa'),
('Estornada'),
('Expirada');
```


### Mapeamento de Status entre Plataformas


Diferentes plataformas utilizam terminologias distintas para os mesmos estados transacionais. O sistema implementa um mapeamento consistente:


| Status Normalizado | Descrição | Uso Típico |
|:-------------------|:----------|:-----------|
| **Pendente** | Estado inicial quando a transação é criada | Criação inicial da transação |
| **Aguardando Pagamento** | Aguardando confirmação de pagamento externo | Boleto gerado, PIX pendente |
| **Processando** | Gateway está processando o pagamento | Pagamento em processamento |
| **Aprovada** | Pagamento confirmado e transação completada com sucesso | Pagamento confirmado |
| **Recusada** | Pagamento não autorizado ou rejeitado | Pagamento rejeitado |
| **Cancelada** | Transação cancelada antes de completar | Cancelada antes de completar |
| **Reembolsada** | Valor devolvido ao cliente após aprovação | Valor devolvido ao cliente |
| **Em Disputa** | Cliente abriu contestação sobre a transação | Contestação do cliente |
| **Estornada** | Valor estornado compulsoriamente | Estorno forçado pelo banco |
| **Expirada** | Prazo para pagamento ou confirmação venceu | Prazo de pagamento vencido |


Este mapeamento uniforme permite:


1. **Consultas Padronizadas**: Filtrar transações por status consistentemente, independente da plataforma
2. **Análises Comparativas**: Comparar taxas de aprovação/reembolso entre plataformas usando a mesma terminologia
3. **Lógica de Negócio Simplificada**: Implementar regras baseadas em status sem ter que considerar cada variação específica de plataforma


### Implementação do Mapeamento


```python
# Pseudocódigo para mapeamento de status
def map_platform_status_to_normalized(platform, original_status):
    # Mapeamento para cada plataforma conforme documentação específica
    mapping = {
        'platform_a': {
            'status_code_1': 'Aprovada',
            'status_code_2': 'Reembolsada',
            'status_code_3': 'Cancelada',
            'status_code_4': 'Aguardando Pagamento',
            # ... outros mapeamentos
        },
        'platform_b': {
            'status_name_1': 'Aprovada',
            'status_name_2': 'Reembolsada',
            'status_name_3': 'Cancelada',
            'status_name_4': 'Aguardando Pagamento',
            # ... outros mapeamentos
        },
        # ... outros mapeamentos de plataformas
    }
    
    # Obter o status normalizado ou usar valor padrão
    normalized_status = mapping.get(platform, {}).get(original_status, 'Pendente')
    
    # Obter o ID correspondente do status normalizado
    status_id = db.query(
        "SELECT id FROM transaction_statuses WHERE status = %s",
        [normalized_status]
    ).scalar()
    
    return status_id
```


(Ref: Ciclo de Vida das Transações, ID domain_transactions_lifecycle_001)


## Análises Financeiras e Operacionais


O domínio de Transações permite análises detalhadas do desempenho financeiro e operacional:


### 1. Análises de Receita


```sql
-- Receita bruta por período e plataforma
SELECT 
    DATE_TRUNC('month', t.order_date) AS month,
    t.payment_gateway,
    SUM(t.offer_price) AS gross_revenue,
    SUM(t.platform_fee_amount) AS platform_fees,
    SUM(t.distributable_amount) AS distributable_amount,
    SUM(t.producer_net_amount) AS net_revenue,
    COUNT(*) AS transaction_count
FROM 
    transactions t
JOIN 
    transaction_statuses ts ON t.status_id = ts.id
WHERE 
    ts.status = 'Aprovada'
    AND t.order_date BETWEEN '2023-01-01' AND '2023-12-31'
GROUP BY 
    month, t.payment_gateway
ORDER BY 
    month, t.payment_gateway;
```


### 2. Análises de Performance de Pagamento


```sql
-- Taxa de conversão por método de pagamento
WITH payment_attempts AS (
    SELECT 
        t.payment_method,
        COUNT(*) AS total_attempts,
        SUM(CASE WHEN ts.status = 'Aprovada' THEN 1 ELSE 0 END) AS successful_attempts
    FROM 
        transactions t
    JOIN 
        transaction_statuses ts ON t.status_id = ts.id
    WHERE 
        t.order_date >= CURRENT_DATE - INTERVAL '90 days'
        AND t.payment_method IS NOT NULL
    GROUP BY 
        t.payment_method
)
SELECT 
    payment_method,
    total_attempts,
    successful_attempts,
    ROUND((successful_attempts * 100.0 / total_attempts), 2) AS approval_rate
FROM 
    payment_attempts
ORDER BY 
    approval_rate DESC;
```


### 3. Análise de Ticket Médio


```sql
-- Ticket médio por produto
SELECT 
    p.name AS product_name,
    COUNT(t.id) AS transaction_count,
    AVG(ti.unit_price) AS average_unit_price,
    AVG(t.offer_price) AS average_transaction_value
FROM 
    transactions t
JOIN 
    transaction_items ti ON t.id = ti.transaction_id
JOIN 
    products p ON ti.product_id = p.id
JOIN 
    transaction_statuses ts ON t.status_id = ts.id
WHERE 
    ts.status = 'Aprovada'
    AND t.order_date >= CURRENT_DATE - INTERVAL '180 days'
GROUP BY 
    p.name
HAVING 
    COUNT(t.id) >= 10  -- Apenas produtos com volume significativo
ORDER BY 
    average_transaction_value DESC;
```


### 4. Análise de Jornada de Status


```sql
-- Tempo médio entre estados principais
WITH status_transitions AS (
    SELECT 
        t.id AS transaction_id,
        ts_init.status AS initial_status,
        ts_final.status AS final_status,
        MIN(tsh_init.change_date) AS initial_date,
        MIN(tsh_final.change_date) AS final_date
    FROM 
        transactions t
    JOIN 
        transaction_status_history tsh_init ON t.id = tsh_init.transaction_id
    JOIN 
        transaction_statuses ts_init ON tsh_init.status_id = ts_init.id
    JOIN 
        transaction_status_history tsh_final ON t.id = tsh_final.transaction_id
    JOIN 
        transaction_statuses ts_final ON tsh_final.status_id = ts_final.id
    WHERE 
        ts_init.status = 'Iniciada'
        AND ts_final.status = 'Aprovada'
        AND tsh_final.change_date > tsh_init.change_date
    GROUP BY 
        t.id, ts_init.status, ts_final.status
)
SELECT 
    initial_status,
    final_status,
    COUNT(*) AS transition_count,
    AVG(EXTRACT(EPOCH FROM (final_date - initial_date)) / 60) AS avg_minutes_to_transition
FROM 
    status_transitions
GROUP BY 
    initial_status, final_status
ORDER BY 
    avg_minutes_to_transition DESC;
```


(Ref: Ciclo de Vida das Transações, ID domain_transactions_lifecycle_001)


## Transações Recorrentes (Assinaturas)


Transações associadas a assinaturas possuem características específicas:


### 1. Identificação de Transações Recorrentes


```sql
-- Campos específicos para transações de assinatura
SELECT 
    t.transaction_id,
    t.is_subscription,           -- Flag indicando transação recorrente
    t.subscription_id,           -- ID interno da assinatura relacionada
    t.platform_subscription_id,  -- ID da assinatura na plataforma
    t.recurrence_number,         -- Número da recorrência (1ª, 2ª, etc.)
    s.subscription_id AS original_subscription_id
FROM 
    transactions t
LEFT JOIN 
    subscriptions s ON t.subscription_id = s.id
WHERE 
    t.is_subscription = TRUE;
```


### 2. Distinguindo Transação Inicial e Recorrências


```sql
-- Consulta para encontrar a transação inicial de uma assinatura
SELECT 
    t.transaction_id,
    t.order_date,
    t.offer_price
FROM 
    transactions t
JOIN 
    subscriptions s ON s.id = t.subscription_id
WHERE 
    t.recurrence_number = 1
    OR (t.recurrence_number IS NULL AND t.is_subscription = TRUE)
ORDER BY 
    t.order_date ASC
LIMIT 1;


-- Consulta para listar todas as cobranças recorrentes de uma assinatura
SELECT 
    t.transaction_id,
    t.recurrence_number,
    t.order_date,
    t.offer_price,
    ts.status
FROM 
    transactions t
JOIN 
    transaction_statuses ts ON t.status_id = ts.id
WHERE 
    t.subscription_id = [subscription_internal_id]
    AND t.recurrence_number > 1
ORDER BY 
    t.recurrence_number ASC;
```


### 3. Análise de Receita Recorrente


```sql
-- MRR (Monthly Recurring Revenue) por mês
SELECT 
    DATE_TRUNC('month', t.order_date) AS month,
    COUNT(DISTINCT t.subscription_id) AS active_subscriptions,
    SUM(t.offer_price) AS mrr
FROM 
    transactions t
JOIN 
    transaction_statuses ts ON t.status_id = ts.id
WHERE 
    t.is_subscription = TRUE
    AND ts.status = 'Aprovada'
    AND t.order_date BETWEEN '2023-01-01' AND '2023-12-31'
GROUP BY 
    month
ORDER BY 
    month;
```


(Ref: Ciclo de Vida das Transações, ID domain_transactions_lifecycle_001)


## Desafios e Melhores Práticas


### 1. Tratamento de Reembolsos


Os reembolsos apresentam desafios específicos para a integridade financeira:


**Recomendação**: Mantenha a transação original e seus valores intactos, registrando o reembolso como uma mudança de status e um evento de pagamento negativo:


```sql
-- Registro de reembolso como mudança de status
UPDATE transactions
SET status_id = (SELECT id FROM transaction_statuses WHERE status = 'Reembolsada')
WHERE id = [transaction_id];


-- Registro do reembolso no histórico de status
INSERT INTO transaction_status_history (
    transaction_id, 
    status_id, 
    reason
)
VALUES (
    [transaction_id],
    (SELECT id FROM transaction_statuses WHERE status = 'Reembolsada'),
    'Solicitado pelo cliente devido a insatisfação com o produto'
);


-- Registro do evento de reembolso
INSERT INTO platform_transaction_payment_history (
    transaction_id,
    payment_method,
    value,
    payment_date,
    metadata
)
VALUES (
    [transaction_id],
    'refund',
    -[original_amount],  -- Valor negativo indicando reembolso
    CURRENT_TIMESTAMP,
    '{"refund_id":"REF-123", "reason":"customer_request", "is_partial":false}'
);
```


### 2. Conciliação com Plataformas


Assegurar que os dados do sistema estejam sincronizados com as plataformas originais:


**Recomendação**: Implementar processos periódicos de reconciliação:


```python
# Pseudocódigo para reconciliação
def reconcile_transactions(platform, date_range):
    # 1. Obter transações da plataforma no período
    platform_transactions = api.get_transactions(platform, date_range)
    
    # 2. Para cada transação da plataforma
    for plat_transaction in platform_transactions:
        # Verificar se existe no sistema
        local_transaction = db.query(
            "SELECT * FROM transactions WHERE transaction_id = %s AND payment_gateway = %s",
            [plat_transaction.id, platform]
        ).first()
        
        if not local_transaction:
            # 3a. Criar se não existir
            create_transaction_from_platform_data(plat_transaction)
        else:
            # 3b. Verificar discrepâncias se existir
            if local_transaction.status_id != map_status(plat_transaction.status):
                # Atualizar status e adicionar ao histórico
                update_transaction_status(
                    local_transaction.id, 
                    map_status(plat_transaction.status),
                    "Atualizado via reconciliação"
                )
            
            # Verificar valores financeiros
            if abs(local_transaction.offer_price - plat_transaction.amount) > 0.01:
                log.warning(f"Discrepância de valores: {local_transaction.id}")
                # Decisão de negócio: atualizar ou apenas alertar
```


### 3. Consistência Financeira


Garantir que os campos financeiros sejam consistentes entre si:


**Recomendação**: Implementar validações automáticas:


```sql
-- Trigger para validar consistência financeira
CREATE OR REPLACE FUNCTION validate_transaction_amounts()
RETURNS TRIGGER AS $$
BEGIN
    -- Verificar se distributable_amount = offer_price - platform_fee_amount
    IF ABS(NEW.distributable_amount - (NEW.offer_price - NEW.platform_fee_amount)) > 0.01 THEN
        RAISE EXCEPTION 'Inconsistência de valores: distributable_amount deve ser offer_price - platform_fee_amount';
    END IF;
    
    -- Verificar se producer_net_amount = distributable_amount - partner_commission_amount
    IF ABS(NEW.producer_net_amount - (NEW.distributable_amount - NEW.partner_commission_amount)) > 0.01 THEN
        RAISE EXCEPTION 'Inconsistência de valores: producer_net_amount deve ser distributable_amount - partner_commission_amount';
    END IF;
    
    RETURN NEW;
END;
$$ LANGUAGE plpgsql;


CREATE TRIGGER check_transaction_amounts
BEFORE INSERT OR UPDATE ON transactions
FOR EACH ROW
EXECUTE FUNCTION validate_transaction_amounts();
```


(Ref: Ciclo de Vida das Transações, ID domain_transactions_lifecycle_001)


## Conclusão


O Domínio de Ciclo de Vida das Transações representa o núcleo financeiro do sistema, oferecendo:


1. **Visão unificada** das vendas em diversas plataformas através de um modelo de dados consistente
2. **Rastreabilidade completa** do ciclo de vida de cada transação, desde a criação até seu estado final
3. **Flexibilidade** para representar cenários complexos como carrinhos de compra, order bumps e recorrências
4. **Normalização** de terminologias de status para permitir análises consistentes
5. **Detalhamento financeiro** que captura valores brutos, taxas, comissões e valores líquidos


A arquitetura modular com tabelas específicas para cada aspecto da transação (itens, taxas, histórico de status, detalhes de pagamento) permite um registro completo e detalhado, facilitando análises precisas e fornecendo uma base sólida para integrações com sistemas financeiros e contábeis.


Esta estrutura de dados robusta suporta não apenas as operações cotidianas de processamento de vendas, mas também fornece as informações necessárias para tomadas de decisão estratégicas baseadas em dados financeiros confiáveis e rastreáveis.


(Ref: Ciclo de Vida das Transações, ID domain_transactions_lifecycle_001)
```