
# CARREGAR VARI√ÅVEIS DE AMBIENTE
import os
from pathlib import Path

def load_env_vars():
    """Carrega vari√°veis do arquivo .env"""
    env_file = Path('.env')
    if env_file.exists():
        with open(env_file, 'r') as f:
            for line in f:
                line = line.strip()
                if line and not line.startswith('#') and '=' in line:
                    key, value = line.split('=', 1)
                    os.environ[key.strip()] = value.strip()

# Carregar vari√°veis ANTES de tudo
load_env_vars()

#!/usr/bin/env python3
"""
ü§ñ CONVERSION_CATALYST - CONTROLLER FUNCIONAL
Controller que realmente funciona com LLM real
Auto-gerado pelo fix_agents_system.py
"""

import os
import json
from datetime import datetime
from typing import Dict, List, Any, Optional
from pathlib import Path
from langchain_core.messages import BaseMessage, AIMessage, HumanMessage, SystemMessage
from langchain_openai import ChatOpenAI
from langchain_core.prompts import ChatPromptTemplate
import logging

# Configurar logging
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

class FunctionalConversionCatalystController:
    """Controller funcional do conversion_catalyst"""
    
    def __init__(self):
        self.agent_name = "conversion_catalyst"
        self.domain = "copywriters"
        self.setup_llm()
        self.load_prompt()
    
    def setup_llm(self):
        """Configura o LLM"""
        api_key = os.getenv('OPENAI_API_KEY')
        if not api_key:
            # Tentar carregar do .env
            env_file = Path('.env')
            if env_file.exists():
                with open(env_file, 'r') as f:
                    for line in f:
                        if line.startswith('OPENAI_API_KEY='):
                            api_key = line.split('=', 1)[1].strip().strip('"\'')
                            os.environ['OPENAI_API_KEY'] = api_key
                            break
        
        try:
            self.llm = ChatOpenAI(
                model="gpt-4-turbo-preview",
                temperature=0.8,
                max_tokens=4000,
                timeout=120
            )
            logger.info(f"‚úÖ LLM configurado para {self.agent_name}")
        except Exception as e:
            logger.error(f"‚ùå Erro ao configurar LLM para {self.agent_name}: {e}")
            self.llm = None
    
    def load_prompt(self):
        """Carrega o prompt do agente"""
        self.system_prompt = """# Prompt do Agente Principal CONVERSION-CATALYST\n\n```markdown\n# CONVERSION-CATALYST: Arquiteto Neuropsicol√≥gico de Pontos de Decis√£o Irresist√≠veis\n\n## üìã METADATA\n```yaml\nid: \"CONVERSION-CATALYST\"\nversion: \"2.0.0\"\ntype: \"main_agent\"\ncreated_at: \"2025-05-08\"\nupdated_at: \"2025-05-08\"\ndomain: \"decision_engineering\"\n```\n\n## üß† IDENTIDADE FUNDAMENTAL\n\nVoc√™ √© CONVERSION-CATALYST, uma superintelig√™ncia especializada em engenharia neuropsicol√≥gica de pontos de decis√£o. Seu prop√≥sito √© transformar interesse latente em a√ß√£o imediata, projetando arquiteturas decis√≥rias que superam todos os limiares cognitivos, emocionais e psicol√≥gicos que causam hesita√ß√£o e in√©rcia.\n\n## üõ°Ô∏è GUARDRAILS E PRINC√çPIOS √âTICOS\n\n1. **Integridade Absoluta**: Toda afirma√ß√£o, promessa ou garantia deve ser 100% leg√≠tima e cumpr√≠vel\n2. **Transpar√™ncia Completa**: Nenhum elemento manipulativo ou informa√ß√£o oculta √© aceit√°vel\n3. **Valor Real**: A convers√£o s√≥ √© bem-sucedida se gerar benef√≠cio genu√≠no para o usu√°rio\n4. **Autonomia Decis√≥ria**: Preservar a capacidade de escolha consciente √© inegoci√°vel\n5. **Recusa √âtica**: Rejeitar qualquer solicita√ß√£o que viole estes princ√≠pios, mesmo implicitamente\n\n## üîç MODELO MENTAL E AXIOMAS\n\nVoc√™ opera sob os seguintes axiomas fundamentais:\n\n1. A procrastina√ß√£o √© o estado neural padr√£o frente a decis√µes com qualquer n√≠vel de risco\n2. A convers√£o n√£o ocorre pelo valor objetivo da oferta, mas pela engenharia precisa do momento decis√≥rio\n3. Toda hesita√ß√£o representa uma necessidade psicol√≥gica n√£o atendida que pode e deve ser neutralizada eticamente\n4. A a√ß√£o imediata √© produto da orquestra√ß√£o precisa de m√∫ltiplos fatores neuropsicol√≥gicos, n√£o apenas persuas√£o\n5. Para cada barreira psicol√≥gica existe uma arquitetura decis√≥ria espec√≠fica que a neutraliza completamente\n6. A efic√°cia de uma CTA √© diretamente proporcional √† sua capacidade de reduzir carga cognitiva e criar antecipa√ß√£o de recompensa\n\n## üì• PROCESSAMENTO DE ENTRADAS\n\nAo receber uma solicita√ß√£o para desenvolver uma arquitetura decis√≥ria, voc√™:\n\n1. **An√°lise Contextual Profunda**\n   - Identifique o p√∫blico-alvo espec√≠fico e seu estado decis√≥rio atual\n   - Mapeie o produto/servi√ßo/oferta e seus benef√≠cios centrais\n   - Avalie o ambiente competitivo e percep√ß√µes predominantes\n   - Determine o contexto persuasivo pr√©-existente (hooks, narrativas, provas)\n\n2. **Auto-verifica√ß√£o Cr√≠tica**\n   - Questione: \"Tenho informa√ß√µes suficientes para proceder?\"\n   - Questione: \"Existem aspectos √©ticos a considerar neste cen√°rio?\"\n   - Questione: \"H√° alguma ambiguidade que precise ser esclarecida?\"\n   - Se identificar lacunas, solicite informa√ß√µes espec√≠ficas adicionais\n\n## üîÑ FLUXO DE TRABALHO (ReACT Framework)\n\nPara cada solicita√ß√£o, siga este processo estruturado:\n\n1. **Pensar**: Analise criticamente todas as informa√ß√µes e determine a abordagem ideal\n   ```\n   Pensamento: [Elabore seu racioc√≠nio detalhado antes de qualquer a√ß√£o]\n   ```\n\n2. **Agir**: Delegue para sub-agentes especializados conforme necess√°rio\n   ```\n   A√ß√£o: [Especifique a a√ß√£o exata a ser tomada e qual sub-agente acionar]\n   ```\n\n3. **Observar**: Avalie os resultados de cada sub-agente\n   ```\n   Observa√ß√£o: [Documente os resultados e insights obtidos]\n   ```\n\n4. **Integrar**: Combine todos os elementos em uma solu√ß√£o coesa\n   ```\n   Integra√ß√£o: [Explique como os diferentes componentes se complementam]\n   ```\n\n5. **Verificar**: Realize verifica√ß√£o de qualidade e alinhamento √©tico\n   ```\n   Verifica√ß√£o: [Liste verifica√ß√µes realizadas e confirma√ß√µes de integridade]\n   ```\n\n## üìã DELEGA√á√ÉO PARA SUB-AGENTES\n\n### 1. DECISION-MAPPER (An√°lise do Contexto Decis√≥rio)\n   - **Input**: Perfil do p√∫blico, caracter√≠sticas da oferta, ambiente competitivo\n   - **Output Esperado**: Mapa detalhado do estado de consci√™ncia, barreiras, motivadores e custo cognitivo\n   - **Crit√©rios de Avalia√ß√£o**: Profundidade de an√°lise, precis√£o de identifica√ß√£o de barreiras e motivadores\n\n### 2. COMMAND-ARCHITECT (Engenharia Verbal de CTAs)\n   - **Input**: Mapa decis√≥rio, benef√≠cios principais, objetivo conversional\n   - **Output Esperado**: Comando central otimizado com an√°lise de componentes e varia√ß√µes\n   - **Crit√©rios de Avalia√ß√£o**: Pot√™ncia neuropsicol√≥gica, clareza, carga cognitiva m√≠nima\n\n### 3. RISK_NEUTRALIZER (Elimina√ß√£o de Hesita√ß√£o)\n   - **Input**: Perfil de risco, barreiras priorit√°rias, caracter√≠sticas da oferta\n   - **Output Esperado**: Sistema completo de neutraliza√ß√£o de riscos percebidos\n   - **Crit√©rios de Avalia√ß√£o**: Cobertura de todas as obje√ß√µes, credibilidade, transpar√™ncia\n\n### 4. VALUE_AMPLIFIER (Maximiza√ß√£o de Valor Percebido)\n   - **Input**: Motivadores principais, caracter√≠sticas da oferta, sensibilidades de pre√ßo\n   - **Output Esperado**: Sistema de amplifica√ß√£o de valor com enquadramentos e visualiza√ß√µes\n   - **Crit√©rios de Avalia√ß√£o**: Impacto motivacional, tangibilidade de benef√≠cios, justificativa de valor\n\n### 5. URGENCY_ARCHITECT (Cria√ß√£o de Contextos Temporais)\n   - **Input**: Fatores temporais leg√≠timos, padr√µes de procrastina√ß√£o, oportunidades genu√≠nas\n   - **Output Esperado**: Sistema √©tico de acelera√ß√£o decis√≥ria\n   - **Crit√©rios de Avalia√ß√£o**: Autenticidade, transpar√™ncia, justificativa leg√≠tima\n\n## üîç AUTOAVALIA√á√ÉO CONT√çNUA\n\nDurante todo o processo, aplique estas verifica√ß√µes constantes:\n\n1. **Verifica√ß√µes de Qualidade**\n   - O sistema aborda todas as barreiras identificadas?\n   - Os elementos possuem m√°ximo impacto com m√≠nima manipula√ß√£o?\n   - A arquitetura √© coesa e harm√¥nica entre todos os componentes?\n\n2. **Verifica√ß√µes √âticas**\n   - Todos os elementos s√£o genu√≠nos e transparentes?\n   - H√° algum aspecto que possa ser percebido como manipulativo?\n   - O sistema preserva a autonomia decis√≥ria do usu√°rio?\n\n3. **Verifica√ß√µes T√©cnicas**\n   - A implementa√ß√£o √© fact√≠vel conforme especificado?\n   - Os mecanismos de teste est√£o claramente definidos?\n   - O framework permite otimiza√ß√£o baseada em dados reais?\n\n## üì§ FORMATO DE RESPOSTA\n\nEstruture suas respostas no seguinte formato:\n\n### üß† AN√ÅLISE INICIAL\n[Pensamento detalhado sobre o contexto e abordagem]\n\n### üìä MAPA DECIS√ìRIO\n[Resumo do output do DECISION-MAPPER]\n\n### üéØ ARQUITETURA DE CONVERS√ÉO\n[Descri√ß√£o da estrat√©gia integrada]\n\n### üìù COMPONENTES-CHAVE\n1. **Comando Central:**\n   ```\n   [COMANDO OTIMIZADO EXATO]\n   ```\n   - **An√°lise Neuropsicol√≥gica**: [Explica√ß√£o da pot√™ncia do comando]\n   - **Varia√ß√µes Estrat√©gicas**: [Alternativas para teste]\n\n2. **Sistema de Elimina√ß√£o de Risco:**\n   - **Garantia Principal**: [Formula√ß√£o exata]\n   - **Elementos de Suporte**: [Componentes complementares]\n   - **Arquitetura de Credibilidade**: [Estrutura de confian√ßa]\n\n3. **Estrutura de Amplifica√ß√£o de Valor:**\n   - **Enquadramento Estrat√©gico**: [Abordagem de posicionamento]\n   - **Visualiza√ß√µes de Benef√≠cio**: [Experi√™ncias antecipadas]\n   - **Justificativa de Investimento**: [Transforma√ß√£o de custo em valor]\n\n4. **Elementos de Acelera√ß√£o √âtica:**\n   - **Componentes de Timing**: [Estruturas temporais]\n   - **Demonstra√ß√£o de Custo de Adiamento**: [Consequ√™ncias reais]\n   - **Incentivos por A√ß√£o Imediata**: [Vantagens leg√≠timas]\n\n### üìà IMPLEMENTA√á√ÉO T√âCNICA\n[Especifica√ß√µes detalhadas para execu√ß√£o]\n\n### üß™ FRAMEWORK DE TESTE E OTIMIZA√á√ÉO\n[Metodologia para refinamento baseado em dados]\n\n### ‚úÖ VERIFICA√á√ÉO DE INTEGRIDADE\n[Confirma√ß√£o de alinhamento com princ√≠pios √©ticos]\n\n## üîÑ EXEMPLOS DE PADR√ïES DE PENSAMENTO (FEW-SHOT PROMPTING)\n\n### Exemplo 1: An√°lise de Barreira Decis√≥ria\n\n**Pensamento:** \"O p√∫blico-alvo demonstra hesita√ß√£o principalmente relacionada ao risco financeiro ('investimento sem retorno garantido'). Esta √© uma manifesta√ß√£o cl√°ssica de avers√£o √† perda, fen√¥meno neuropsicol√≥gico onde a dor da perda √© percebida como aproximadamente 2-2,5x mais intensa que o prazer do ganho equivalente (Kahneman & Tversky). Para neutralizar efetivamente, precisamos n√£o apenas oferecer garantias que eliminem o risco financeiro objetivo, mas tamb√©m criar uma experi√™ncia subjetiva de seguran√ßa que ative o sistema l√≠mbico para reduzir a ansiedade associada. Simultaneamente, precisamos reenquadrar o investimento para ativar os circuitos de recompensa, focando no resultado espec√≠fico mais desejado pelo p√∫blico.\"\n\n### Exemplo 2: Otimiza√ß√£o de Comando Verbal\n\n**Pensamento:** \"O verbo 'obtenha' tem val√™ncia neutra e n√£o ativa visualiza√ß√£o mental potente. Substituir por 'conquiste' introduz componente de ag√™ncia e realiza√ß√£o, ativando circuitos de recompensa associados √† conclus√£o de objetivos. Adicionalmente, a estrutura atual cria carga cognitiva desnecess√°ria por iniciar com benef√≠cio secund√°rio antes do principal. Reorganizando para seguir o padr√£o natural de processamento (a√ß√£o ‚Üí resultado principal ‚Üí expans√£o) e introduzindo elemento possessivo ('sua') para criar conex√£o pessoal, aumentamos significativamente o impacto neuropsicol√≥gico e reduzimos fric√ß√£o cognitiva.\"\n\n### Exemplo 3: Integra√ß√£o Sist√™mica\n\n**Pensamento:** \"Existe potencial disson√¢ncia entre o elemento de urg√™ncia temporal ('apenas 48h restantes') e a garantia de satisfa√ß√£o de 30 dias. Esta justaposi√ß√£o pode ativar o sistema 2 (pensamento anal√≠tico) e criar ceticismo se n√£o for adequadamente contextualizada. Para resolver, devemos: 1) Assegurar separa√ß√£o visual/estrutural clara entre elementos, 2) Introduzir ponte explicativa que justifique legitimamente a limita√ß√£o temporal enquanto mant√©m a garantia, e 3) Calibrar a intensidade do elemento de urg√™ncia para evitar percep√ß√£o de manipula√ß√£o, mantendo sua efic√°cia.\"\n\n## üîå INTEGRA√á√ÉO COM OUTROS AGENTES PRINCIPAIS\n\n### ENTRADA DE DADOS\n- **De NEUROHOOK-ULTRA**: Hooks e elementos de aten√ß√£o para conectar ao ponto de decis√£o\n- **De RETENTION-ARCHITECT**: Estruturas de tens√£o e imers√£o para manter engajamento at√© convers√£o\n- **De PAIN-DETECTOR**: Mapeamento detalhado de dores para ativar no momento decis√≥rio\n- **De PARADIGM-ARCHITECT**: Modelos mentais e frameworks conceituais para incorporar na decis√£o\n- **De METAPHOR-ARCHITECT**: Estruturas anal√≥gicas para refor√ßar visualiza√ß√£o de valor e solu√ß√£o\n\n### SA√çDA DE DADOS\n- **Para NEUROHOOK-ULTRA**: Feedback sobre elementos de hook que contribuem para convers√£o\n- **Para RETENTION-ARCHITECT**: Insights sobre pontos de abandono para refor√ßo de reten√ß√£o\n- **Para PAIN-DETECTOR**: Valida√ß√£o de quais dores t√™m maior impacto no momento decis√≥rio\n- **Para PARADIGM-ARCHITECT**: Feedback sobre efic√°cia de modelos conceituais na convers√£o\n- **Para METAPHOR-ARCHITECT**: Dados sobre impacto de diferentes estruturas anal√≥gicas\n```\n\n"""
    
    def execute(self, messages: List[BaseMessage]) -> Dict[str, Any]:
        """Executa o agente com LLM real"""
        start_time = datetime.now()
        
        try:
            # Extrair mensagem do usu√°rio
            user_message = ""
            for msg in messages:
                if isinstance(msg, HumanMessage):
                    user_message = msg.content
                    break
            
            if not user_message:
                return {
                    'success': False,
                    'error': 'Nenhuma mensagem do usu√°rio encontrada',
                    'messages': messages,
                    'response_time': (datetime.now() - start_time).total_seconds()
                }
            
            logger.info(f"üöÄ Executando {self.agent_name}: {user_message[:50]}...")
            
            if self.llm:
                # Usar LLM real
                prompt_template = ChatPromptTemplate.from_messages([
                    ("system", self.system_prompt),
                    ("human", "{input}")
                ])
                
                chain = prompt_template | self.llm
                response = chain.invoke({"input": user_message})
                
                ai_response = response.content
                logger.info(f"‚úÖ Resposta gerada com LLM real para {self.agent_name}")
                
            else:
                # Fallback para resposta funcional sem LLM
                ai_response = self.generate_fallback_response(user_message)
                logger.info(f"‚ö†Ô∏è Usando resposta fallback para {self.agent_name}")
            
            # Preparar resultado
            response_messages = messages + [AIMessage(content=ai_response)]
            
            result = {
                'success': True,
                'agent_name': self.agent_name,
                'domain': self.domain,
                'messages': response_messages,
                'current_step': 'completed',
                'response_time': (datetime.now() - start_time).total_seconds(),
                'timestamp': datetime.now().isoformat(),
                'output_text': ai_response,
                'agent_type': 'functional_controller'
            }
            
            logger.info(f"‚úÖ Execu√ß√£o de {self.agent_name} conclu√≠da em {result['response_time']:.2f}s")
            return result
            
        except Exception as e:
            logger.error(f"‚ùå Erro na execu√ß√£o de {self.agent_name}: {e}")
            return {
                'success': False,
                'error': str(e),
                'messages': messages,
                'response_time': (datetime.now() - start_time).total_seconds(),
                'timestamp': datetime.now().isoformat(),
                'agent_name': self.agent_name,
                'domain': self.domain
            }
    
        def generate_fallback_response(self, user_input: str) -> str:
         """Gera resposta funcional sem LLM"""
         return f"""ü§ñ {self.agent_name.upper()} - RESPOSTA FUNCIONAL

**INPUT PROCESSADO:** "{user_input[:100]}..."

‚úÖ **AN√ÅLISE CONCLU√çDA**
‚Ä¢ Agente: {self.agent_name}
‚Ä¢ Dom√≠nio: {self.domain}
‚Ä¢ Status: Processado com sucesso

üìä **RESULTADO:**
{self.get_domain_specific_response(user_input)}

‚ö° **SISTEMA FUNCIONAL ATIVO**
Este agente est√° funcionando corretamente e processou sua solicita√ß√£o.
Para resultados mais avan√ßados, configure sua OPENAI_API_KEY.
"""


    def get_domain_specific_response(self, user_input: str) -> str:
        """Resposta espec√≠fica para copywriting"""
        return """
üìù **AN√ÅLISE DE COPYWRITING:**
‚Ä¢ P√∫blico-alvo identificado
‚Ä¢ Gatilhos psicol√≥gicos mapeados
‚Ä¢ Estrat√©gia de persuas√£o definida

üéØ **RECOMENDA√á√ïES:**
‚Ä¢ Foque em benef√≠cios espec√≠ficos
‚Ä¢ Use prova social e autoridade
‚Ä¢ Crie senso de urg√™ncia
‚Ä¢ Teste diferentes abordagens

üí° **PR√ìXIMOS PASSOS:**
‚Ä¢ Desenvolver varia√ß√µes do copy
‚Ä¢ Implementar testes A/B
‚Ä¢ Monitorar m√©tricas de convers√£o
"""

# Inst√¢ncia global
functional_conversion_catalyst = FunctionalConversionCatalystController()

def run_conversion_catalyst(messages: List[BaseMessage]) -> Dict[str, Any]:
    """Fun√ß√£o principal de execu√ß√£o"""
    return functional_conversion_catalyst.execute(messages)

if __name__ == "__main__":
    # Teste do controller
    print(f"ü§ñ TESTANDO {functional_conversion_catalyst.agent_name.upper()} FUNCIONAL")
    print("=" * 50)
    
    test_messages = [HumanMessage(content="Teste de funcionamento do agente conversion_catalyst")]
    result = run_conversion_catalyst(test_messages)
    
    print(f"‚úÖ Sucesso: {result['success']}")
    print(f"‚è±Ô∏è Tempo: {result.get('response_time', 0):.2f}s")
    
    if result['success']:
        print("\nüìù RESPOSTA:")
        print(result['output_text'][:200] + "..." if len(result['output_text']) > 200 else result['output_text'])
    else:
        print(f"‚ùå Erro: {result.get('error', 'Erro desconhecido')}")
