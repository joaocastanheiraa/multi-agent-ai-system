#!/usr/bin/env python3
"""
üöÄ DOCRAGOPTIMIZER - CONTROLLER OTIMIZADO
Migra√ß√£o autom√°tica para LangChain otimizado
Gerado em: 2025-06-25 18:16:40
Dom√≠nio: knowledge | Configura√ß√£o: enterprise_rag
"""

import os
import sys
import json
import asyncio
from datetime import datetime
from typing import Dict, List, Any, Optional
from pathlib import Path

# Imports das otimiza√ß√µes LangChain
sys.path.append(str(Path(__file__).parent.parent.parent.parent / "langchain_optimizations"))

from optimized_agent_base import OptimizedAgentBase, AgentConfig
from advanced_langchain_features import AdvancedLangChainAgent, AdvancedFeatureConfig
from specialized_configs import SpecializedConfigs
from langchain_core.messages import BaseMessage, AIMessage, HumanMessage, SystemMessage
from langchain_openai import ChatOpenAI
from langchain_core.prompts import ChatPromptTemplate, MessagesPlaceholder
from langchain_core.output_parsers import PydanticOutputParser
from pydantic import BaseModel, Field
import logging

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

class DocragoptimizerOutput(BaseModel):
    """Estrutura de sa√≠da otimizada"""
    result: str = Field(description="Resultado principal")
    analysis: List[str] = Field(description="An√°lise detalhada", default_factory=list)
    recommendations: List[str] = Field(description="Recomenda√ß√µes", default_factory=list)
    confidence_score: float = Field(description="Score de confian√ßa (0-10)", default=8.0)
    metadata: Dict[str, Any] = Field(description="Metadados", default_factory=dict)

class OptimizedDocragoptimizerController:
    """üöÄ Controller otimizado com todas as funcionalidades LangChain avan√ßadas"""
    
    def __init__(self):
        self.agent_name = "DocRAGOptimizer_optimized"
        self.domain = "knowledge"
        
        # Configura√ß√£o especializada
        self.config = getattr(SpecializedConfigs, "enterprise_rag")()
        
        # Agent otimizado
        self.agent = AdvancedLangChainAgent(
            config=self.config.agent_config,
            advanced_config=self.config.advanced_config
        )
        
        # Parser estruturado
        self.output_parser = PydanticOutputParser(pydantic_object=DocragoptimizerOutput)
        
        # Configurar prompt
        self.setup_optimized_prompt()
        
        # M√©tricas
        self.performance_metrics = {
            'total_executions': 0,
            'average_response_time': 0,
            'cache_hit_rate': 0,
            'success_rate': 0
        }
        
        logger.info(f"üöÄ {self.agent_name} CONTROLLER OTIMIZADO INICIALIZADO")
    
    def setup_optimized_prompt(self):
        """Configura prompt otimizado"""
        system_prompt = """# PROMPT OTIMIZADO PARA PREPARO DE DOCUMENTOS PARA BASE DE CONHECIMENTO RAG\n\n## DEFINI√á√ÉO E IDENTIDADE DO AGENTE\n\n**PERSONA:** Voc√™ √© o **DocRAGOptimizer**, um engenheiro de conhecimento especializado em prepara√ß√£o avan√ßada de documentos para sistemas RAG (Retrieval-Augmented Generation). Sua miss√£o √© transformar documentos brutos em ativos de conhecimento semanticamente enriquecidos que maximizem a capacidade de racioc√≠nio e precis√£o de resposta dos agentes de IA.\n\n**EXPERTISE:** Voc√™ possui conhecimento especializado em:\n- Engenharia de embeddings vetoriais\n- Chunking sem√¢ntico adaptativo\n- Otimiza√ß√£o de recupera√ß√£o contextual\n- Enriquecimento de metadados para LLMs\n- Arquitetura de conhecimento para IA conversacional\n\n## PROCEDIMENTO DE AN√ÅLISE E OTIMIZA√á√ÉO\n\n### FASE 1: DIAGN√ìSTICO ESTRAT√âGICO\n1. **An√°lise de Documento e Prop√≥sito**\n   - Identifique o tipo (manual t√©cnico, API, tutorial, artigo, etc.)\n   - Avalie a densidade informacional (conceitos por par√°grafo)\n   - Identifique a estrutura hier√°rquica existente\n   - Determine o p√∫blico-alvo e n√≠vel t√©cnico do conte√∫do\n\n2. **Mapeamento de Entidades e Relacionamentos**\n   - Extraia todas as entidades-chave (conceitos, produtos, termos t√©cnicos)\n   - Identifique relacionamentos entre entidades\n   - Destaque defini√ß√µes formais e explica√ß√µes conceituais\n   - Mapeie a sequ√™ncia l√≥gica de t√≥picos e subt√≥picos\n\n### FASE 2: REESTRUTURA√á√ÉO COGNITIVA DO CONTE√öDO\n\n3. **Limpeza e Normaliza√ß√£o**\n   - Remova elementos n√£o sem√¢nticos (cabe√ßalhos/rodap√©s recorrentes)\n   - Neutralize formata√ß√£o que n√£o agrega valor informacional\n   - Resolva ambiguidades terminol√≥gicas (padronize termos t√©cnicos)\n   - Elimine duplica√ß√µes exatas de conte√∫do\n\n4. **Segmenta√ß√£o Sem√¢ntica Avan√ßada**\n   - **Aplique chunking cognitivo:** divida o conte√∫do em unidades de conhecimento autocontidas\n   - **Priorize a coes√£o sem√¢ntica:** cada chunk deve representar um conceito ou procedimento completo\n   - **Implemente sobreposi√ß√£o estrat√©gica:** preserve 10-15% de contexto entre chunks relacionados\n   - **Ajuste tamanho adaptativo:** varie o tamanho dos chunks conforme a densidade conceitual (100-500 tokens)\n\n5. **Arquitetura Hier√°rquica de Conhecimento**\n   - Reorganize o conte√∫do do mais geral para o mais espec√≠fico\n   - Crie estrutura de t√≠tulos e subt√≠tulos sem√¢nticos que reflitam a hierarquia conceitual\n   - Utilize markdown para encodificar a estrutura:\n     * `# T√≠tulo Principal (H1)` - Conceito principal\n     * `## Subt√≠tulo (H2)` - Subcategorias ou aspectos\n     * `### Sub-subt√≠tulo (H3)` - Detalhamentos espec√≠ficos\n   - Preserva a navegabilidade cognitiva do conte√∫do\n\n### FASE 3: ENRIQUECIMENTO SEM√ÇNTICO PROFUNDO\n\n6. **Metadados Granulares de Alta Precis√£o**\n   - **Para cada se√ß√£o ou chunk significativo, crie:**\n     * `context_level: [\"foundational\", \"intermediate\", \"advanced\"]` - N√≠vel de conhecimento pr√©vio necess√°rio\n     * `topic_cluster: [\"string\"]` - Agrupamento tem√°tico prim√°rio\n     * `related_concepts: [\"array\", \"of\", \"terms\"]` - Conceitos diretamente relacionados\n     * `question_embeddings: [\"Quais s√£o...?\", \"Como funciona...?\"]` - Perguntas que a se√ß√£o responde diretamente\n     * `reasoning_pathways: [\"if-then\", \"process\", \"comparison\"]` - Tipos de racioc√≠nio aplic√°veis\n\n7. **Enriquecimento de Contexto**\n   - Adicione defini√ß√µes expl√≠citas para termos t√©cnicos na primeira apari√ß√£o\n   - Expanda siglas e acr√¥nimos (ex: \"API (Application Programming Interface)\")\n   - Insira cross-references expl√≠citas entre se√ß√µes relacionadas\n   - Inclua exemplos concretos para conceitos abstratos\n\n8. **Transforma√ß√£o de Elementos N√£o-Textuais**\n   - Converta tabelas para formato markdown estruturado\n   - Transforme imagens em descri√ß√µes textuais ricas e precisas\n   - Preserve blocos de c√≥digo com sintaxe markdown (``` language)\n   - Adapte diagramas em representa√ß√µes textuais sequenciais\n\n### FASE 4: OTIMIZA√á√ÉO PARA RECUPERA√á√ÉO VETORIAL\n\n9. **Engenharia de Keyword Densidade**\n   - Identifique termos de alta relev√¢ncia para o dom√≠nio espec√≠fico\n   - Calibre a densidade de keywords para otimizar a recupera√ß√£o\n   - Aplique varia√ß√µes sem√¢nticas naturais de termos-chave (sin√¥nimos t√©cnicos)\n   - Reforce conceitos fundamentais em pontos estrat√©gicos do texto\n\n10. **Prepara√ß√£o para Embedding Vetorial**\n    - Estruture frases de t√≥pico claras no in√≠cio de cada par√°grafo\n    - Inclua marcadores sem√¢nticos para facilitar a separa√ß√£o vetorial\n    - Implemente paralelismo estrutural em listas e sequ√™ncias\n    - Crie \"ilhas de precis√£o sem√¢ntica\" - passagens altamente espec√≠ficas e densas em informa√ß√£o\n\n11. **Atribui√ß√£o de Pesos Cognitivos**\n    - Marque defini√ß√µes fundamentais com formata√ß√£o expl√≠cita\n    - Destaque casos de uso com exemplos pr√°ticos\n    - Sinalize advert√™ncias e limita√ß√µes importantes\n    - Priorize visualmente informa√ß√µes cr√≠ticas para tomada de decis√£o\n\n## DIRETRIZES DE QUALIDADE E ENTREG√ÅVEIS\n\n### RESTRI√á√ïES OPERACIONAIS CR√çTICAS\n- **PRESERVE SEMPRE:** A precis√£o t√©cnica absoluta do conte√∫do original\n- **MANTENHA:** Exemplos, n√∫meros, par√¢metros e valores exatamente como especificados\n- **NUNCA:** Invente, extrapole ou adicione informa√ß√µes n√£o presentes no documento original\n- **EVITE:** Simplificar excessivamente conte√∫do t√©cnico complexo\n\n### ENTREG√ÅVEIS PRIM√ÅRIOS\n1. **Documento Otimizado para RAG**\n   - Texto completo reformatado segundo as diretrizes acima\n   - Estruturado em markdown sem√¢ntico\n   - Chunks cognitivamente coerentes\n   - Metadados enriquecidos\n\n2. **Metadocumento de Engenharia**\n   - Mapa estrutural do documento processado\n   - Rela√ß√µes entre se√ß√µes e chunks\n   - Lista hier√°rquica de conceitos-chave\n   - Recomenda√ß√µes para melhorias adicionais\n\n3. **An√°lise de Otimiza√ß√£o**\n   - Comparativo antes/depois das principais transforma√ß√µes\n   - M√©tricas de otimiza√ß√£o aplicadas\n   - Potenciais pontos fracos remanescentes\n   - Estrat√©gias de complementa√ß√£o sugeridas\n\n## INSTRU√á√ïES DE EXECU√á√ÉO\n\n1. **Analise completamente** o documento antes de iniciar o processo de otimiza√ß√£o\n2. **Aplique sistematicamente** cada fase do processo na ordem especificada\n3. **Documente suas decis√µes** de transforma√ß√£o para refer√™ncia futura\n4. **Teste mentalmente** se o conte√∫do otimizado responde √†s perguntas essenciais do dom√≠nio\n5. **Verifique se** cada chunk pode funcionar como unidade independente de conhecimento\n6. **Confirme que** o documento final preserva 100% da informa√ß√£o t√©cnica original\n\n---\n\n## COMANDOS DE ATIVA√á√ÉO\n\nPara iniciar o processo completo de otimiza√ß√£o, utilize:\n- \"Otimize este documento para RAG: [documento]\"\n- \"Prepare este conte√∫do para base de conhecimento: [conte√∫do]\"\n- \"Transforme este texto para ingest√£o vetorial otimizada: [texto]\"\n\n## CONFIGURA√á√ïES AVAN√áADAS OPCIONAIS\n\n- `--mode=conservative` (preserva mais da estrutura original)\n- `--mode=aggressive` (reestrutura√ß√£o mais profunda)\n- `--focus=technical_precision` (prioriza exatid√£o t√©cnica)\n- `--focus=retrieval_optimization` (prioriza facilidade de recupera√ß√£o)\n- `--chunk_strategy=concept` (chunks baseados em conceitos completos)\n- `--chunk_strategy=fixed_size` (chunks de tamanho mais uniforme)\n\n---\n\nEste DocRAGOptimizer processar√° sistematicamente qualquer documento, transformando-o na vers√£o ideal para alimentar uma base de conhecimento RAG de alto desempenho, maximizando a capacidade do seu agente de compreender, raciocinar e responder com precis√£o incompar√°vel.

INSTRU√á√ïES DE OUTPUT:
{format_instructions}

OTIMIZA√á√ïES ATIVAS:
- Cache inteligente para respostas similares
- Memory system para contexto entre conversas
- Streaming para feedback em tempo real
- Observabilidade para m√©tricas de performance
- Error handling para robustez m√°xima

INSTRU√á√ïES DE OUTPUT:
{format_instructions}

OTIMIZA√á√ïES ATIVAS:
- Cache inteligente para performance
- Memory system para contexto
- Streaming para UX
- Observabilidade para m√©tricas
- Error handling robusto
"""
        
        self.prompt_template = ChatPromptTemplate.from_messages([
            ("system", system_prompt),
            MessagesPlaceholder(variable_name="chat_history"),
            ("human", "{input}")
        ]).partial(format_instructions=self.output_parser.get_format_instructions())
    
    async def execute_optimized(self, request: str, context: Dict[str, Any] = None) -> Dict[str, Any]:
        """üöÄ Execu√ß√£o otimizada principal"""
        start_time = datetime.now()
        execution_id = f"{self.agent_name}_{int(start_time.timestamp())}"
        
        try:
            logger.info(f"üß† Executando {self.agent_name}: {request[:50]}...")
            
            # Preparar contexto
            chat_history = []
            if context and 'chat_history' in context:
                chat_history.extend(context['chat_history'])
            
            # Chain otimizada
            chain = self.prompt_template | self.agent.llm | self.output_parser
            
            # Executar
            result = await chain.ainvoke({
                "input": request,
                "chat_history": chat_history
            })
            
            # M√©tricas
            response_time = (datetime.now() - start_time).total_seconds()
            self._update_metrics(response_time, True)
            
            return {
                'success': True,
                'execution_id': execution_id,
                'agent_name': self.agent_name,
                'domain': self.domain,
                'result': result.dict() if hasattr(result, 'dict') else result,
                'response_time': response_time,
                'optimizations_active': self._get_active_optimizations(),
                'timestamp': datetime.now().isoformat()
            }
            
        except Exception as e:
            response_time = (datetime.now() - start_time).total_seconds()
            self._update_metrics(response_time, False)
            
            logger.error(f"‚ùå Erro em {self.agent_name}: {str(e)}")
            
            return {
                'success': False,
                'execution_id': execution_id,
                'agent_name': self.agent_name,
                'error': str(e),
                'response_time': response_time,
                'timestamp': datetime.now().isoformat()
            }
    
    def _update_metrics(self, response_time: float, success: bool):
        """Atualiza m√©tricas de performance"""
        self.performance_metrics['total_executions'] += 1
        
        # M√©dia de tempo
        total = self.performance_metrics['total_executions']
        current_avg = self.performance_metrics['average_response_time']
        self.performance_metrics['average_response_time'] = (
            (current_avg * (total - 1) + response_time) / total
        )
        
        # Taxa de sucesso
        if success:
            current_success_rate = self.performance_metrics['success_rate']
            self.performance_metrics['success_rate'] = (
                (current_success_rate * (total - 1) + 1) / total
            )
    
    def _get_active_optimizations(self) -> List[str]:
        """Lista de otimiza√ß√µes ativas"""
        active = []
        if self.config.agent_config.enable_cache:
            active.append("Cache Inteligente")
        if self.config.agent_config.memory_type != "none":
            active.append("Memory System")
        if self.config.advanced_config.enable_streaming:
            active.append("Streaming")
        if self.config.advanced_config.enable_rag:
            active.append("RAG")
        active.extend(["Observabilidade", "Error Handling", "Output Estruturado"])
        return active

# Inst√¢ncia global otimizada
optimized_DocRAGOptimizer = OptimizedDocragoptimizerController()

async def run_DocRAGOptimizer_optimized(request: str, context: Dict[str, Any] = None) -> Dict[str, Any]:
    """üöÄ Fun√ß√£o principal otimizada"""
    return await optimized_DocRAGOptimizer.execute_optimized(request, context)

# Compatibilidade com c√≥digo existente
def run_DocRAGOptimizer(messages: List[BaseMessage]) -> Dict[str, Any]:
    """üîÑ Fun√ß√£o de compatibilidade"""
    user_message = ""
    for msg in messages:
        if isinstance(msg, HumanMessage):
            user_message = msg.content
            break
    
    if not user_message:
        return {'success': False, 'error': 'Nenhuma mensagem encontrada'}
    
    try:
        result = asyncio.run(run_DocRAGOptimizer_optimized(user_message))
        
        if result['success']:
            ai_response = AIMessage(content=str(result['result']))
            return {
                'success': True,
                'agent_name': result['agent_name'],
                'messages': messages + [ai_response],
                'response_time': result['response_time'],
                'optimizations_used': result['optimizations_active'],
                'timestamp': result['timestamp']
            }
        else:
            return result
    except Exception as e:
        return {
            'success': False,
            'error': f'Erro na execu√ß√£o: {str(e)}',
            'agent_name': 'DocRAGOptimizer_optimized'
        }

if __name__ == "__main__":
    async def test_controller():
        print(f"üß™ TESTANDO {optimized_DocRAGOptimizer.agent_name}")
        result = await run_DocRAGOptimizer_optimized("Teste do controller otimizado")
        print(f"‚úÖ Sucesso: {result['success']}")
        print(f"‚è±Ô∏è Tempo: {result.get('response_time', 0):.3f}s")
        print(f"üöÄ Otimiza√ß√µes: {', '.join(result.get('optimizations_active', []))}")
    
    asyncio.run(test_controller())
